<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[yaakaito.org]]></title>
  <link href="http://yaakaito.github.com/atom.xml" rel="self"/>
  <link href="http://yaakaito.github.com/"/>
  <updated>2013-01-26T18:19:28+09:00</updated>
  <id>http://yaakaito.github.com/</id>
  <author>
    <name><![CDATA[yaakaito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2/23に東京でiOSカンファレンスを開催します！]]></title>
    <link href="http://yaakaito.github.com/blog/2013/01/26/confwd/"/>
    <updated>2013-01-26T14:56:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/01/26/confwd</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。</p>

<p>2/23(土)にグリー株式会社でiOSエンジニアのためのカンファレンスイベント「conferenceWithDevelopers」を開催します！</p>

<p><img src="http://yaakaito.github.com/images/confwd.png" width="660"></p>

<p><a href="http://conference-with-developers.info/">公式サイト</a></p>

<p><a href="http://peatix.com/event/9727">チケットをゲットはこちらから</a></p>

<p>無料です！</p>

<p>今現在、決定しているスピーカーとして、
「iPhone Core Audioプログラミング」    で有名なクックパッドの永野さん、
「ビートロボ」でiOSのリードエンジニアを務める菅宮さん。
まだWebの更新がおいついていませんが、
「Dynamic Objective-C」や「iOS開発におけるパターンによるオートマティズム」を執筆された木下さんをはじめとする、
豪華なゲストでお送りする予定です！
講演者は随時アップデート、こちらでも告知していきますのでお楽しみに！！！</p>

<p>またLT参加者も募集しています！
iOSネタであれば制限はありません、こんなことやってみた！から実践的なものまで！皆さんのトークを心からお待ちしておおります。
LT参加を希望されるかたは、チケットページより「LT参加チケット」でお申し込みください！</p>

<p>より詳しい情報は<a href="http://conference-with-developers.info/">公式サイト</a>をご覧ください！</p>

<p>みなさんのご来場をお待ちしております！！</p>

<iframe frameborder="0" width="400" height="446" src="http://peatix.com/event/9727/share/widget?z=1&c=dark&t=1&a=1"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C用ユーティリティOverlineを公開しました]]></title>
    <link href="http://yaakaito.github.com/blog/2013/01/06/overline-010-release/"/>
    <updated>2013-01-06T13:45:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/01/06/overline-010-release</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。寒いですね。
Objective-C(主にiOS開発)向けのユーティリティライブラリを公開しました。
バージョンは0.1.0で、まだAPIはそこまでそろってません。</p>

<p><a href="https://github.com/yaakaito/Overline">Overline</a></p>

<p>似たようなライブラリではunderscore.mとかBlocksKitが近いかなーと思います。
基本的な機能の拡張で、めんどくさいところを楽にする系のライブラリです。ひかえめです。</p>

<p>主に僕がだるいなーと思ったベースで追加しています。
なのでいわゆるmapもあれば、URLエンコードしてくれるメソッドもありますし、という感じ。あとはいつも忘れる系とか。</p>

<p>underscoreなんかと違うところは、underscoreとかってがんばってJSっぽく書こうとしてる感じが伝わってくるんですが、
僕はJavaScriptみたいに書くのが綺麗だなとか書きやすいとかまったく思ってないので、Objective-Cらしく書けるようにしてあります。
好みのレベルかなーくらいのショートハンドは用意しています。</p>

<h2>使い方</h2>

<p>Cocoapodsでやるのが楽です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pod</span> <span class="s1">&#39;Overline&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pod</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>して</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;Overline.h&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>簡単ですね。</p>

<p>必要なところだけ使いたかったり、自分でプロジェクトに追加する場合は、<code>/Overline</code>の下から好きなファイルをプロジェクトに追加してください。
READMEに書いてある通りに分割してあるので、それなどを参考に。</p>

<h2>出来る事</h2>

<p>一覧はREADMEに書いてありますが、一例をだすと<code>map</code>とか</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">mapped</span> <span class="o">=</span> <span class="p">[</span><span class="err">@</span><span class="p">[</span><span class="err">@</span><span class="mi">1</span><span class="p">,</span><span class="err">@</span><span class="mi">2</span><span class="p">,</span><span class="err">@</span><span class="mi">3</span><span class="p">,</span><span class="err">@</span><span class="mi">4</span><span class="p">,</span><span class="err">@</span><span class="mi">5</span><span class="p">,</span><span class="err">@</span><span class="mi">6</span><span class="p">]</span> <span class="nl">mappedArrayUsingBlock:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">obj</span> <span class="n">integerValue</span><span class="p">]</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'><span class="c1">// @[@2,@4,@6]</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういう感じで正規表現でマッチングできたりとか (正規表現オブジェクトとしてちゃんと表記できないので、ちょっと微妙だけども)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="s">@&quot;https?&quot;</span> <span class="nl">testInString:</span><span class="n">urlString</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>たまにしか使わないけど毎回引き出してくるのだるいーみたいな</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="s">@&quot;hoge&quot;</span> <span class="n">md5</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="s">@&quot;hoge&quot;</span> <span class="n">stringByHashingSha256</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="s">@&quot;YQ==&quot;</span> <span class="n">decodeBase64</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>なんでだよと突っ込みたくなる<code>insertObjects:atIndexes</code>とか</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="n">marray</span> <span class="nl">insertObjects:</span><span class="err">@</span><span class="p">[</span><span class="err">@</span><span class="mi">4</span><span class="p">,</span><span class="err">@</span><span class="mi">5</span><span class="p">,</span><span class="err">@</span><span class="mi">6</span><span class="p">]</span> <span class="nl">atIndex:</span><span class="mi">1</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://stackoverflow.com/questions/2060741/does-objective-c-use-short-circuit-evaluation">よく話題になったりはまったりするNSNull</a>をできるだけ意識せずに使えるように</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">dic</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span>
</span><span class='line'>        <span class="s">@&quot;null-key&quot;</span> <span class="o">:</span> <span class="p">[</span><span class="n">NSNull</span> <span class="n">null</span><span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="p">[[</span><span class="n">dic</span> <span class="nl">objectForKey:</span><span class="s">@&quot;null-key&quot;</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="s">@&quot;fuck&quot;</span><span class="p">];</span> <span class="c1">// nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>できたりします。</p>

<h3>よろしくね！</h3>

<p><a href="https://github.com/yaakaito/Overline">Overline</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ことしの抱負]]></title>
    <link href="http://yaakaito.github.com/blog/2013/01/04/new-year-2013/"/>
    <updated>2013-01-04T01:42:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/01/04/new-year-2013</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！あけてましたね！
しばらく書いてなかったので、書き方忘れそうでした。
去年はコード書くのがひじょーにだるくなっていく年でした、歳ですかね。
なので今年目標は</p>

<ul>
<li>コードできるだけ書かない</li>
<li>コードは昔の自分に書いてもらう</li>
</ul>


<p>で、いこうとおもいます。今年もよろしくお願いします！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AppCodeで華麗にテストをキメる！]]></title>
    <link href="http://yaakaito.github.com/blog/2012/12/09/adv-appcode-splendid-testing/"/>
    <updated>2012-12-09T00:02:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/12/09/adv-appcode-splendid-testing</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！！
<a href="http://qiita.com/advent-calendar/2012/objective-c">Objective-Cアドベントカレンダー2012</a> 8日目の記事です。
みなさんiOSアプリを開発するときに当然テストを書くと思うんですが、このテストメソッドだけ試したいなーってときに、
XcodeだとManageShemesからチェックを外して・・・とか、できるんですが、非常に面倒ですよね！！！
そんなあなたにAppCodeがおすすめです！</p>

<h2>テストメソッド単位で実行をキメよう！</h2>

<p>とりあえずキメてみましょう！テストフレームワークはSenTestingKitです。</p>

<p>普通にテストを書いていって・・・</p>

<p><img src="http://yaakaito.github.com/images/adv-testing-test-case.png" width="420"></p>

<p>この<code>testMappedArrayUsingBlock</code>だけを実行して確かめてみたいなーと思っずたら、
キーバインドを弄っていない場合は<code>Command + Option + R</code>(多分あってるはず)なんかで、Run > Run&#8230; を呼び出します。
そうするとこんな感じのメニューが現れて・・・</p>

<p><img src="http://yaakaito.github.com/images/adv-testing-select.png" width="420"></p>

<p><code>2</code>を押すと、このコンテキストのみを実行してくれます。
すると・・・</p>

<p><img src="http://yaakaito.github.com/images/adv-testing-result.png" width="420"></p>

<p>こういう感じに<code>testMappedArrayUsingBlock</code>だけ実行してくれます！便利ですね！！！</p>

<p>あとはガンガンテストをかいてガンガン実行してカイラクを得ましょう！！！</p>

<h2>ちなみにこれをXcodeで開いてみると・・・</h2>

<p><img src="http://yaakaito.github.com/images/adv-testing-xcode.png" width="320"></p>

<p>こんな感じになっています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSSライクにUIKitをスタイルできるNUIがおもしろい！]]></title>
    <link href="http://yaakaito.github.com/blog/2012/12/06/adv-nui-css-like-uikit/"/>
    <updated>2012-12-06T22:01:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/12/06/adv-nui-css-like-uikit</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
<a href="http://qiita.com/advent-calendar/2012/objective-c">Objective-Cアドベントカレンダー2012</a> 6日目の記事です。
AppCodeのことを書こうと思っていたのですが、今日 <a href="https://github.com/tombenner/nui">NUI</a> というライブラリを見つけて、今僕の中でアツいので紹介しようと思います。
サンプルも書いていたのですが、アドベントにカレンダーできなさそうなので、今回は紹介だけです。</p>

<h2>NUIって何</h2>

<p>NUIはCSSライクにUIKitのスタイルを指定できるライブラリです。
READMEからの引用ですが、こんな感じに定義することができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">@</span><span class="nl">primaryFontName:</span> <span class="n">HelveticaNeue</span><span class="p">;</span>
</span><span class='line'><span class="err">@</span><span class="nl">secondaryFontName:</span> <span class="n">HelveticaNeue</span><span class="o">-</span><span class="n">Light</span><span class="p">;</span>
</span><span class='line'><span class="err">@</span><span class="nl">primaryFontColor:</span> <span class="err">#</span><span class="mi">333333</span><span class="p">;</span>
</span><span class='line'><span class="err">@</span><span class="nl">primaryBackgroundColor:</span> <span class="err">#</span><span class="n">E6E6E6</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Button</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">background</span><span class="o">-</span><span class="nl">color:</span> <span class="err">@</span><span class="n">primaryBackgroundColor</span><span class="p">;</span>
</span><span class='line'>    <span class="n">border</span><span class="o">-</span><span class="nl">color:</span> <span class="err">#</span><span class="n">A2A2A2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">border</span><span class="o">-</span><span class="nl">width:</span> <span class="err">@</span><span class="n">primaryBorderWidth</span><span class="p">;</span>
</span><span class='line'>    <span class="n">font</span><span class="o">-</span><span class="nl">color:</span> <span class="err">@</span><span class="n">primaryFontColor</span><span class="p">;</span>
</span><span class='line'>    <span class="n">font</span><span class="o">-</span><span class="n">color</span><span class="o">-</span><span class="nl">highlighted:</span> <span class="err">#</span><span class="mi">999999</span><span class="p">;</span>
</span><span class='line'>    <span class="n">font</span><span class="o">-</span><span class="nl">name:</span> <span class="err">@</span><span class="n">primaryFontName</span><span class="p">;</span>
</span><span class='line'>    <span class="n">font</span><span class="o">-</span><span class="nl">size:</span> <span class="mi">18</span><span class="p">;</span>
</span><span class='line'>    <span class="n">corner</span><span class="o">-</span><span class="nl">radius:</span> <span class="mi">7</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">NavigationBar</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">background</span><span class="o">-</span><span class="n">tint</span><span class="o">-</span><span class="nl">color:</span> <span class="err">@</span><span class="n">primaryBackgroundColor</span><span class="p">;</span>
</span><span class='line'>    <span class="n">font</span><span class="o">-</span><span class="nl">name:</span> <span class="err">@</span><span class="n">secondaryFontName</span><span class="p">;</span>
</span><span class='line'>    <span class="n">font</span><span class="o">-</span><span class="nl">size:</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>    <span class="n">font</span><span class="o">-</span><span class="nl">color:</span> <span class="err">@</span><span class="n">primaryFontColor</span><span class="p">;</span>
</span><span class='line'>    <span class="n">text</span><span class="o">-</span><span class="n">shadow</span><span class="o">-</span><span class="nl">color:</span> <span class="err">#</span><span class="mi">666666</span><span class="p">;</span>
</span><span class='line'>    <span class="n">text</span><span class="o">-</span><span class="n">shadow</span><span class="o">-</span><span class="nl">offset:</span> <span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://yaakaito.github.com/images/adv_nui.png" width="320"></p>

<p>(<a href="https://github.com/tombenner/nui/blob/master/README.md">README</a>より引用)</p>

<p>実際にCSSが書けるわけではなくて、あくまでUIKitに対応するプロパティをCSSライクに設定できるライブラリです。
昔CSSをそのまま使えたら幸せじゃね、と考えてみたことはあったのですが、さすがにしんどくて挫折しました。
そういう意味では NUI みたいな感じになっていても、十分良さそうに思えますね。</p>

<h2>簡単な使い方</h2>

<p>僕自身もまだちゃんと使えている訳ではないのですが、起動後にNUIを有効にしてあげて、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="n">NUIAppearance</span> <span class="n">init</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、NUIをセットアップします。</p>

<p>あとは適用したいUIクラスをNUIButtonなどのサブクラスで定義して、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">initNUI</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">initNUI</span><span class="p">];</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">nuiClass</span> <span class="o">=</span> <span class="s">@&quot;Button:MyButton&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>とかしてあげると、プロジェクトに含まれいる<code>NUIStyle.nss</code>を元にスタイリングしてくれるようです。
自信はそんなにないですが。</p>

<h2>設定できるプロパティとか</h2>

<p><a href="https://github.com/tombenner/nui/blob/master/README.md#style-classes">READMEのStyleClasses</a>に書いてありますが、一通りは設定できる様子。</p>

<h2>楽しみですね</h2>

<p>ログをみたらまだできたばかりのプロダクトでした。今後どうなるか楽しみですね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリのテストを１週してみて思ったこと]]></title>
    <link href="http://yaakaito.github.com/blog/2012/11/12/ios-testing-cycle-1/"/>
    <updated>2012-11-12T21:57:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/11/12/ios-testing-cycle-1</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
iOSアプリのテストのことをそろそろ１年くらい考えていて、１周した感じもするので、
ここら辺で一旦の区切りの意味でもなんとなく考えをまとめてみる。
ちなみにテストというのは主に単体テストにフォーカスした内容です。</p>

<p>こういう系のエントリを書くと、僕はわりと誤解を生みやすい書き方をしてしまうので先に断っておくと、</p>

<ul>
<li>なんらかのアプリ開発手法や、テスト手法をDisっているわけではないです。</li>
<li>フレームワークがいろいろ登場したりしますが、それらをDisっている訳ではないですし、それぞれ素晴らしいものだと思っています。</li>
<li>同じくそのフレームワークを使っているプロジェクトも登場しますが、それらをDisっている訳でもありません。</li>
<li>もちろん特定個人をDisる内容でもありません。</li>
</ul>


<p>という感じで、何かをDisってる記事ではないので、ご了承ください。</p>

<p>長めです。結局何がよかったの、っていう人は下の方から見てください。</p>

<h2>テストフレームワークの変遷</h2>

<h3>はじめの一歩</h3>

<p>皆さんご存知SenTestingKitです。
ほかにどんなフレームワークあるのか知らんし、とりあえずこれで書けなきゃどっちにしろ無理だろ、という感じでした。セットでOCMockも使っていました。
記憶が正しければ、Xcodeは4.1で、iOS4.x~を対象にしたアプリを作っていた記憶です。
ぶっちゃけこのころはSenTestingKitがどうしようもない感じで、状況によっては <code>STAssertTrue(YES)</code> が落ちたりしていました。
それでもある程度のテストを書くことはできました。モデルのテストは十分に書ける感じ。ビュー関連に関しては完全に諦めモードでしたが・・・。
この頃はアプリ全体をテストしていたのと、あんまり慣れていないところもあって、テストケースが冗長だったり、テストが思ったのと違う動きをしたり、いろいろありました。</p>

<h3>安定を求めてGHUnitへ</h3>

<p>まじなんとかならんの、とか思っていたときに良さげだなーとなったのがGHUnit。
GHUnitはそれ自体がアプリとして動いて、その上でテストコードを実行するというもの。
SenTestingKitと比較して圧倒的に安定しているのと、SenTestingKitと互換性があるのがプラス点。
さらには<code>GHVerifyView</code>というビューを画像の一致率でテストできるものもあったり、非同期テスト標準であったりと、盛りだくさん。
この時期に作っていたもので公開しているものでは、NLTHTTPStubServerはテストがGHUnitで書かれています。
アプリ開発をしつつも、アプリのコア部分をフレームワーク化する、ということもやっていたし、
特にフレームワーク側はちゃんとテスト固めないとなぁという意味でも、安定しているGHUnitを選択しました。
アサーションもSenTestingKitよりも断然豊富で、iOSのテストに慣れてきたのもあって、
テストケースはわりと綺麗に書けるようになっていった気がします。(どうしようもないところもありますが。)</p>

<p>使いはじめの時点ではほとんど問題なく、これでいいや、という感じでしたが、GHUnitは使い続けるうちに問題がでてきました。
GHUnitの問題点は、GHUnit自体がiOSアプリとして動くものなので、ターゲットを切り替えたりでどうしてもテスト実行とかがスムーズにできないところ。
GHUnitを2つのチームで使ってみましたが、保守できたのは片方だけだったので、思いの他このコストは高かったみたいです。
実行されないテストに価値はないし、実行時に障害があるのは問題外。同じアプリで動くタイプでBDDスタイルなCedarもこの段階で却下。
あとはテストログの表示がイケてないなーと思うところもありました。この辺りはちょっと弄ってあげればすむ話ではありますが、それでもコストが高め。</p>

<h3>BDD系への転向</h3>

<p>次に触ってみたのはObjective-C版RspecことKiwiです。
GHUnitの時と同じくこの時期に作っていたNLTQuickCheckにはテストにKiwiが使われています。
これはこの段階ではアプリのテストにはまったく利用していなくて、NLTQuickCheckみたいなObjective-C製のライブラリ開発に利用していました。
ライブラリを書いている分にはKiwiはめちゃくちゃいいです。QuickCheckみたいに、ビューが絡まない中で一旦非同期処理などもあまり考えずに済むというのは、テストを書いていく上では快適でした。
ただKiwiはすぐに問題にぶちあたることになります。単純にGHUnitの<code>GHVerifyView</code>がアプリ開発で便利すぎたので、
どうしてもアプリを作ろうと考えるとGHUnitの方が良さそうに思えました。</p>

<h3>ビューテストをするためにGHUnitへ戻る</h3>

<p>そしてGHUnitへ戻ることになります。
結構複雑なビューをもつアプリを作っていたこともあって、ビューをコンポーネント単位で視覚的に動作確認できるのは、ものすごく便利でした。
ただやっぱりXUnit形式で書くのがもはやしんどい感じになっていて、ダルぽよ〜〜〜という状態でした。</p>

<h3>もう一度BDD系へ戻る</h3>

<p>Kiwiに戻ってきました。このあたりできれいなBDD、に対する回答を求めてTheRSpecBookなんかを読み始めました。
TheRSpecBookは非常によい本で、BDDってなんじゃ、みたいなところから実際にこんな感じで進めるといいよ、ということが書いてあって参考になりました。
ただ、じゃあそれiOSアプリ開発でObjective-C使って実践できんの、といわれるとそういう訳ではなく。
最初の方はとにかくSpecを全部書ききってから実装する、みたいなことも試してみましたが、あんまりしっくりこない。(ノッてるとうまくいっていると錯覚はする。)
BDDやるならビヘイビアにドリブンなデベロップしないと意味ないよねー、後付けのBDDとか何の意味があるんや！！！ってことで、OH！やっぱり今回も駄目だったよ。状態に。</p>

<h3>さらにBDD系を突き詰めてみる</h3>

<p>けどここで引き下がるのも勿体ないので、注目度があがってきたSpectaに乗り換えてもう一度チャレンジしてみることに。
<code>theValue</code>を書かなくともよくなった分、やりやすさはあがった気がします。ヤッホーイ！
だいたいモデル層はめちゃくちゃ綺麗にいけるようになってきたんですが・・・・え？View・・・？・・・
とりあえずビューはFrankでカバーするかーという感じになったのですが、結局のところ作ってみてだいたいこんな感じやろ、
という調整が多くなるビューでいちいちテストとか書いてられるか！！！という感じになった。</p>

<h3>原点回帰</h3>

<p>という訳でSenTestingKitまで戻ってきました。KiwiやSpectaが普段の開発で困らない分には動くってことは生でも動くってことです。
僕はあんまり思ってなかったんですが、Blocks使うとスタックトレースが追いにくくなるとかも、ちょいちょい聞くので素直にSenTestingKitがよくね？ということに。
それでもアサーションとかは不足しているので、OCHamcrestとかで補いつつ、非同期テストケースとかもサンプルがたくさんあるし、Githubなんかで拾ってこれば十分かなぁと。
普段はTDDで開発して、ビューは先に動きのプロトタイプを作ってしまって、あとからそれを補強していく、というので全然問題ないと思う。
GHUnitはやっぱり実行コストが高いし、SenTestingKitでいけるならそれでいいじゃない。Cmd+Uがないとテスト書く気起きないっていうか・・・。</p>

<h3>変遷まとめ</h3>

<p>とりあえずまとめておくと僕はこんな感じで使ってきました。
SenTestingKit -> GHUnit -> Kiwi -> GHUnit -> Kiwi -> Specta -> SenTestingKit</p>

<h2>iOS開発でよくあることを踏まえたい</h2>

<p>ここから割とエンジニアリングとは逆方向な内容になります。
ただ僕もエンジニアなので、ディレクターとかデザイナー目線でみると違うかもしれません。</p>

<h3>ビューを優先して組み立てるべき</h3>

<p>お客さんがみたいのはビューですし、ディレクターがみたいのもビューなら、みなさんがアプリ作りたいと思ったとき最初に頭に浮かぶのもビューです。
iOSアプリ作ってていつも思うのが、いくらモデル層をきれいに分離して、きれいなAPIを設計で綺麗なテストができたとしても、
アプリのファーストビューを表示するためにAPIを3つも4つも呼んでその上計算までしなきゃいけない、
とかだとハイパフォーマンスなアプリとは到底言えないですよね。ということ。
「本当の気持ちなんて伝えられるわけないのよ、だって私は、綺麗な世界とは違う世界をいきているんだもの！！！RESTfullとかしらないわよ！！！全部まとめて返してよ！！！」
という感じです。別にiOS限った話ではないですが、クライアントはだいたいそんな感じだと思ってます。(しつこいですがDisったりしてる意図ないです)</p>

<h3>やっぱさ、新しい機能とか試してみたいじゃん？</h3>

<p>ですよね、僕もそう思います。そういうのってスピードが大事じゃないですか。
テスト書いてる暇とかないわ、というのは嘘かサボりだと思いますが、プロトにいちいちテスト書いててもキリがないというのはあると思います。
OS自体のアップデートも早いし、界隈の流行り廃りもまだまだ早いので、保守にあまりにもコストを掛けすぎるのはあまりチャレンジングではないと思います。</p>

<h3>なんか思ってたのと違うんだけど</h3>

<p>よくあることです。諦めてください。
テスト書きまくって苦労しました、みたいなアホな状態になってたら悪いのはちゃんとプロト見せたりしなかった開発者です。</p>

<h3>テストってさ？コストかかるんでしょ？</h3>

<p>開発をサポートするテストは書いても書かなくても開発速度にそこまで差はないと思います。
長期的にみたらテストは書いた方がいいですが。</p>

<h3>人海戦術でなんとかなるっしょ？</h3>

<p>アホか。</p>

<p>と言いたいところですが、そういう場面があることは確かです。</p>

<h3>よくあることまとめ</h3>

<p>まあ、iOS開発に限ったことじゃないですが(2回目ですね)、巻き戻しとか、もっといいの目指そう！とかそういうのはあるし、
それが正しい場面もあるので、あんまり過剰にやりすぎないようにしないとトータルとしてのパフォーマンスが下がるので、それでは意味がない。</p>

<h2>とりあえず１週目の結論として</h2>

<p>普通にアプリ作る分には単体テストはSenTestingKit+拡張マッチャでモデル中心に大丈夫と思えるところまで書け。ということになりました。割と普通です。
カバレッジを100%にあげるとかはかなりしんどいですし、多分リターンは思ったより少ないです。iOSアプリ、試作とかでわりと中変えたりすること多いし。
なのであるリリースラインに向けて、開発者（とディレクター）がよし行ける！と思える分のテストが書ければそれでよいと思います。
もちろん高いことに超したことはないです。例えば何かのSDK作るとかって場面ではカバレッジは意識した方が良いに決まっています。
けれど、無理にカバレッジをあげるよりも、大丈夫！というラインで意識する方が、いろいろ進めやすいと思います。
勘違いのないように言っておきますが、テスト書かなくともいいやろ、という事ではありません。
テストを書くのが目的にならないように、ということです。本質はそこではありません。
設計上テストが楽になるライブラリとかもあればガンガン使えばいいと思います。(CoreDataで言えばMagicalRecodeとか)</p>

<p>そして、いわゆる単体テストでビュー全体の遷移とかをカバーしようとすると相当しんどいです。
このあたりにはFrankやKIFなどのドライバー系のツールをうまく使うとよいと思います。
TheRSpecBookなんかにも出てくる二重のテストイテレーションを真似ましょう。
ただFrankやKIFについてはまだなんか話せるほど知識がないので２週目にご期待くださいということで。</p>

<p>普通に、と言ったのにはちょっと意味があって、テストフレームワークに関して言えば、アプリによって変えるべきです。
ここでいう普通のアプリは例えばユーティリティアプリだったり、何かのサービスのクライアントだったり、という感じです。
iOSでガッツリ動くゲームとか、もっと大規模なものを作りたいなら、いまのところはまだGHUnitの方がよいと思います。
逆にビューの存在しないライブラリを書くのであればBDD系のフレームワークでBDDしても全然OKだと思います。</p>

<h2>まとめ</h2>

<p>こんなこと書いてて僕が言うのもあれなんですが、テスト書くの目的にしちゃうと絶対に終わらないです。
ここのテストしんどそうだなーと思ったら、それはしんどいんだと思います。
時には人海戦術でパターン入れてみる、というのも必要だと思いますし、
結局のところ人が触らないと分からないところも多いですが、それもテストです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小さいCoffeeScriptのテストにはVowsが便利]]></title>
    <link href="http://yaakaito.github.com/blog/2012/11/03/vows-coffee-testing/"/>
    <updated>2012-11-03T02:04:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/11/03/vows-coffee-testing</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
小さめのツールをCoffeeScriptで書く機会があったのですが、
テストに使った<a href="http://vowsjs.org/">Vows</a>(<a href="http://vowsjs.jp/">日本語訳</a>)というのが結構良かったです。
一言で言えば、BDDライクで非同期テストに強く、Coffeeと相性のよい、topicという独特の概念をもったフレームワークです。(長い)</p>

<h2>Vowsのセットアップと実行</h2>

<p>npm経由でインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install vows
</span><span class='line'>npm install -g vows</span></code></pre></td></tr></table></div></figure>


<p>設定ファイルとかは特に必要なく、直接テストファイルを実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vows test.js</span></code></pre></td></tr></table></div></figure>


<p>CoffeeScriptをそのまま実行することができます。ここが重要</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vows test.coffee --spec</span></code></pre></td></tr></table></div></figure>


<p><code>--spec</code>オプションを付けるといい感じの出力になります。</p>

<h2>Vowsのテストケース</h2>

<p>簡単な例として文字列を反転する<code>reverse</code>というモジュールを考えたときのテストはこんな感じ。
特にCoffeeScriptで書くことにメリットを感じるので、サンプルは全部CoffeeScriptです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vows    = require 'vows'
</span><span class='line'>assert  = require 'assert'
</span><span class='line'>reverse = require 'reverse'
</span><span class='line'>
</span><span class='line'>vows
</span><span class='line'>  .describe('reverse')
</span><span class='line'>  .addBatch
</span><span class='line'>    'example' :
</span><span class='line'>      topic : -&gt;
</span><span class='line'>        reverse('abc')
</span><span class='line'>      'should return cba' : (str) -&gt;
</span><span class='line'>        assert.equal str, 'cba'</span></code></pre></td></tr></table></div></figure>


<p><code>describe</code>を定義して、<code>addBatch</code>でテストのまとまりを追加します。
ポイントはさっきからちょっと出てきている<code>topic</code>で、これの実行結果がその下のテストケースへ渡ってきます。
この中は非同期でもokみたいで(今回は試していないけど)、<code>topic</code>の実行が終わったタイミングでテストが走る、という仕組みみたいです。便利ですね。
<code>topic</code>を使っていくとどうしてもモジュールを小さくせざるをえないので、きれいなコードを書くのにはよいと思います。</p>

<p><code>topic</code>とかテストケースはネストすることもできて、例えばabcの他にdefgもテストしたい！とかって場合は、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.addBatch
</span><span class='line'>  'example2' :
</span><span class='line'>    topic : reverse
</span><span class='line'>    'when abc' :
</span><span class='line'>      topic : (f) -&gt; f('abc')
</span><span class='line'>      'should return cba' : (str) -&gt;
</span><span class='line'>        assert.equal str, 'cba'
</span><span class='line'>    'when abc' :
</span><span class='line'>      topic : (f) -&gt; f('defg')
</span><span class='line'>      'should return gfed' : (str) -&gt;
</span><span class='line'>        assert.equal str, 'gfed'</span></code></pre></td></tr></table></div></figure>


<p>こういう感じで書くこともできます、一つ上の<code>topic</code>は次の<code>topic</code>に渡っていくので、テストするスコープを制限することができます。
ただ、ネストしすぎるとちょっと読みにくいですね。</p>

<h2>まとめ</h2>

<p>個人的には、今回みたいにNodeを使って小さいコマンドラインツールとかを全部Coffeeで書くときに使うのがよいかなーという印象でした。
クライアントサイドのテストとかになってくると、長い目で見たときにBusterJSやその他Swarm系使った方がよさそうな印象。
大きめのプロジェクトになってくると、テストケースが要はでかいオブジェクトの定義なので、どうもしんどくなっていく気がする。</p>

<p>テストの為の中間ファイルとして.jsを吐く必要がないので、リポジトリがCoffeeScriptだけできれいに保てるのもポイント。
vowsでカバーできるサイズなら全部CoffeeScriptで書いてしまっても、それなりにモチベーションが保てる。(CoffeeScriptそんなに好きじゃない)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ズルいデザインが流行っていたので]]></title>
    <link href="http://yaakaito.github.com/blog/2012/10/31/zurui/"/>
    <updated>2012-10-31T01:51:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/10/31/zurui</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！！！
ズルいデザインが流行っているので、僕もずるいデザインにしてみました！！！</p>

<p>ズルい線とかは元々使っていたので、さらにズルい要素を足して背景をカッチョヨクしてみました！！
あとは微妙に文字がでかくなったりしています！ズルいですね！！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KiwiとSpectaの比較]]></title>
    <link href="http://yaakaito.github.com/blog/2012/10/22/kiwi-vs-specta/"/>
    <updated>2012-10-22T00:48:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/10/22/kiwi-vs-specta</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
前まではiOSのテストには主にKiwiを使っていたのですが、最近Spectaが良い感じなので使っています。
結局のところ好みになってしまうのですが、簡単に比較というか感想を。(コードはそれぞれのREADMEみてください)
どちらもRSpecに代表されるBDDスタイルの記述ができます。</p>

<ul>
<li><a href="https://github.com/allending/Kiwi">Kiwi</a></li>
<li><a href="https://github.com/petejkim/specta">Specta</a></li>
</ul>


<h2>そもそもの違い</h2>

<p>どちらも似た感じでテストを書くことができますが、そもそもとしてSpectaは自身がマッチャーなどは提供していません。
主にExpectaを使うことになると思いますが、他のものを使うことができます。
対してKiwiはモックから何からそろったフルセットのフレームワークです。</p>

<p>Spectaの方がモジュール単位に分割されているので、ライブラリとして見たときは扱い易いです。
ただ、好みのライブラリとか特にないって場合はKiwiを使った方がスムーズにいける印象です。</p>

<h2>導入のしやすさ</h2>

<p>SenTestingKitで動かすならどっちも同じくらい簡単にセットアップできます。
ただしSpectaは分割している分、importとdefineが多くなってすこし見た目が悪いです。</p>

<h2>アサーション</h2>

<p>Sepcta使う最大の理由がほぼここにあって、Expectaががんばっているんですが、Objective-Cではありがちなプリミティブに対するラッパーが必要ないこと。
Kiwiの場合は<code>theValue</code>マクロが用意されていて、これを使わなきゃいけないのでちょっとだるい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>expect(1).to.equal(1); // Specta
</span><span class='line'>[[theValue(1) should] equal:theValue(1)]; // Kiwi</span></code></pre></td></tr></table></div></figure>


<p>あとはObjective-Cっぽく書くか、マクロで書くかの違いくらい。僕はKiwiっぽい記述の方が好きなんですが、どうしても<code>theValue</code>書きたくないでござる症候群が・・・。
マッチャーの豊富さはどちらも同じくらいです。beNonZeroとかが分かりやすく書けるのはちょっとKiwiの方がいいかな。
あとはBooleanがExpectaは<code>beTruthy</code> <code>beFalsy</code>ですが、Kiwiが<code>beTrue</code> <code>beFalse</code> なので気をつけましょう。</p>

<h2>モックとか</h2>

<p>Kiwiは組み込みのモック、SpectaはOCMockやLRMockyが推奨されているようです。
メソッドをモックしたりとか基本的なところは一緒ですが、ちょっとずつ特徴があります。</p>

<p>Kiwiの組み込みとLRMockyは、メッセージエクスペクテーションとして<code>recieve</code>がちゃんと使えるのがよいところ。
OCMockはこのあたりがちょっとめんどくさくて、mockしてverifyしてね、という形式。notはない。</p>

<p>逆にOCMockのいいところは<code>andDo:block</code>と<code>andCall:selector</code>が非常に使いやすいところ。
Kiwiなんかは、特にBlocksが絡むとテスト用に拡張したオブジェクトに頼ったりする場面があるけど、OCMockはそれがほとんど必要ないのが良い。</p>

<p>個人的にはBlocksを結構使うので、OCMockが使いやすいですね。</p>

<h2>選ぶ基準</h2>

<p>そもそもObjective-CでBDDフレームワーク使ったことないならKiwi使っとくのが無難です。
元々GHUnitで書いていて、やっぱLRMocky使いたいわー＞＜とかならSpecta使うといいと思います。</p>

<p>ちなみに最近ホットなReactiveCocoaはSpecta使ってますね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Buster.JSについて少しLTした]]></title>
    <link href="http://yaakaito.github.com/blog/2012/10/16/busterjs-clientjs-testing/"/>
    <updated>2012-10-16T22:24:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/10/16/busterjs-clientjs-testing</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。
突然LTすることになったので、最近気になってるBuster.JSネタで話してきました。
LTなのであんまり内容は濃くないです。iPhoneシュミレーターとかでも楽に動くし便利だね！というくらいです。</p>

<script async class="speakerdeck-embed" data-id="507b79def901500002026b02" data-ratio="1.3333333333333333" src="http://yaakaito.github.com//speakerdeck.com/assets/embed.js"></script>


<p>スライドにはほとんど情報がないので、どんな感じで話したかを箇条書きで。</p>

<ul>
<li>yaakaito.orgが変なところに飛ばされとる (今はなおったみたい)</li>
<li>みんなJSかきますよね！テストやってますか？？？</li>
<li>フレームワークいろいろありますが、最近はBuster.JSがアツい</li>
<li>JSTestDriverのようにブラウザ上での自動実行と、ヘッドレスでの実行がサポートされている</li>
<li>&#8220;Test-Driven JavaScript Development&#8221;でも言及されていますが、実際の環境で動かせることは大事</li>
<li>ちなみにこの本書いた人がBuster.JSの作者で、Buster.JSはこの本に書いてある理想を実際に行おうとしている</li>
<li>けど、ヘッドレスでも動くしNodeも扱えるので、使い分けがしやすくて便利</li>
<li>ヘッドレスはまだサポートされてると思った？残念、ベータちゃんでした！</li>
<li>ともあれ便利なので使ってみよう</li>
<li>npmで簡単インストール</li>
<li>buster.jsというコンフィグを書いて、テストを書く</li>
<li>サーバーを立ち上げてテスト対象になるブラウザでアクセス、対象として登録</li>
<li>ChromeやFirefoxはもちろんiOSシュミレーターなんかでもばっちり！(実機もいけるよ！)</li>
<li>RSpecみたいなBDDstyleの書き方もできるよ</li>
<li>sinon.jsとwhen.jsが内蔵されているのでこれ一つで結構いろいろできるよ！ (ちなみにsinon.jsも同じ作者だったはず)</li>
<li>クライアントサイドJSもテスト書こうね！</li>
</ul>


<p>みたいな感じです！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoffeeScriptでライトにBDDする]]></title>
    <link href="http://yaakaito.github.com/blog/2012/10/10/light-coffee-bdd/"/>
    <updated>2012-10-10T00:54:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/10/10/light-coffee-bdd</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。
ちょろいCoffeeScript(単発ライブラリ程度)をBDDしながら書くとしたら、
どんな感じにするのが楽かなーと思ったのでちょっとやってみた。</p>

<p>選ぶ以前に、割と最初から何使うかなーってのは決めていて、
grunt+grunt-jasmine-taskの組み合わせです。</p>

<ul>
<li><a href="https://github.com/yaakaito/light-coffee-bdd">light-coffee-bdd</a></li>
</ul>


<h2>grunt-jasmine-task</h2>

<p>grunt-jasmine-taskをnpmから引っ張ってきます。
これはgruntに標準でついてくるtest-taskと同じでphantomjsを使ってテストを実行するタスクです。
requirejs使うといい感じに書けるっぽいです。
package.jsonを適当に作って取ってきます。ついでにcoffee-taskも取ってきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;project&quot;</span>
</span><span class='line'>  <span class="p">,</span> <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;0.0.1&quot;</span>
</span><span class='line'>  <span class="p">,</span> <span class="s2">&quot;private&quot;</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">,</span> <span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;grunt-coffee&quot;</span> <span class="o">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>    <span class="p">,</span> <span class="s2">&quot;grunt-jasmine-task&quot;</span> <span class="o">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>grunt.js</h2>

<p>grunt.jsにcoffeeのコンパイルとjasmineのタスクを追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">coffee</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">src</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s1">&#39;lib/*.coffee&#39;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">dest</span> <span class="o">:</span> <span class="s1">&#39;build/&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">,</span> <span class="nx">spec</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">src</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s1">&#39;specs/*.coffee&#39;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">dest</span> <span class="o">:</span> <span class="s1">&#39;spec_runner/spec/&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">,</span> <span class="nx">runner</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">src</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s1">&#39;spec_runner/main.coffee&#39;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">dest</span> <span class="o">:</span> <span class="s1">&#39;spec_runner/&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">,</span> <span class="nx">jasmine</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">all</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">src</span> <span class="o">:</span> <span class="p">[</span><span class="s1">&#39;spec_runner/index.html&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">tasks</span> <span class="o">:</span> <span class="s1">&#39;coffee:all&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ランナー</h2>

<p>spec_runner/にランナーを用意します
libとかにjasmineとrequirejsを用意しておきます。
htmlはjasmineをブラウザで実行するときと一緒です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Jasmine Spec Runner<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;shortcut icon&quot;</span> <span class="na">type=</span><span class="s">&quot;image/png&quot;</span> <span class="na">href=</span><span class="s">&quot;lib/jasmine-1.2.0/jasmine_favicon.png&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;lib/jasmine-1.2.0/jasmine.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">data-main=</span><span class="s">&quot;main.js&quot;</span> <span class="na">src=</span><span class="s">&quot;lib/require-2.0.2.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じ。
で、main.jsからspecを読み込んで実行してあげます。
main.js自体はgruntでcoffeeからコンパイルします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">config =</span>
</span><span class='line'>  <span class="nv">paths :</span>
</span><span class='line'>    <span class="s">&#39;jasmine&#39;</span><span class="o">:</span>       <span class="s">&#39;lib/jasmine-1.2.0/jasmine&#39;</span>
</span><span class='line'>    <span class="s">&#39;jasmine.html&#39;</span><span class="o">:</span>   <span class="s">&#39;lib/jasmine-1.2.0/jasmine-html&#39;</span>
</span><span class='line'>    <span class="s">&#39;jasmine.helper&#39;</span><span class="o">:</span> <span class="s">&#39;lib/jasmine-1.2.0/jasmine-helper&#39;</span>
</span><span class='line'>  <span class="nv">shim :</span>
</span><span class='line'>    <span class="s">&#39;jasmine&#39;</span> <span class="o">:</span>
</span><span class='line'>      <span class="s">&#39;exports&#39;</span> <span class="o">:</span> <span class="s">&#39;jasmine&#39;</span>
</span><span class='line'>    <span class="s">&#39;jasmine.html&#39;</span><span class="o">:</span>   <span class="p">[</span><span class="s">&#39;jasmine&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="s">&#39;jasmine.helper&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s">&#39;jasmine&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">config</span> <span class="nx">config</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span> <span class="p">[</span><span class="s">&#39;jasmine&#39;</span><span class="p">,</span> <span class="s">&#39;jasmine.html&#39;</span><span class="p">,</span> <span class="s">&#39;jasmine.helper&#39;</span><span class="p">,</span> <span class="s">&#39;spec/sample_spec&#39;</span><span class="p">],</span> <span class="nf">(jasmine) -&gt;</span>
</span><span class='line'>  <span class="nv">jasmineEnv = </span><span class="nx">jasmine</span><span class="p">.</span><span class="nx">getEnv</span><span class="p">()</span>
</span><span class='line'>  <span class="nv">jasmineEnv.updateInterval = </span><span class="mi">1000</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">htmlReporter = </span><span class="k">new</span> <span class="nx">jasmine</span><span class="p">.</span><span class="nx">HtmlReporter</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">jasmineEnv</span><span class="p">.</span><span class="nx">addReporter</span> <span class="nx">htmlReporter</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">jasmineEnv.specFilter = </span><span class="nf">(spec) -&gt;</span>
</span><span class='line'>    <span class="nx">htmlReporter</span><span class="p">.</span><span class="nx">specFilter</span> <span class="nx">spec</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">jasmineEnv</span><span class="p">.</span><span class="nx">execute</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで準備完了です。適当なspecを書いてみましょう。</p>

<h2>sample_spec</h2>

<p>gruntで一緒にコンパイルするので、specもcoffeeで書けばよかだと思います。今回は実装がないので何もdefineしてません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">define</span> <span class="p">[],</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">describe</span> <span class="s">&#39;A suite&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">it</span> <span class="s">&#39;sample spec&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span><span class="nx">toBe</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとはコンソールから</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span> <span class="nx">grunt</span> <span class="nx">jasmine</span>
</span></code></pre></td></tr></table></div></figure>


<p>で動かします。watch-task書いて動かすのもよいと思います。</p>

<h2>まとめ</h2>

<p>jasmineの部分だけ抽出してますが、実際はこれ+coffeelint+cancat+minifyみたいな構成で書いています。
gruntと使うと簡単なものなら早くセットアップできて、ブラウザもイチイチリロードしなくていいような環境になるので、楽チンですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ｼｬﾊﾞﾄﾞｭﾋﾞ!ﾀｯﾁ!ﾀｲｼｮｰｸ!(ドワンゴ退職しました)]]></title>
    <link href="http://yaakaito.github.com/blog/2012/09/28/dwango/"/>
    <updated>2012-09-28T10:21:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/09/28/dwango</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！株式会社ドワンゴを退職しました！</p>

<p><a href="http://www.amazon.co.jp/registry/wishlist/CKH9SKYKNOT5">とりあえずなんかください。</a></p>

<p>ドワンゴには19歳の時からお世話になっていているので、だいたい3年くらい働いていたことになります。
主な業務はiOSアプリ開発でした、当初Objective-Cってなんですか、だった僕ですが、最終的には「オブジェクティブな汁が足りない」とかキチガイっぽいことを言っていたと思います。</p>

<p>ドワンゴではたくさんエキサイティングなことをさせてもらいました、なんとなく振り返ってみようと思います。</p>

<h2>ニコニコiPhone</h2>

<p>最初から中頃まで関わっていた仕事です。
生放送のサービスイン、その後の高画質化〜安定期までで、おもにプレイヤーを書いていました。
少しづつでも確実に大きくなっていくサービスを見ているのは楽しいもので、単純に楽しかったプロジェクトでした。
最後の方はプレイヤー全部改修して使いやすくしようとか、訳あって途中で引き継いだのですが、
iPad版のリーダーみたいなことをやらせてもらって、いろいろよい経験ができました。</p>

<h2>ニコニコiPhoneHTML5プレイヤー</h2>

<p>突然やってきた仕事でした、去年の9月中の話です。
「AU iPhone出るまでにiPhoneのブラウザでも再生できるようにしてほしい(10月中)」
1ヶ月ない・・・だと・・・。</p>

<p>というわけでいわゆるHTML5をプロダクトでやることになりました。
上司にはマネージャーとしてサポートしてもらったのですが、急な案件だったために実質一人で立ち向かうことに。
一人なのでリーダーですし、デザイナーのリソースもあいてないよ、ということだったので、リーダー兼プログラマー兼デザイナーというわりと楽しい状況でした。
死ぬ死ぬいいながら働いていましたが、なんとなくプロダクトが発足してからリリースまでっていう流れを早送りで体験できてよい気分でした。
途中で何度「これ終わったらW3C絶対殺す」と言ったか、もう覚えていません。
ツメが甘かった部分もいくつかありましたが、上司が補助してくれて、無事にリリースできました、本当によかった。
なんだかんだで一番思い入れのあるプロダクトでした。</p>

<h2>ニコニコ書籍</h2>

<p>後半はここでした。最初は火消しだったのですが、最終的には異動することになりました。
アプリを作っていたのもそうなんですが、赤いのに「iOSもテストガンガンやりたい！なんとかして！」みたいなことを言われて、
そっちのことを結構やったりとか、割と自由な感じで動いていました。(納期が緩いとかそういう話ではないですが。)
この辺のアレはいまがんばって文章にしているところで、ちゃんと成果として少しづつ公開していきます。
技術話とかそういうのも楽しかったですが、どっちかと言えばニコニコ書籍ではチームのつくりかた、みたいなのを見れた方が大きかったです。</p>

<h2>研究開発チャンネル</h2>

<p>エンジニアとはほとんど関係ないです。ドワンゴ研究開発チャンネルというニコニコのチャンネルで生放送をしたり出たりしていました。
なんというか、いろいろありました、という感じです。
機材の使い方から、プロデューサーっぽいことから、タレントっぽいことまでやってました。(こことは関係なしに何回かタレントっぽいこともやってましたが)
駆け足で大変でしたが、エンジニア以外の仕事もやれてよかったです。</p>

<h2>まとめ</h2>

<p>ともかくたくさん成長できたと思うし、とても楽しかったです！！！
みなさんお世話になりました！！！！！</p>

<p>うきょー先生の次回作にご期待ください！！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[22歳になりました]]></title>
    <link href="http://yaakaito.github.com/blog/2012/09/26/22-birthday/"/>
    <updated>2012-09-26T15:56:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/09/26/22-birthday</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！22歳になりました！！！！！！！！！</p>

<p>今年もいろいろありました！！！！！！！！わけあって今仕事してません！！！！</p>

<p>いろいろあったので今月末くらいに(もう末ですけど)いろいろなんかかくと思います！！！！</p>

<p><a href="http://www.amazon.co.jp/registry/wishlist/CKH9SKYKNOT5">なんかください！！！！！！</a></p>

<p>ところで「みいくんのちくわぶ」送ってくれた人が誰か分からないので名乗り出てください！！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS6のNSAttributedStringで色とか付ける]]></title>
    <link href="http://yaakaito.github.com/blog/2012/09/25/ios6-attributed-string/"/>
    <updated>2012-09-25T13:53:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/09/25/ios6-attributed-string</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
いままでは外部のライブラリを使わないとかなり面倒だった、UILabelとかに色付きの文字列の描画が、iOS6から標準サポートになりました！
便利なので使ってみましょう！！！！</p>

<h2>サンプル</h2>

<p>適当に色を付ける文章を探します、今回はgithubから「yaakaito pushed to master at yaakaito/Specs」という文章を抜き出してきました。
このうち yaakaito と yaakaito/Specs を青色にしてみようと思います。</p>

<p>コードはいつも通りgithubにあげてあります。</p>

<ul>
<li><a href="https://github.com/yaakaito/AttributedStringExample">AttributedStringExample</a></li>
</ul>


<h2>NSAttributedStringを作る</h2>

<p>実際のところ結構だるいのであんまり使ったことがない人も多いと思うのでまずはAttributedStringの作り方から。</p>

<p>作り方は大きく分けて二通りあって、</p>

<ul>
<li>小さいNSAttributedStringを複数つくって最後に繋げる</li>
<li>最初に全文でNSAttributedStringを作ってRangeで指定する</li>
</ul>


<p>という具合なのですが、多分前者の方が扱いやすいです。この記事では前者を使っています。</p>

<p>今回は色を付ける場所が二箇所＋プレーンなものが間に一つなので、全部で三つのNSAttributedStringを作って繋げます。</p>

<p>まず yaakaito の部分を作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSAttributedString</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString:</span><span class="s">@&quot;yaakaito&quot;</span>
</span><span class='line'>                                                           <span class="nl">attributes:</span><span class="err">@</span><span class="p">{</span><span class="n">NSForegroundColorAttributeName</span> <span class="o">:</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">blueColor</span><span class="p">]}];</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>NSString</code>と同じような要領で、<code>initWithString:</code>してあげて、二個目の引数に<code>attributes</code>を取ります。
この<code>attributes</code>は<code>NSDictionary</code>で、今回の例だと文字の色だけ指定しています。
他にも背景色や、フォント、アンダーラインを付けたり、影を付けたりとか、いろいろできるようです。
よく使いそうなのは <code>NSForegroundColorAttributedName</code>(文字の色) と <code>NSFontAttributeName</code>(フォント) あたりですかね。</p>

<p>せっかくなので次はフォントも指定してみましょう。 yaakaito/Specs の部分を作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSAttributedString</span> <span class="o">*</span><span class="n">repository</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString:</span><span class="s">@&quot;yaakaito/Specs&quot;</span>
</span><span class='line'>                                                                 <span class="nl">attributes:</span><span class="err">@</span><span class="p">{</span> <span class="n">NSForegroundColorAttributeName</span> <span class="o">:</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">blueColor</span><span class="p">],</span>
</span><span class='line'>                                                                               <span class="n">NSFontAttributeName</span> <span class="o">:</span> <span class="p">[</span><span class="n">UIFont</span> <span class="nl">boldSystemFontOfSize:</span><span class="mi">16</span><span class="p">]}</span> <span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後に真ん中の部分を作って、連結します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSAttributedString</span> <span class="o">*</span><span class="n">others</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString:</span><span class="s">@&quot; pushed to master at &quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSMutableAttributedString</span> <span class="o">*</span><span class="n">message</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithAttributedString:</span><span class="n">name</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">message</span> <span class="nl">appendAttributedString:</span><span class="n">others</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">message</span> <span class="nl">appendAttributedString:</span><span class="n">repository</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、NSAttributedStringの完成です。</p>

<h2>UILabelに表示する</h2>

<p>こっちは笑えるほど簡単で、いままでは <code>label.text</code> にNSStringを入れていたものを、 <code>label.attributedText</code> にNSAttributedStringを入れるだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">UILabel</span> <span class="o">*</span><span class="n">label</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UILabel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">320</span><span class="p">,</span> <span class="mi">320</span><span class="p">)];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview:</span><span class="n">label</span><span class="p">];</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">attributedText</span> <span class="o">=</span> <span class="n">message</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうするとさっき作ったNSAttributedStringが表示されます、便利ですね！！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ビューテストで便利なAlertNinjaを作りました]]></title>
    <link href="http://yaakaito.github.com/blog/2012/09/05/release-alert-ninja/"/>
    <updated>2012-09-05T19:45:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/09/05/release-alert-ninja</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！前回ふざけてましたが、今回は真面目にライブラリを作りました。
といっても、毎回書くのはめんどくさいのでまとめとくか程度です。</p>

<p>みなさん！iOSのテスト書いてますか？？？
ViewControllerなんかのテストを書いてるときに、例えばGHUnitなんかを使ってたりすると、
UIAlertViewがカジュアルに飛び出てきてウザイですよね＾ー＾ー＾ー＾</p>

<p>僕はUIAlertViewは、適当なラッパークラスを作って、そこを差し替えて出ないようにすることが多いんですが、
テストの為のクラスを作ってる様なものになってしまう上に、毎回書くのがだるポヨ・・・。</p>

<p>なのでついでだしテストも出来るようにしよう、ってことで、UIAlertViewを非表示にしつつ、スパイするライブラリを作りました。</p>

<ul>
<li><a href="https://github.com/yaakaito/AlertNinja">AlertNinja</a></li>
</ul>


<h2>AlertNinjaの機能</h2>

<p>さっきも書きましたが、UIAlertViewを非表示にする、とスパイするの２つの機能を持っています。
この二つの機能はほとんど同時に使う事が多くなると思います。</p>

<p>使い方はこんな感じ、適当なViewControllerがこんな感じでshowDialogというメソッドを持っていたとすると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">showDialog</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;Ninja&quot;</span>
</span><span class='line'>                                                  <span class="nl">message:</span><span class="s">@&quot;doron&quot;</span>
</span><span class='line'>                                                 <span class="nl">delegate:</span><span class="nb">nil</span>
</span><span class='line'>                                        <span class="nl">cancelButtonTitle:</span><span class="s">@&quot;YES&quot;</span>
</span><span class='line'>                                        <span class="nl">otherButtonTitles:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>テストを書くときにどこかからこれを読んでいると、アラートが表示されてしまいますね。
なのでAlertNinjaを使って、アラートがでる可能性のあるところを囲みます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testDialog</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">spy</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">viewController</span> <span class="n">showDialog</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">complete</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>spy</code>でスタートして、<code>complete</code>で終了です、なんか忍者っぽい感じにしたかったんです！！！
こうすると、まずアラートの表示をなかった事にできます。</p>

<p>次はどんなアラートか出たか知りたいですよね、出てないかもしれません。
これは<code>report</code>というものを取得することで検証できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">report</span><span class="p">]</span> <span class="n">showedAlerts</span><span class="p">]</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'><span class="n">STAssertEqualObjects</span><span class="p">(</span><span class="s">@&quot;Ninja&quot;</span><span class="p">,</span> <span class="n">alert</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="s">@&quot;alert title is Ninja&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>showedAlerts</code>は<code>spy</code>されてから表示されたUIAlertViewのリストです。(今のところこの機能しかないです。)
なので、これの<code>count</code>が0だったらアラートはなかったことになりますし、そうでなければ、その中身を検証できます。
今回の例では<code>title</code>が<code>Ninja</code>なアラートが表示されるはず、というテストになっていますね。</p>

<p>つなげるとこんな感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testDialog</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">spy</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">viewController</span> <span class="n">showDialog</span><span class="p">];</span>
</span><span class='line'>    <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">report</span><span class="p">]</span> <span class="n">showedAlerts</span><span class="p">]</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'>    <span class="n">STAssertEqualObjects</span><span class="p">(</span><span class="s">@&quot;Ninja&quot;</span><span class="p">,</span> <span class="n">alert</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="s">@&quot;alert title is Ninja&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">complete</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>confirmもできるよ！</h3>

<p>ボタンを何個か設定して、ここを押したい、みたいなテストにも対応できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">showConfirm</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;Ninja&quot;</span>
</span><span class='line'>                                                    <span class="nl">message:</span><span class="s">@&quot;Are you Ninja ?&quot;</span>
</span><span class='line'>                                                   <span class="nl">delegate:</span><span class="n">self</span>
</span><span class='line'>                                          <span class="nl">cancelButtonTitle:</span><span class="s">@&quot;NO&quot;</span>
</span><span class='line'>                                          <span class="nl">otherButtonTitles:</span><span class="s">@&quot;YES&quot;</span><span class="p">,</span> <span class="s">@&quot;I&#39;m Kunoichi&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">alertView:</span><span class="p">(</span><span class="n">UIAlertView</span> <span class="o">*</span><span class="p">)</span><span class="nv">alertView</span> <span class="nf">clickedButtonAtIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">buttonIndex</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">calledClickedButtonAtIndex</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">buttonIndex</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">result</span> <span class="o">=</span> <span class="s">@&quot;NO&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">buttonIndex</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">result</span> <span class="o">=</span> <span class="s">@&quot;YES&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">buttonIndex</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">result</span> <span class="o">=</span> <span class="s">@&quot;Kunoichi&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうなってるやつに・・・</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testConfirm</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">spy</span><span class="p">]</span> <span class="nl">andSelectIndexAt:</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">viewController</span> <span class="n">showConfirm</span><span class="p">];</span>
</span><span class='line'>    <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">report</span><span class="p">]</span> <span class="n">showedAlerts</span><span class="p">]</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">STAssertEqualObjects</span><span class="p">(</span><span class="s">@&quot;Ninja&quot;</span><span class="p">,</span> <span class="n">alert</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="s">@&quot;alert title is Ninja&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">STAssertEqualObjects</span><span class="p">(</span><span class="s">@&quot;Kunoichi&quot;</span><span class="p">,</span> <span class="n">viewController</span><span class="p">.</span><span class="n">result</span><span class="p">,</span> <span class="s">@&quot;result is &#39;Kunoichi&#39;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">complete</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで、<code>spy</code>に続けて<code>andSelectIndexAt</code>でどのインデックスのボタンを押すかを指定することができます。何も設定しないとキャンセルボタン扱いになります。
もちろんDelegateも呼ばれていて、さっきのViewControllerにはさらにこんなのが続いていて、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">willPresentAlertView:</span><span class="p">(</span><span class="n">UIAlertView</span> <span class="o">*</span><span class="p">)</span><span class="nv">alertView</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">calledWillPresent</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didPresentAlertView:</span><span class="p">(</span><span class="n">UIAlertView</span> <span class="o">*</span><span class="p">)</span><span class="nv">alertView</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">calledDidPresent</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">alertView:</span><span class="p">(</span><span class="n">UIAlertView</span> <span class="o">*</span><span class="p">)</span><span class="nv">alertView</span> <span class="nf">willDismissWithButtonIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">buttonIndex</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">calledWillDismiss</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">alertView:</span><span class="p">(</span><span class="n">UIAlertView</span> <span class="o">*</span><span class="p">)</span><span class="nv">alertView</span> <span class="nf">didDismissWithButtonIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">buttonIndex</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">calledDidDismiss</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>全体でこんなテストが通るようになっています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testConfirm</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">spy</span><span class="p">]</span> <span class="nl">andSelectIndexAt:</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">viewController</span> <span class="n">showConfirm</span><span class="p">];</span>
</span><span class='line'>    <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">report</span><span class="p">]</span> <span class="n">showedAlerts</span><span class="p">]</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">STAssertEqualObjects</span><span class="p">(</span><span class="s">@&quot;Ninja&quot;</span><span class="p">,</span> <span class="n">alert</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="s">@&quot;alert title is Ninja&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">STAssertTrue</span><span class="p">(</span><span class="n">viewController</span><span class="p">.</span><span class="n">calledWillPresent</span><span class="p">,</span> <span class="s">@&quot;called will present delegate method&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">STAssertTrue</span><span class="p">(</span><span class="n">viewController</span><span class="p">.</span><span class="n">calledDidPresent</span><span class="p">,</span> <span class="s">@&quot;called did present delegate method&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">STAssertTrue</span><span class="p">(</span><span class="n">viewController</span><span class="p">.</span><span class="n">calledWillDismiss</span><span class="p">,</span> <span class="s">@&quot;called will dismiss delegate method&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">STAssertTrue</span><span class="p">(</span><span class="n">viewController</span><span class="p">.</span><span class="n">calledDidDismiss</span><span class="p">,</span> <span class="s">@&quot;called did dismiss delegate method&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">STAssertTrue</span><span class="p">(</span><span class="n">viewController</span><span class="p">.</span><span class="n">calledClickedButtonAtIndex</span><span class="p">,</span> <span class="s">@&quot;called did clicked button at Index&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">STAssertEqualObjects</span><span class="p">(</span><span class="s">@&quot;Kunoichi&quot;</span><span class="p">,</span> <span class="n">viewController</span><span class="p">.</span><span class="n">result</span><span class="p">,</span> <span class="s">@&quot;result is &#39;Kunoichi&#39;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">complete</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>流れがテストできる</h2>

<p>UIAlertViewを含んだテストができるようになったので、全体としてフィーチャーのテストがし易くなりました。
例えば <a href="https://github.com/yaakaito/NLTHTTPStubServer">NLTHTTPStubServer</a> と組み合わせると、
「APIにアクセスしたけど、404だったから&#8221;そんなものはない&#8221;というアラートだす」みたいなテストを結構スマートに書く事ができますね！！！(宣伝)
テストの為の何かをほとんどプロダクトコードに埋め込まなくとも良いのも特徴です。</p>

<h2>TODO</h2>

<p>今はこれだけで、以下には対応してない＆やろうと思っているので乞うご期待！</p>

<ul>
<li>UIActionSheetも使えるようになる</li>
<li>UIAlertViewStyleのサポート</li>
</ul>


<p>他にもこれ必要じゃね、というのがあればIssueなどに投げてください！！！</p>

<h2>というわけで</h2>

<p>よろしくお願いします！</p>

<ul>
<li><a href="https://github.com/yaakaito/AlertNinja">AlertNinja</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[もしプログラマーが仮面ライダーウィザードだったら]]></title>
    <link href="http://yaakaito.github.com/blog/2012/09/03/wizard/"/>
    <updated>2012-09-03T08:25:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/09/03/wizard</id>
    <content type="html"><![CDATA[<h2>普段の開発</h2>

<p>ﾙﾊﾟｯﾁ!ｺﾐｯﾄ!ｱｯﾄﾞｯｺﾞ!</p>

<h2>ブランチをマージするとき</h2>

<p>ﾘﾍﾞｪｰｽ!ﾌﾟﾘｰｽﾞ!</p>

<h2>マージしたのでプッシュするとき</h2>

<p>ﾌﾟｯｼｭｯｽﾄﾗｲｸ!ｻｲｰｺｰﾀﾞｾﾞｯ!(reject)</p>

<h2>しかたなくpull rebaseしたとき</h2>

<p>ｶﾓﾝ!ｺｯﾐﾄ!ﾏｧｰｼﾞﾊﾝﾄﾞ!ｶﾓﾝ!ｺｯﾐﾄ!ﾏｧｰｼﾞﾊﾝﾄﾞ!ﾋｰﾋｰﾋｰﾋｰﾋｰ!ｽﾗｯｼｭｽﾄﾗｲｸ!(rebase失敗)</p>

<h2>がんばって直して、テストを走らせたとき</h2>

<p>ﾇﾙｯﾁ!ﾏｼﾞｯｸ!ﾀｯﾁｺﾞｳ!ﾇﾙｯﾁ!ﾏｼﾞｯｸ!ﾀｯﾁｺﾞｳ!ﾒｯｾｰｼﾞ!ﾌﾟﾘｰｽﾞ!ﾁｮｰｲｲn (ｾｸﾞﾌｫ)</p>

<h2>疲れたのでケータイ持って飯へ現実逃避</h2>

<p>ｼｬﾊﾞﾄﾞｩﾋﾞﾀﾞｯﾁﾍﾝｼﾝ!ﾄﾞｺﾓ!ﾌﾟ,ﾘｰｽﾞ↑ﾄﾞﾝﾄﾞﾄﾞﾄﾞﾄﾞﾄﾞﾄﾞﾝ↑↑↑ｷﾒﾙｾﾞｪ!!!ﾙﾊﾟｯﾁ!ｱｲﾌｫﾝ!ﾀｯﾁｺﾞｩ↑ｺ,ﾈｸﾄ!ﾌﾟ,ﾘｰｽﾞ↑ｴｰﾕ→ﾁｮ→ｲｲﾈｯ↑ﾌﾟﾗﾁﾅｯｽﾄﾗｲｸｯ!ﾄﾞﾛｲﾄﾞｻｰｲｺｰﾀﾞｾﾞｪ↑ｳｨｰ↑↑↑</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリからGithubOAuth使うの見直している]]></title>
    <link href="http://yaakaito.github.com/blog/2012/09/03/re-github-oauth/"/>
    <updated>2012-09-03T04:53:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/09/03/re-github-oauth</id>
    <content type="html"><![CDATA[<p>こんばんは！うきょーです、非常に眠いです。
<a href="http://yaakaito.github.com/blog/2012/09/01/github-oauth/">前回</a>わりとカジュアルな感じでOAuthしたんですが、
<a href="https://twitter.com/azu_re/status/241853336964444160">こういうツイート</a>をみて、<code>state</code>のこと書いてなかったからそのことかなーと思ったんですが、
よくよく考えてみれば、起動スキーマ直接叩かれたらなんか起こりそうだよなーとかいろいろ気になってきたのでずっとOAuth2でググったりしてた。</p>

<h2>そもそも</h2>

<p>前回の感じになったのが単純に、メールとかパスワード入力するのがだるいしあんまりさせたくないなー、OAuthあったなーいけんじゃねー、という感じの理由。
<a href="http://developer.github.com/v3/oauth/">OAuth | GitHub API</a>を見てて、非Webアプリケーション向けの最初はBasic認証使って〜がやりたくなった感じですね。
で、本来はBasic認証一回使ってーの方がいいと思うんですが、いろいろクライアントなライブラリを見ていると、<code>Client Secret</code>を引数に取ったりしてて、
じゃあこっちでもいいのかなーとなった。</p>

<h2>本当か？</h2>

<p>で、気になって何個かGithubOAuth使ってそうなアプリを探してみたんだけど、hojokiなんかは<code>UIWebView</code>使ってやってるっぽいしやっぱこっちでいいんかなーと。
けど<code>UIWebView</code>の作り上URLとか自分で出さないといけない訳ですが、それすら偽装してかなりそれっぽく見せる事は可能なので、
僕が使う側だったらあんまり使いたくないなーと思ってしまった。一緒に変なJSとか走らされてもやだなーと思ったり。(他の人がどう思ってるのかは知らないですが)
それだったらSafariに飛ばせばいいじゃん、でcallbackにカスタムスキームでー、でできたわけ。で、そこに弱そうなところがあるなら一旦塞ぐかーという感じで作ったのを適当にアップデート。</p>

<ul>
<li><a href="https://github.com/yaakaito/GithubOAuthExample">GithubOAuthExample</a></li>
</ul>


<p>やったのは、（今回はダミーだけど）<code>state</code>の付加と、OAuthしている時以外は起動スキーマを無効化した。（今は単純にabortしてるだけ）
あとは本番では起動スキーマが使える時間とかも短くしぼったり、もやろうかなと思っていて、
これでよっぽどな感じじゃない限りはインジェクションとかは大丈夫そうな感じがする。
起動スキーマ持って行かれたときもまあ<code>Client Secret</code>バレなきゃだいじょ・・・そもそも<code>Secret</code>持っていいの？
一応すごいがんばりをすれば秘密じゃなくなる気がする。</p>

<h2>ライブラリにみるOAuth</h2>

<p>さっきも書いたけどOAuthClientと名を打ってるライブラリは<code>Client ID</code>と<code>Client Secret</code>を要求していることが多いし、
プラスアルファでアカウントとパスワードも要求してたりする。
クライアント仲間ってことでJSも何個か見てみたんですが、
カジュアルにSecretむき出し・・・秘密とは・・・みたいな感じになってて何を信じればいいのか分からなくなってきた。（まあTitaniumとかで使ってねってことだとは思うんだけど・・・）</p>

<h2>Implicit Flow</h2>

<p>さまよってるうちに「<a href="http://www.sakimura.org/2012/02/1487/">単なる OAuth 2.0 を認証に使うと、車が通れるほどのどでかいセキュリティー・ホールができる</a>」
というのに出会った、関係ありそうなので読んでみたんだけど、アプリケーションの認証として使うから駄目なのであって、
クライアントとして認可される場合にはまあ大丈夫か、ってことでいいのかな。
一旦は置いておいて良さそうだけど、あとで自分で見直したときのメモ。</p>

<h2>で</h2>

<p>正直どうやるのが理想なのかよくわからなくなってきたね、ずばっと教えてエロい人！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリでGithubにOAuthする]]></title>
    <link href="http://yaakaito.github.com/blog/2012/09/01/github-oauth/"/>
    <updated>2012-09-01T19:12:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/09/01/github-oauth</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。
Githubと連動したアプリを作りたくなったので、GithubのOAuthをiOSアプリでやってみました。</p>

<ul>
<li><a href="http://developer.github.com/v3/oauth/">OAuth | GitHub API</a></li>
<li><a href="https://github.com/yaakaito/GithubOAuthExample">GithubOAuthExample</a></li>
</ul>


<h2>アプリケーションを登録</h2>

<p>[AccountSettings]-> [Applications] -> [Register new application]からアプリケーションを登録します。
この時にCallback URLにカスタムスキームを入れる事ができるので、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yourapp://oauth</span></code></pre></td></tr></table></div></figure>


<p>みたいなコールバックを指定します。そうするとIDがもらえるのでこれで登録は終わりです。</p>

<h2>Githubへログインしてもらう</h2>

<p>OAuthなので、Safariを開いてacceptしてもらいましょう。パスワード入力してもらってJS使って押すとか、やめましょうね。
発行されたIDのうちClient IDをくっつけて</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *scope = @"public_repo,gist";
</span><span class='line'>NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"https://github.com/login/oauth/authorize?client_id=%@&scope=%@",kClientId, scope]];
</span><span class='line'>[[UIApplication sharedApplication] openURL:url];</span></code></pre></td></tr></table></div></figure>


<p>みたいな具合で、Safariを起動します。
別にUIWebViewでもいいと思いますが、専用のビュー作るのもめんどくさいし、ちゃんとGithubなことを証明するのもだるいので、Safariでいいと思います。</p>

<h2>コールバックを拾ってアクセストークンをリクエスト</h2>

<p>カスタムスキームからの起動で<code>code</code>がやってくるので、これを持って</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/login/oauth/access_token</span></code></pre></td></tr></table></div></figure>


<p>へPOSTします。</p>

<p>あとはkey-value形式でトークンが返ってくるので、それを使うだけです。簡単ですね。トークンはちゃんとキーチェインとかに入れてあげましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[便利なライブラリHullToRefresh作った]]></title>
    <link href="http://yaakaito.github.com/blog/2012/08/31/hull-to-refresh/"/>
    <updated>2012-08-31T06:31:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/08/31/hull-to-refresh</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！みなさんPullToRefresh使ってますか？便利ですよね。
けど、引っ張って更新、そろそろ飽きてきませんか？てゆーか、なんでわざわざ引っ張らなきゃいけないんですか？</p>

<p>それを解決するために、HullToRefreshというライブラリを作りました。名前はギャグっぽいですがマジメです。</p>

<ul>
<li><a href="https://github.com/yaakaito/HullToRefresh">HullToRefresh</a></li>
</ul>


<p>振るとRefreshはその名の通り、iPhoneを大きく振るとイベントが飛んでくるライブラリです、すごく、すごく便利ですね。
なんてったって画面に触る必要がありません、指を動かす必要もありません。更新したいな、と思ったときにはiPhoneでフリフリシェイクすればいいのです、楽しいですね。
電車に乗っているときは自動で揺れを検知し、空気を読んで更新をしてくれます。なんて便利なんでしょう、指による入力なんて、もはや時代遅れなのです。
このすばらしいアイデアの使い方はすごく簡単で、initしてフルフルNotificationを登録するだけです！！！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="n">HullToRefresh</span> <span class="n">sharedHullHull</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver:</span><span class="n">self</span>
</span><span class='line'>                                         <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">callback</span><span class="p">)</span>
</span><span class='line'>                                             <span class="nl">name:</span><span class="n">kDidHullHullNotification</span>
</span><span class='line'>                                           <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>ね？簡単でしょう？サンプルについてくるアプリはこんな感じになります。</p>

<p><img src="http://yaakaito.github.com/images/hullhull.png"></p>

<p>すばらしいライブラリなので、是非使ってみてください！使いどころとしては、空気を読まないアプリケーション作るときに便利です。</p>

<h3>まとめ</h3>

<p>完全にギャグです。タイポしたときとかに出るように割と悪意を持って作っていますが、ただのギャクです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gruntのcoffeelintタスク作ってみた]]></title>
    <link href="http://yaakaito.github.com/blog/2012/08/21/grunt-coffeelint/"/>
    <updated>2012-08-21T01:59:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/08/21/grunt-coffeelint</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
みなさん<a href="http://www.coffeelint.org/">CoffeeLint</a>使ってますか？
僕はあんまりCoffeeは書かないんですが、ちょっと使ってみようかなーと思っているアプリがあるので、それの下準備をしています。
coffeelintは便利ですがいちいち</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ coffeelint hoge.coffee</span></code></pre></td></tr></table></div></figure>


<p>とかするのはだるいですよね！
なので<a href="https://github.com/cowboy/grunt">grunt.js</a>を使いましょう！
(grunt.jsの説明は別にしません)</p>

<h2>使い方</h2>

<p>ほぼ自分用でnpmとかには登録してないのでがんばってください！</p>

<ul>
<li><a href="https://github.com/yaakaito/grunt-coffeelint">grunt-coffeelint</a></li>
</ul>


<p>まずはCoffeelintを入れます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install -g coffeelint</span></code></pre></td></tr></table></div></figure>


<p>取ってきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git://github.com/yaakaito/grunt-coffeelint.git grunt-coffeelint</span></code></pre></td></tr></table></div></figure>


<p>タスクをコピーします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd grunt-coffeelint
</span><span class='line'>cp -rf tasks your/grunt/dir</span></code></pre></td></tr></table></div></figure>


<p>あとはロードしてconfigを埋めます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadTasks</span><span class="p">(</span><span class="s1">&#39;tasks&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="nx">coffeelint</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">all</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">files</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s1">&#39;coffee/*.coffee&#39;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>いざ！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">grunt</span> <span class="nx">coffeelint</span>
</span><span class='line'><span class="nx">Running</span> <span class="s2">&quot;coffeelint:all&quot;</span> <span class="p">(</span><span class="nx">coffeelint</span><span class="p">)</span> <span class="nx">task</span>
</span><span class='line'><span class="p">[</span> <span class="s1">&#39;coffee/*.coffee&#39;</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">✓</span> <span class="nx">coffee</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">coffee</span>
</span><span class='line'>  <span class="err">✓</span> <span class="nx">coffee</span><span class="o">/</span><span class="nx">b</span><span class="p">.</span><span class="nx">coffee</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">✓</span> <span class="nx">Ok</span><span class="o">!</span> <span class="err">»</span> <span class="mi">0</span> <span class="nx">errors</span> <span class="nx">and</span> <span class="mi">0</span> <span class="nx">warnings</span> <span class="k">in</span> <span class="mi">2</span> <span class="nx">files</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">Done</span><span class="p">,</span> <span class="nx">without</span> <span class="nx">errors</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>やりましたね！！！！</p>

<h2>まとめ</h2>

<p>grunt.js便利なので使いましょう。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[yaakaito.org]]></title>
  <link href="http://yaakaito.org/atom.xml" rel="self"/>
  <link href="http://yaakaito.org/"/>
  <updated>2013-05-16T15:12:55+09:00</updated>
  <id>http://yaakaito.org/</id>
  <author>
    <name><![CDATA[yaakaito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TypeScriptのGenerics試してみる]]></title>
    <link href="http://yaakaito.org/blog/2013/05/16/typescript-generics/"/>
    <updated>2013-05-16T06:34:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/05/16/typescript-generics</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！TypeScript0.9alpha使える環境作ったのでジェネリクス試すよ！
<a href="https://github.com/yaakaito/typescript-dddbase">typescript-dddbase</a>というのをはじめていたので、これを0.9対応することを見越して、<code>Identify</code> <code>Entity</code> <code>Repository</code>をジェネリクス使って考えてみる。</p>

<h2>使い方</h2>

<p><code>class</code>か<code>interface</code>で名前与えられたものと、<code>string</code> <code>number</code> なんかを使う事が出来ます。
シンタックスはよくある感じで、特に違和感もない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">interface</span> <span class="nx">Identify</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="nx">T</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">NumberIdentify</span> <span class="kr">implements</span> <span class="nx">Identify</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">constructor</span><span class="p">(</span><span class="kr">public</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">StringIdentify</span> <span class="kr">implements</span> <span class="nx">Identify</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">constructor</span><span class="p">(</span><span class="kr">public</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">numberIdentify</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NumberIdentify</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">stringIdentify</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">StringIdentify</span><span class="p">(</span><span class="s2">&quot;A&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>クラスのときはこんな感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">Entity</span><span class="o">&lt;</span><span class="nx">T</span> <span class="kr">extends</span> <span class="nx">Identify</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">constructor</span><span class="p">(</span><span class="kr">public</span> <span class="nx">identify</span><span class="o">:</span> <span class="nx">T</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>推論</h2>

<p>上の<code>Entity</code>みたいなやつの場合、コンストラクタで推論してくれる。
さっき作った<code>numberIdentify</code>を使ってみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">entity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">(</span><span class="nx">numberIdentify</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>これの<code>identify</code>を<code>stringIdentify</code>で上書きしようとすると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">entity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">(</span><span class="nx">numberIdentify</span><span class="p">);</span>
</span><span class='line'><span class="nx">entity</span><span class="p">.</span><span class="nx">identify</span> <span class="o">=</span> <span class="nx">stringIdentify</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうなる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">error</span> <span class="nx">TS2012</span><span class="o">:</span> <span class="nx">Cannot</span> <span class="nx">convert</span> <span class="s1">&#39;StringIdentify&#39;</span> <span class="nx">to</span> <span class="s1">&#39;NumberIdentify&#39;</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">Types</span> <span class="nx">of</span> <span class="nx">property</span> <span class="s1">&#39;value&#39;</span> <span class="nx">of</span> <span class="nx">types</span> <span class="s1">&#39;StringIdentify&#39;</span> <span class="nx">and</span> <span class="s1">&#39;NumberIdentify&#39;</span> <span class="nx">are</span> <span class="nx">incompatible</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>やりましたね！</p>

<p>もちろんですが、こういう風にも書けます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">entity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="o">&lt;</span><span class="nx">NumberIdentify</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">numberIdentify</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>推論できない場合には明示的に書く必要があります。</p>

<h2>ネスト</h2>

<p>ネストも出来ます。<code>Repository</code>を考えたときに、これは<code>Entity&lt;T&gt;</code>の集合なので、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">Repository</span><span class="o">&lt;</span><span class="nx">E</span> <span class="kr">extends</span> <span class="nx">Entity</span><span class="o">&lt;</span><span class="nx">I</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">I</span> <span class="kr">extends</span> <span class="nx">Identify</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こう書けます。
本体もとりあえず書いてみる。(めんどくさいし説明用なので、ただ<code>value</code>にいれて返すだけにした)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">Repository</span><span class="o">&lt;</span><span class="nx">E</span> <span class="kr">extends</span> <span class="nx">Entity</span><span class="o">&lt;</span><span class="nx">I</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">I</span> <span class="kr">extends</span> <span class="nx">Identify</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">public</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">E</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">store</span><span class="p">(</span><span class="nx">entity</span><span class="o">:</span> <span class="nx">E</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">entity</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">findByIdentify</span><span class="p">(</span><span class="nx">identify</span><span class="o">:</span> <span class="nx">I</span><span class="p">)</span><span class="o">:</span> <span class="nx">E</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これの場合は推論できないので、このクラスを直接使う場合は、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">repository</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Repository</span><span class="o">&lt;</span><span class="nx">Entity</span><span class="o">&lt;</span><span class="nx">NumberIdentify</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">NumberIdentify</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'><span class="nx">repository</span><span class="p">.</span><span class="nx">store</span><span class="p">(</span><span class="nx">entity</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じになります。</p>

<h2>もうちょっと書いてみる</h2>

<p>ここまでのを元に<code>Person</code>モデルと<code>PersonRepository</code>を作ってみる、実装はない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">Person</span> <span class="kr">extends</span> <span class="nx">Entity</span><span class="o">&lt;</span><span class="nx">NumberIdentify</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">constructor</span><span class="p">(</span><span class="kr">public</span> <span class="nx">identify</span><span class="o">:</span> <span class="nx">NumberIdentify</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">super</span><span class="p">(</span><span class="nx">identify</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">PersonRepository</span> <span class="kr">extends</span> <span class="nx">Repository</span><span class="o">&lt;</span><span class="nx">Person</span><span class="p">,</span> <span class="nx">NumberIdentify</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">numberIdentify</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">personRepository</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PersonRepository</span><span class="p">();</span>
</span><span class='line'><span class="nx">repository</span><span class="p">.</span><span class="nx">store</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じ。</p>

<h2>関数</h2>

<p>引数の前に書く。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">x</span><span class="o">:</span> <span class="nx">T</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいな</p>

<h2>ところで・・・</h2>

<p>試してて途中で気づいたんだけど、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">Hoge</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">public</span> <span class="nx">a</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">Fuga</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">public</span> <span class="nx">a</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">hoge</span><span class="o">:</span> <span class="nx">Hoge</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Fuga</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>これが通るようになってた。で、2時間くらいハマってた。空のクラス定義にすると<code>Array&lt;Hoge&gt;</code>に<code>array.push("ばーか")</code>とかできるよ、やりましたね。
試したのは<code>release-0.9.0-alpha</code>と<code>develop@c3835ab</code>で、どっちも通った。</p>

<p>これって<code>0.8.x</code>だと<code>Cannot convert 'Fuga' to 'Hoge'</code>とかで通らなくて、やりたいなら<code>Interface</code>通してね、
みたいな感じになってたと思うんだけど、変更あったんだろうか？
いくらか探してみたんだけど、それっぽいものを見つけられなくて、よくわかっていない。
眠いし見落としてる可能性もあるので、知ってる人いたら教えてほしい。
挙動は分からんでもないし、バグかなーと思ったんだけど、さすがにテストでこけるんじゃぁ・・・的な。ツッコミなければ投げるつもり。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TypeScript0.9alphaをMac+Gruntで使うよ]]></title>
    <link href="http://yaakaito.org/blog/2013/05/16/using-typescript-09-on-mac-and-grunt/"/>
    <updated>2013-05-16T00:52:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/05/16/using-typescript-09-on-mac-and-grunt</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
TypeScript0.9alphaがちょっと前に出ましたね。
npm経由でインストールできなくてだるいので使ってなかったんですが、0.9の機能試したくなったのでがんばって使えるようにすることにしました。</p>

<h2>TypeScriptのコンパイル</h2>

<p>developをコンパイルすると大体いい感じだと思うのでそうしましょう。
この辺は<a href="http://typescript.codeplex.com/wikipage?title=Build%20The%20Source&amp;referringTitle=Home">本家にも載ってますね</a>。リポジトリでけぇ。
<code>jake</code>が必要なのでいれます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install -g jake
</span><span class='line'>$ git clone https://git01.codeplex.com/typescript
</span><span class='line'>$ cd typescript
</span><span class='line'>$ git checkout develop
</span><span class='line'>$ jake local
</span><span class='line'>$ chmod +x bin/tsc</span></code></pre></td></tr></table></div></figure>


<p>これで <code>typescript/bin/tsc</code> が使えるようになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./bin/tsc
</span><span class='line'>Version 0.9.0.0
</span><span class='line'>Syntax:   tsc [options] [file ..]
</span><span class='line'>
</span><span class='line'>Examples: tsc hello.ts
</span><span class='line'>          tsc --out foo.js foo.ts
</span><span class='line'>          tsc @args.txt
</span><span class='line'>
</span><span class='line'>// ...</span></code></pre></td></tr></table></div></figure>


<p>やったー！！</p>

<h2>grunt-typescript</h2>

<p>普段のビルドは<code>grunt-typesript</code>を使っているので、これが動くと便利な訳です。
どういう指定になってるのかなーと見てみたら、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">resolveTypeScriptBinPath</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">currentPath</span><span class="p">,</span> <span class="nx">depth</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">targetPath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;../../&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="s2">&quot;../node_modules/typescript/bin&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">currentPath</span><span class="p">,</span> <span class="s2">&quot;node_modules/typescript/bin&quot;</span><span class="p">).</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="nx">targetPath</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">existsSync</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">targetPath</span><span class="p">,</span> <span class="s2">&quot;typescript.js&quot;</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">targetPath</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">resolveTypeScriptBinPath</span><span class="p">(</span><span class="nx">currentPath</span><span class="p">,</span> <span class="o">++</span><span class="nx">depth</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>なるほど？
つまりはこいつのnode_moduleに入ってるtypescriptを丸ごと置き換えちゃえば動くんじゃないかなーーーーーーーーやっちゃえーーーーーー＾ー＾</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">rm</span> <span class="o">/</span><span class="nx">path</span><span class="o">/</span><span class="nx">to</span><span class="o">/</span><span class="nx">grunt</span><span class="o">-</span><span class="nx">typescript</span><span class="o">/</span><span class="nx">node_modules</span><span class="o">/</span><span class="nx">typescript</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">cp</span> <span class="o">-</span><span class="nx">r</span> <span class="nx">typescript</span> <span class="o">/</span><span class="nx">path</span><span class="o">/</span><span class="nx">to</span><span class="o">/</span><span class="nx">grunt</span><span class="o">-</span><span class="nx">typescript</span><span class="o">/</span><span class="nx">node_modules</span>
</span></code></pre></td></tr></table></div></figure>


<p>動いた気がする、これはひどい。</p>

<p>適当なファイルをコンパイルしてみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Running</span> <span class="s2">&quot;typescript:compile&quot;</span> <span class="p">(</span><span class="nx">typescript</span><span class="p">)</span> <span class="nx">task</span>
</span><span class='line'><span class="nx">Warning</span><span class="o">:</span> <span class="nb">Object</span> <span class="nx">module</span> <span class="nx">Hoge</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">export</span> <span class="kr">class</span> <span class="nx">Fuga</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">constructor</span><span class="p">(</span><span class="kr">public</span> <span class="nx">a</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="nx">has</span> <span class="nx">no</span> <span class="nx">method</span> <span class="s1">&#39;contents&#39;</span> <span class="nx">Use</span> <span class="o">--</span><span class="nx">force</span> <span class="nx">to</span> <span class="k">continue</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Aborted</span> <span class="nx">due</span> <span class="nx">to</span> <span class="nx">warnings</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>うーん、なんか駄目っぽい。
普通に<code>tsc</code>でコンパイルする分にはいけるので、追う意味あんまりないし、<code>tsc</code>でコンパイルしよう。</p>

<h2>grunt-exec</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="nx">grunt</span><span class="o">-</span><span class="nx">exec</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span>
</span></code></pre></td></tr></table></div></figure>


<p>Gruntfileはこんな感じで</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">tsc = </span><span class="s">&quot;path/to/tsc&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">module.exports = </span><span class="nf">(grunt) -&gt;</span>
</span><span class='line'>    <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span>
</span><span class='line'>        <span class="nv">pkg: </span><span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">readJSON</span> <span class="s">&#39;package.json&#39;</span>
</span><span class='line'>        <span class="nv">exec:</span>
</span><span class='line'>            <span class="nv">compile:</span>
</span><span class='line'>                <span class="nv">cmd: </span><span class="o">-&gt;</span> <span class="s">&quot;</span><span class="si">#{</span><span class="nx">tsc</span><span class="si">}</span><span class="s"> --out compiled/src --declaration src/*.ts&quot;</span>
</span><span class='line'>            <span class="nv">test:</span>
</span><span class='line'>                <span class="nv">cmd: </span><span class="o">-&gt;</span> <span class="s">&quot;</span><span class="si">#{</span><span class="nx">tsc</span><span class="si">}</span><span class="s"> --out compiled/test test/*.ts&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span> <span class="s">&#39;grunt-exec&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>コンパイルできた！</p>

<p>あとはgruntのエイリアスよしなにして、とりあえずこれで使えそう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TypeScriptのコーディング規約を考える]]></title>
    <link href="http://yaakaito.org/blog/2013/05/05/typescript-codeconventions/"/>
    <updated>2013-05-05T19:30:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/05/05/typescript-codeconventions</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
TypeScript書いてますか？？？おすすめです！！！
ところでTypeScriptのコーディング規約がよくわからなかったので、コンパイラをみてきました。
JavaScriptほどあーだーこーだというものでもないと思うので、ほんとにコーディング規約みたいな感じです。</p>

<h2>基本的なところ</h2>

<h3>インデント</h3>

<ul>
<li>ソフトインデントで4個</li>
</ul>


<h3>1行の文字数</h3>

<p>これはコンパイラの方は結構自由に感じた・・・。
ので、JavaScriptよりはJavaとか参考にした方がいいだろうってことで <a href="http://www.oracle.com/technetwork/java/javase/documentation/codeconventions-136091.html#313">Oracle</a> のを参考にすることに。</p>

<ul>
<li><s>1行は80文字</s></li>
</ul>


<h4>追記</h4>

<p>いまどき80文字じゃなくてよくない？というツッコミがあったので考え直した。</p>

<p>僕は、80文字で結構いけるんじゃないかなーと思っている。なのであんまり80文字なってる理由については深追いしてない。
というのも、80文字あったら結構書けるよなーと思うので、オーバーするなら分割する基準になるんでは、というところが大きい。
ただ、シンタックス上長くなっちゃうよねーというのも、もちろんあると思う。(下の方で85文字のがある。)
その都度柔軟に変えばよいというのも、その通りだけど、自分が書いていくのにある程度基準がほしいなーとは思う。</p>

<p>元々は80文字しか表示できないから系(表現あれだけど)の理由らしいんだけど、じゃあ今だとどうなのかなと考えてみた。
で、僕はGithubをよく使う方だと思うので(エンタープライズ含め)、そこで横スクロールしちゃうのはやだなーと思った。
というわけでGithubの100%表示で何文字入るのか数えてみた、122文字らしい。</p>

<p>なので個人で書く範囲では</p>

<ul>
<li>1行は120文字</li>
</ul>


<p>ということにしようかなと思う。</p>

<p>改行ルールとかもこっちを参考にして、</p>

<ul>
<li>コンマのあと</li>
<li>オペレーターの前</li>
<li>改行するときは8個インデント</li>
</ul>


<h3>型の為のコロンの位置</h3>

<ul>
<li>変数名にくっつけてスペースを一つ入れる</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="nx">Names</span><span class="p">.</span><span class="nx">at</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">public</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>関数の返り値</h3>

<ul>
<li>voidの時は宣言しない</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">public</span> <span class="nx">voidFunction</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">public</span> <span class="nx">stringFunction</span><span class="p">()</span><span class="o">:</span> <span class="nx">string</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;hoge&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>命名規則</h2>

<ul>
<li>変数/関数/メソッドはキャメルケール</li>
</ul>


<h3>クラスとモジュールの命名規則</h3>

<ul>
<li>アッパーキャメルケース</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span> <span class="nx">Hoge</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">class</span> <span class="nx">HogeClass</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Enumの命名規則</h3>

<ul>
<li>アッパーキャメルケース</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">enum</span> <span class="nx">Fruit</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Apple</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Orange</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">KiwiFruit</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>定数の命名規則</h3>

<ul>
<li>大文字スネークケース</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">HOGE_FUGA</span> <span class="o">=</span> <span class="s1">&#39;a&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>インターフェイスの命名規則</h3>

<ul>
<li>頭に <code>I</code> をつける</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">interface</span> <span class="nx">IHoge</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>varの型宣言</h2>

<ul>
<li>基本的には宣言しない</li>
<li>anyとして返されるものに対してには宣言する</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;yaakaito&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="nx">names</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>即時関数</h2>

<p>よくわからなかった。JavaScriptのまんま書いてある感じもする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span>
</span><span class='line'><span class="p">})(</span><span class="mi">10</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>TypeScript的にはこんな感じなんだろうか？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">)(</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>コンストラクタでのプロパティの宣言</h2>

<ul>
<li>コンストラクタに渡された値をそのまま利用する場合はコンストラクタの引数で宣言する</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">Hoge</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">public</span> <span class="nx">fullName</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">constructor</span><span class="p">(</span><span class="kr">public</span> <span class="nx">firstName</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="kr">public</span> <span class="nx">lastName</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="kr">private</span> <span class="nx">age</span><span class="o">:</span> <span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="p">[</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>こんな感じかなぁ</h2>

<p>追加あれば書く。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS部で話したViewControllerのテストとかのまとめ]]></title>
    <link href="http://yaakaito.org/blog/2013/05/03/view-controller-testing/"/>
    <updated>2013-05-03T20:20:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/05/03/view-controller-testing</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
この前iOS部というイベントでiOSテストの話をしたんですが、ViewControllerのテストで反応が結構あったのと、
ちゃんと説明できてない部分があったなーということで、文章としてまとめようと思います。</p>

<p>iOS部でやったものからコードが変わってますが、やりたいことは一緒なので、iOS部に参加されていた方は適宜変換して読んでもらえればと思います。</p>

<h2>ツールとか</h2>

<p>SenTestingKit + OCMockです。
OCMockの解説はiOS部では初めての方が居たので軽く説明しましたが、これを読んでる方はオンラインかと思いますので、分からなければググってください。
<a href="http://yaakaito.hatenablog.com/entry/2012/06/26/013813">僕が古い方のブログで書いたもの</a>もあるので、そちらを読まれるとよいかもしれません。</p>

<h2>ViewControllerの役割</h2>

<p>最初にぶっちゃけておくとViewControllerのテストはしんどいです。できれば書きたくない。
なのでViewControllerが何なのか、きちんと整理しておきましょう。</p>

<p>僕はViewControllerって、</p>

<ul>
<li>ビューからやってきたユーザー操作の実際の処理</li>
<li>モデルへの操作、モデルからのイベントなんかの受け取り、ビューへの反映</li>
</ul>


<p>この2つ(3つ？)にフォーカスしてるべきだと思ってます。
なのでViewControllerって基本的にはステートとかをもっちゃ駄目で、そういうのはロジックとしてモデルで管理されるべきだと思います。</p>

<p>ここをちゃんと意識して書いていくとViewControllerのテストが結構楽になります。
モデルのテストはViewControllerと比較して圧倒的に楽なので、そちらでやりましょう。</p>

<h2>モックを使いまくります</h2>

<p>OCMockなんかのモックライブラリは便利でよく使いますが、僕はほとんどViewControllerのテストの為に使います。
ある程度モデルが完成した段階であれば、モックを使わずに記述していくこともまあ出来るんですが、
例えば「サーバーとの通信に失敗したときの動作」、みたいなのをテストするときに大抵めんどくさいことになります。
モックを使っておけばここは一行でサッパリと書いてしまったり出来るので、基本的には全部モックを差し込みます。</p>

<p>モデル自体が単純なバリューを表すものであればわざわざモックする必要もないかなーとは思うので、まあそのあたりは好みでいいかなと思います。</p>

<p>あとはUILabelとかUITextFieldとか、Storyboardとか使ってるとコードから生成されないものですね。
別にこのオブジェクト自体を作って自分でセットしてあげるようにしてもいいんですが、
さっきと同じような理由で、「ユーザーがHelloWorldと入力したときの動作」、みたいなのをテストするときに大抵めんd（ry</p>

<p>というわけで僕はViewControllerは基本的にモックを使って書いています。</p>

<h2>プライベートとかreadonlyなプロパティに対するモックの差し込み</h2>

<p>テストを始める前に、予備知識として知っている必要のある項目です。
これはViewController以外のテストでも応用できると思うので、わけで書きます。
正しいけどきわどいので、似たようなことをアプリ側でやるのはやめたほうがいいと思います。</p>

<p>これは無名カテゴリを使って、プロパティの宣言を上書きすることで実現します。</p>

<p>例えば</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MIViewController</span> : <span class="nc">UIViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;MIViewController.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MIViewController</span> <span class="p">()</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">*</span><span class="n">hogeLabel</span><span class="p">;</span> <span class="c1">// &lt;- Stroyboardから作られる</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">MIViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>という感じに<code>.m</code>の方でプライベートなプロパティとして宣言するとかよくあると思います。
この無名カテゴリをテストの方にも持ってきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">MIViewController</span> <span class="p">()</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">*</span><span class="n">hogeLabel</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">MIViewControllerTests</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testExample</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">MIViewController</span> <span class="o">*</span><span class="n">viewController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MIViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">viewController</span><span class="p">.</span><span class="n">hogeLabel</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span> <span class="c1">// &lt;- 通る</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうするとパブリックのようにメッセージを送ることが出来るので、モックに差し替えたりできるわけです。きわどい感じがしますね。</p>

<p>これは完全に雑感ですけど、標準ライブラリでもまあ、よく見ると <code>@property(nonatomic, readonly, retain)</code> みたいな宣言をしてあるものがあって、内部的に<code>property(nonatomic, retain)</code>になってたりするんじゃないかなーと思えるものもあるので、まあまあまあ。</p>

<h2>というわけでテストを書きましょう</h2>

<p>前置きが長くなりましたが、そろそろViewControllerのテストの話をしましょう。</p>

<p>サンプルとしてこんな感じの画面を使います。</p>

<p><img src="http://yaakaito.org/images/viewcontroller-testing-sample.png" width="240"></p>

<p>この画面はモーダルとして呼び出されて、メモを作成&amp;編集できる画面です。
以下のような要件で作られています。</p>

<ul>
<li>タイトルと本文を入力できる</li>
<li>「Done」を押したら、入力したタイトルと本文からメモオブジェクトを作って、delegateへ渡す。</li>
<li>すでに生成されているメモが渡されたら、それを初期値として表示する。</li>
</ul>


<p>実際の実装としては、</p>

<ul>
<li>新規と編集の処理を同じにするために、このViewControllerはメモオブジェクトを作成せずに、外から渡されたメモオブジェクトを更新するようになっています。</li>
<li>ユーザーの入力に影響せず、viewWillDissapearでdelegateを呼び出すようになっています。</li>
</ul>


<p>メモオブジェクトは<code>title</code>と<code>body</code>を持っています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">TBMemo</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">titile</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">body</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithTitle:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span> <span class="nf">body:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">body</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>このViewControllerはこんな感じのインターフェイスを持っています。ここではあえて実装は出さないことにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@protocol</span> <span class="nc">TBMemoEditDelegate</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">editViewController:</span><span class="p">(</span><span class="n">TBMemoEditViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">didFinishEditMemo:</span><span class="p">(</span><span class="n">TBMemo</span> <span class="o">*</span><span class="p">)</span><span class="nv">memo</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">TBMemoEditViewController</span> : <span class="nc">UIViewController</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSObject</span><span class="o">&lt;</span><span class="n">TBMemoEditDelegate</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">delegate</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">TBMemo</span> <span class="o">*</span><span class="n">editingMemo</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>editingMemo</code>はこのViewControllerが更新するメモオブジェクトでこのViewControllerを呼び出す際に外からセットされます。
またプライベートとして、<code>.m</code>の方でStoryboardから生成される2つのUIを持っています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">TBMemoEditViewController</span> <span class="p">()</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UITextField</span> <span class="o">*</span><span class="n">titleTextField</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UITextView</span> <span class="o">*</span><span class="n">bodyTextView</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回テストした方がよさそうなのは、</p>

<ul>
<li>viewWillDisappearで、入力したタイトルと本文からメモオブジェクトを更新して、delegateへ渡す。</li>
<li>viewWillAppearで、渡したメモの内容を初期値として設定する。</li>
</ul>


<p>の2つです。</p>

<p>「done」を押した時にどうこうというのは、これは単純に「モーダルを閉じる」とだけの実装であるべきなので、テストする価値が薄いですし、
アプリを調整していく仮定で変更される可能性の高いものなので(やっぱりpushがいいとか)、安全に変更を加えるためのテストが、逆に足を引っ張ってしまいます。</p>

<p>ではテストを書いていきましょう。</p>

<h3>setup</h3>

<p>まずは<code>setup</code>で<code>UITextField</code>なんかをモックに差し替えていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;TBMemoEditViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;OCMock.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">TBMemoEditViewController</span> <span class="p">()</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UITextField</span> <span class="o">*</span><span class="n">titleTextField</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UITextView</span> <span class="o">*</span><span class="n">bodyTextView</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">TBMemoEditViewControllerTests</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TBMemoEditViewController</span> <span class="o">*</span><span class="n">viewController</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">mockTitleTextField</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">mockBodyTextView</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">setUp</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">setUp</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">viewController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TBMemoEditViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// UITextFieldを差し替える</span>
</span><span class='line'>    <span class="n">mockTitleTextField</span> <span class="o">=</span> <span class="p">[</span><span class="n">OCMockObject</span> <span class="nl">mockForClass:</span><span class="p">[</span><span class="n">UITextField</span> <span class="n">class</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">viewController</span><span class="p">.</span><span class="n">titleTextField</span> <span class="o">=</span> <span class="n">mockTitleTextField</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// UITextViewを差し替える</span>
</span><span class='line'>    <span class="n">mockBodyTextView</span> <span class="o">=</span> <span class="p">[</span><span class="n">OCMockObject</span> <span class="nl">mockForClass:</span><span class="p">[</span><span class="n">UITextView</span> <span class="n">class</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">viewController</span><span class="p">.</span><span class="n">bodyTextView</span> <span class="o">=</span> <span class="n">mockBodyTextView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じ、これで準備が整いました。</p>

<h3>viewWillAppearで渡したメモの内容を初期値として設定する</h3>

<p>まずはこっちを書いてみましょう。
<code>editingMemo</code>が呼び出し元からセットされますが、この場合はテストケースが呼び出し元になるので、これをセットします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testUpdateViewWithEditingMemoObjectInViewWillAppear</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TBMemo</span> <span class="o">*</span><span class="n">editingMemo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TBMemo</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;TITLE&quot;</span> <span class="nl">body:</span><span class="s">@&quot;BODY&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">viewController</span><span class="p">.</span><span class="n">editingMemo</span> <span class="o">=</span> <span class="n">editingMemo</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>次にこのメモオブジェクトの値が<code>titleTextField</code>と<code>bodyTextView</code>にそれぞれ、<code>text</code>経由でセットされるはずなので、これをOCMockで<code>expect</code>します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testUpdateViewWithEditingMemoObjectInViewWillAppear</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TBMemo</span> <span class="o">*</span><span class="n">editingMemo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TBMemo</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;TITLE&quot;</span> <span class="nl">body:</span><span class="s">@&quot;BODY&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">viewController</span><span class="p">.</span><span class="n">editingMemo</span> <span class="o">=</span> <span class="n">editingMemo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[</span><span class="n">mockTitleTextField</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">setText:</span><span class="s">@&quot;TITLE&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">mockBodyTextView</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">setText:</span><span class="s">@&quot;BODY&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>viewWillAppear</code>を呼び出して、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testUpdateViewWithEditingMemoObjectInViewWillAppear</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TBMemo</span> <span class="o">*</span><span class="n">editingMemo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TBMemo</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;TITLE&quot;</span> <span class="nl">body:</span><span class="s">@&quot;BODY&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">viewController</span><span class="p">.</span><span class="n">editingMemo</span> <span class="o">=</span> <span class="n">editingMemo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[</span><span class="n">mockTitleTextField</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">setText:</span><span class="s">@&quot;TITLE&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">mockBodyTextView</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">setText:</span><span class="s">@&quot;BODY&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">viewController</span> <span class="nl">viewWillAppear:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>titleTextField</code>と<code>bodyTextView</code>に<code>text</code>を経由して値がセットされたかを<code>verify</code>します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testUpdateViewWithEditingMemoObjectInViewWillAppear</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TBMemo</span> <span class="o">*</span><span class="n">editingMemo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TBMemo</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;TITLE&quot;</span> <span class="nl">body:</span><span class="s">@&quot;BODY&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">viewController</span><span class="p">.</span><span class="n">editingMemo</span> <span class="o">=</span> <span class="n">editingMemo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[</span><span class="n">mockTitleTextField</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">setText:</span><span class="s">@&quot;TITLE&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">mockBodyTextView</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">setText:</span><span class="s">@&quot;BODY&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">viewController</span> <span class="nl">viewWillAppear:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">mockTitleTextField</span> <span class="n">verify</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">mockBodyTextView</span> <span class="n">verify</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでよさそうです。案外、簡単でしたね。</p>

<h3>viewWillDisappearで、入力したタイトルと本文からメモオブジェクトを更新して、delegateへ渡す</h3>

<p>次はこっちです。これはdelegateの扱い方で、大きく分けて2つ方法があります。</p>

<p>1つめはdelegateのモックオブジェクトを使うパターン、そしてテストケース自身がdelegateになるパターンです。
これは結構好みだと思うので、好きな方を採用すればよいかと思います。</p>

<h4>共通部分</h4>

<p>まずは共通なところ、<code>titleTextField</code>と<code>bodyTextView</code>をスタブして、<code>TITLE</code>と<code>BODY</code>が入力された状態を再現します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testFinishDelegateWithUpdatedMemoObjectInViewWillDisappear</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ユーザー入力を再現</span>
</span><span class='line'>    <span class="p">[[[</span><span class="n">mockTitleTextField</span> <span class="n">stub</span><span class="p">]</span> <span class="nl">andReturn:</span><span class="s">@&quot;TITLE&quot;</span><span class="p">]</span> <span class="n">text</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[[</span><span class="n">mockBodyTextView</span> <span class="n">stub</span><span class="p">]</span> <span class="nl">andReturn:</span><span class="s">@&quot;BODY&quot;</span><span class="p">]</span> <span class="n">text</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうすると、<code>titleTextField.text</code>は<code>TITLE</code>が入っている状態になりますね。</p>

<h4>delegateのモックオブジェクトを使うパターン</h4>

<p>OCMockでプロトコルからモックのdelegateを作り、セットします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="kt">id</span> <span class="n">mockDelegate</span> <span class="o">=</span> <span class="p">[</span><span class="n">OCMockObject</span> <span class="nl">mockForProtocol:</span><span class="err">@</span><span class="n">protocol</span><span class="p">(</span><span class="n">TBMemoEditDelegate</span><span class="p">)];</span>
</span><span class='line'><span class="n">viewController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">mockDelegate</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>このモックの<code>editViewController:didFinishEditMemo:</code>が、更新されたメモオブジェクトを持って呼び出される事を期待します。
これには<code>[OCMArg checkWithBlock:]</code>を利用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[[</span><span class="n">mockDelegate</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">editViewController:</span><span class="n">viewController</span> <span class="nl">didFinishEditMemo:</span><span class="p">[</span><span class="n">OCMArg</span> <span class="nl">checkWithBlock:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TBMemo</span> <span class="o">*</span><span class="n">memo</span> <span class="o">=</span> <span class="p">(</span><span class="n">TBMemo</span> <span class="o">*</span><span class="p">)</span><span class="n">obj</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">memo</span><span class="p">.</span><span class="n">titile</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;TITLE&quot;</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">memo</span><span class="p">.</span><span class="n">body</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;BODY&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして、メモオブジェクトをセットして、<code>viewWillDisappear</code>を呼び、<code>verify</code>します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">TBMemo</span> <span class="o">*</span><span class="n">edtingMemo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TBMemo</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">viewController</span><span class="p">.</span><span class="n">editingMemo</span> <span class="o">=</span> <span class="n">edtingMemo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">viewController</span> <span class="nl">viewWillDisappear:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">mockDelegate</span> <span class="n">verify</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>全体としてこんなテストになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testFinishDelegateWithUpdatedMemoObjectInViewWillDisappear</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[[</span><span class="n">mockTitleTextField</span> <span class="n">stub</span><span class="p">]</span> <span class="nl">andReturn:</span><span class="s">@&quot;TITLE&quot;</span><span class="p">]</span> <span class="n">text</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[[</span><span class="n">mockBodyTextView</span> <span class="n">stub</span><span class="p">]</span> <span class="nl">andReturn:</span><span class="s">@&quot;BODY&quot;</span><span class="p">]</span> <span class="n">text</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">id</span> <span class="n">mockDelegate</span> <span class="o">=</span> <span class="p">[</span><span class="n">OCMockObject</span> <span class="nl">mockForProtocol:</span><span class="err">@</span><span class="n">protocol</span><span class="p">(</span><span class="n">TBMemoEditDelegate</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">mockDelegate</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">editViewController:</span><span class="n">viewController</span> <span class="nl">didFinishEditMemo:</span><span class="p">[</span><span class="n">OCMArg</span> <span class="nl">checkWithBlock:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">TBMemo</span> <span class="o">*</span><span class="n">memo</span> <span class="o">=</span> <span class="p">(</span><span class="n">TBMemo</span> <span class="o">*</span><span class="p">)</span><span class="n">obj</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">memo</span><span class="p">.</span><span class="n">titile</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;TITLE&quot;</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">memo</span><span class="p">.</span><span class="n">body</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;BODY&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}]];</span>
</span><span class='line'>    <span class="n">viewController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">mockDelegate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TBMemo</span> <span class="o">*</span><span class="n">editingMemo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TBMemo</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">viewController</span><span class="p">.</span><span class="n">editingMemo</span> <span class="o">=</span> <span class="n">editingMemo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">viewController</span> <span class="nl">viewWillDisappear:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">mockDelegate</span> <span class="n">verify</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>テストケース自身がdelegateになるパターン</h4>

<p>こっちはiOS部では説明してなかったです。(すればよかった)</p>

<p>まずは、テストケースがDelegateを実装することを宣言します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">TBMemoEditViewControllerTests</span> <span class="p">()</span> <span class="o">&lt;</span><span class="n">TBMemoEditDelegate</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>テストケースにdelegateを実装します。渡ってきたメモオブジェクトを<code>editedMemo</code>にとっておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">editViewController:</span><span class="p">(</span><span class="n">TBMemoEditViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">didFinishEditMemo:</span><span class="p">(</span><span class="n">TBMemo</span> <span class="o">*</span><span class="p">)</span><span class="nv">memo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">editedMemo</span> <span class="o">=</span> <span class="n">memo</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>自身をdelegateにして、<code>viewWillDisappear</code>を呼びます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">viewController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">TBMemo</span> <span class="o">*</span><span class="n">edtingMemo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TBMemo</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">viewController</span><span class="p">.</span><span class="n">editingMemo</span> <span class="o">=</span> <span class="n">edtingMemo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">viewController</span> <span class="nl">viewWillDisappear:</span><span class="n">NO</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>editedMemo</code>に更新されたメモオブジェクトがあるはずなので、これをアサートします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">STAssertEqualObjects</span><span class="p">(</span><span class="n">editedMemo</span><span class="p">.</span><span class="n">titile</span><span class="p">,</span> <span class="s">@&quot;TITLE&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'><span class="n">STAssertEqualObjects</span><span class="p">(</span><span class="n">editedMemo</span><span class="p">.</span><span class="n">body</span><span class="p">,</span> <span class="s">@&quot;BODY&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでよさそうです。全体としてはこんな感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testFinishDelegateWithUpdatedMemoObjectInViewWillDisappearWithSelfDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[[</span><span class="n">mockTitleTextField</span> <span class="n">stub</span><span class="p">]</span> <span class="nl">andReturn:</span><span class="s">@&quot;TITLE&quot;</span><span class="p">]</span> <span class="n">text</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[[</span><span class="n">mockBodyTextView</span> <span class="n">stub</span><span class="p">]</span> <span class="nl">andReturn:</span><span class="s">@&quot;BODY&quot;</span><span class="p">]</span> <span class="n">text</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">viewController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TBMemo</span> <span class="o">*</span><span class="n">editingMemo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TBMemo</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">viewController</span><span class="p">.</span><span class="n">editingMemo</span> <span class="o">=</span> <span class="n">editingMemo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">viewController</span> <span class="nl">viewWillDisappear:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">STAssertEqualObjects</span><span class="p">(</span><span class="n">editedMemo</span><span class="p">.</span><span class="n">titile</span><span class="p">,</span> <span class="s">@&quot;TITLE&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>    <span class="n">STAssertEqualObjects</span><span class="p">(</span><span class="n">editedMemo</span><span class="p">.</span><span class="n">body</span><span class="p">,</span> <span class="s">@&quot;BODY&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">editViewController:</span><span class="p">(</span><span class="n">TBMemoEditViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">didFinishEditMemo:</span><span class="p">(</span><span class="n">TBMemo</span> <span class="o">*</span><span class="p">)</span><span class="nv">memo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">editedMemo</span> <span class="o">=</span> <span class="n">memo</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>どうでしょう、僕は前者の方が好みですが、分かりやすいのは多分後者ですかね。</p>

<h2>まとめ</h2>

<p>こんな感じのことを解説しました。
ちゃんと分割していけば、複雑になるかもしれないですが、大抵はこのパータンで事足りるかなーと思います。</p>

<p>非同期の終了をまってからBlocksでほげほげ、とかはOCMockの<code>andDo:</code>とかでうまい感じに表現できますし、<code>NSNotification</code>とか使う場合にも結構素直に書けます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TypeScriptのInterfaceとStructural Subtyping]]></title>
    <link href="http://yaakaito.org/blog/2013/05/02/typescript-subtyping/"/>
    <updated>2013-05-02T02:58:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/05/02/typescript-subtyping</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
TypeScriptにはInterfaceとStructural Subtypingがあるのでそれについて書こうと思います。まだ0.8.x系です。</p>

<h2>Interface</h2>

<p>JavaやC#でいうinterfaceと似ていますが、ある形をしたオブジェクトに対する別名というのが正しいと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">interface</span> <span class="nx">Rider</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">henshin</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">wizard</span><span class="o">:</span> <span class="nx">Rider</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;仮面ライダーウィザード&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">henshin</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ｼｬﾊﾞﾄﾞｭﾋﾞﾀｯﾁﾍﾝｼｰﾝ!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうすると <code>wizard</code> は <code>Rider</code> であることになります。
JavaScriptには存在しないシンタックスなので、コンパイルするとinterfaceは当然ですが消えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">wizard</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;仮面ライダーウィザード&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">henshin</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ｼｬﾊﾞﾄﾞｭﾋﾞﾀｯﾁﾍﾝｼｰﾝ!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>同じように <code>beast</code> も作ってみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">beast</span><span class="o">:</span> <span class="nx">Rider</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;仮面ライダービースト&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">henshin</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;L・I・O・N!ﾗｲｵｰﾝ!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>やりましたね。</p>

<p>このinterfaceはそのまま型のように扱うことが出来るので、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">please</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">rider</span><span class="o">:</span> <span class="nx">Rider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">rider</span><span class="p">.</span><span class="nx">henshin</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">please</span><span class="p">(</span><span class="nx">wizard</span><span class="p">);</span>
</span><span class='line'><span class="nx">please</span><span class="p">(</span><span class="nx">beast</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういう風に使う事も出来ます。便利ですね。</p>

<p>もちろんclassにimplementsすることも出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">WizardInfinity</span> <span class="kr">implements</span> <span class="nx">Rider</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">public</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s1">&#39;仮面ライダーウィザード インフィニティ&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">public</span> <span class="nx">henshin</span><span class="p">()</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ﾋｰｽｲﾌｰﾄﾞｰﾎﾞｰｻﾞﾊﾞﾋﾞｭｰﾄﾞｺﾞｰﾝ!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実装が欠けている場合は、こういう感じのエラーになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Class</span> <span class="s1">&#39;WizardInfinity&#39;</span> <span class="nx">declares</span> <span class="kr">interface</span> <span class="s1">&#39;Rider&#39;</span> <span class="nx">but</span> <span class="nx">does</span> <span class="nx">not</span> <span class="nx">implement</span> <span class="nx">it</span><span class="o">:</span> <span class="nx">Type</span> <span class="s1">&#39;WizardInfinity&#39;</span> <span class="nx">is</span> <span class="nx">missing</span> <span class="nx">property</span> <span class="s1">&#39;name&#39;</span> <span class="nx">from</span> <span class="nx">type</span> <span class="s1">&#39;Rider&#39;</span>
</span><span class='line'><span class="nx">Class</span> <span class="s1">&#39;WizardInfinity&#39;</span> <span class="nx">declares</span> <span class="kr">interface</span> <span class="s1">&#39;Rider&#39;</span> <span class="nx">but</span> <span class="nx">does</span> <span class="nx">not</span> <span class="nx">implement</span> <span class="nx">it</span><span class="o">:</span> <span class="nx">Type</span> <span class="s1">&#39;WizardInfinity&#39;</span> <span class="nx">is</span> <span class="nx">missing</span> <span class="nx">property</span> <span class="s1">&#39;henshin&#39;</span> <span class="nx">from</span> <span class="nx">type</span> <span class="s1">&#39;Rider&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Functionにも適用することができて、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">Ring</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">public</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s1">&#39;ドライバーオンウィザードリング&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">interface</span> <span class="nx">DriverOn</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">ring</span><span class="o">:</span> <span class="nx">Ring</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">driverOn</span><span class="o">:</span> <span class="nx">DriverOn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ring</span><span class="o">:</span> <span class="nx">Ring</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">ring</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="s1">&#39;ドライバーオンウィザードリング&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ﾄﾞﾗｲﾊﾞｰｵｰﾝｯ!ﾌﾟﾘｨｨｨｽﾞ!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういう感じに書けます。これだけだと別に利点が分からなくて、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">driverOn</span> <span class="o">=</span> <span class="p">(</span><span class="nx">ring</span><span class="o">:</span> <span class="nx">Ring</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">ring</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="s1">&#39;ドライバーオンウィザードリング&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ﾄﾞﾗｲﾊﾞｰｵｰﾝｯ!ﾌﾟﾘｨｨｨｽﾞ!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで別によくね、となるんですが、いうならオーバーロードみたいなことが出来るのでちょっと便利です。こういう感じで書く事が出来るので、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">interface</span> <span class="nx">DriverOn</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">ring</span><span class="o">:</span> <span class="nx">Ring</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">love</span><span class="o">:</span> <span class="nx">Love</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>全体でこんな感じになってると、<code>Phantom</code>を受け付けません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">Ring</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">public</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s1">&#39;ドライバーオンウィザードリング&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Love</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">public</span> <span class="nx">target</span><span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s1">&#39;こよみ&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Phantom</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">public</span> <span class="nx">original</span><span class="o">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s1">&#39;ミサ&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">interface</span> <span class="nx">DriverOn</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">ring</span><span class="o">:</span> <span class="nx">Ring</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">love</span><span class="o">:</span> <span class="nx">Love</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">driverOn</span><span class="o">:</span> <span class="nx">DriverOn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">power</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">power</span> <span class="k">instanceof</span> <span class="nx">Ring</span> <span class="o">&amp;&amp;</span> <span class="nx">power</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="s1">&#39;ドライバーオンウィザードリング&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ﾄﾞﾗｲﾊﾞｰｵｰﾝｯ!ﾌﾟﾘｨｨｨｽﾞ!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">power</span> <span class="k">instanceof</span> <span class="nx">Love</span> <span class="o">&amp;&amp;</span> <span class="nx">power</span><span class="p">.</span><span class="nx">target</span> <span class="o">===</span> <span class="s1">&#39;こよみ&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ｲﾝｯﾌｨﾆﾃｨｨ!ｲﾝｯﾌｨﾆﾃｨｨ!ｲﾝｯﾌｨﾆﾃｨｨ!ｲﾝｯﾌｨﾆﾃｨｨ!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">driverOn</span><span class="p">(</span><span class="k">new</span> <span class="nx">Ring</span><span class="p">());</span>
</span><span class='line'><span class="nx">driverOn</span><span class="p">(</span><span class="k">new</span> <span class="nx">Love</span><span class="p">());</span>
</span><span class='line'><span class="nx">driverOn</span><span class="p">(</span><span class="k">new</span> <span class="nx">Phantom</span><span class="p">());</span> <span class="c1">// Supplied parameters do not match any signature of call target</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとは <code>interface A extends B</code> と出来たり、同じ<code>interface</code>を2回定義する事で拡張できたりします。</p>

<h2>Structural Subtyping</h2>

<p>ようするにダックタイピングみたいなやつです。
さっきの<code>please</code>関数の引数を、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">please</span><span class="p">(</span><span class="nx">rider</span><span class="o">:</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span> <span class="nx">henshin</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span> <span class="p">})</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいに出来ます、言ってしまえばそれだけです。</p>

<p>なんの役に立つかよくわかんないと思うので、<code>each</code>関数みたいなのを作るのを想定してみましょう。
ウィザードで説明するのに限界を感じ(飽き)ました。</p>

<p><code>each</code>って基本的には<code>Array</code>を受け取ると思うんですが、JavaScriptには<code>Array</code>っぽいものというのが存在しますよね。
オブジェクトとしては、数値でインデックスアクセスできて、<code>length</code>を持っている、というものです。</p>

<p>で、これをさっきの例に当てはめると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">each</span><span class="p">(</span><span class="nx">list</span><span class="o">:</span> <span class="p">{</span> <span class="p">[</span><span class="nx">index</span><span class="o">:</span> <span class="nx">number</span><span class="p">]</span><span class="o">:</span> <span class="nx">any</span><span class="p">;</span> <span class="nx">length</span><span class="o">:</span> <span class="nx">number</span><span class="p">;</span> <span class="p">},</span> <span class="nx">func</span><span class="o">:</span> <span class="p">(</span><span class="nx">obj</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>まあこんな感じになるわけです。
これで例えば<code>Array</code>っぽい<code>arguments</code>とかが通るようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">each</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="p">(</span><span class="nx">obj</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{})</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただこのままだと、<code>map([1,2,3])</code>が通らないので、<code>any[]</code>も受け付けるようにオーバーロードします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">each</span><span class="p">(</span><span class="nx">list</span><span class="o">:</span> <span class="nx">any</span><span class="p">[],</span> <span class="nx">func</span><span class="o">:</span> <span class="p">(</span><span class="nx">obj</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">each</span><span class="p">(</span><span class="nx">list</span><span class="o">:</span> <span class="p">{</span> <span class="p">[</span><span class="nx">index</span><span class="o">:</span> <span class="nx">number</span><span class="p">]</span><span class="o">:</span> <span class="nx">any</span><span class="p">;</span> <span class="nx">length</span><span class="o">:</span> <span class="nx">any</span><span class="p">;</span> <span class="p">},</span> <span class="nx">func</span><span class="o">:</span> <span class="p">(</span><span class="nx">obj</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">each</span><span class="p">(</span><span class="nx">list</span><span class="o">:</span> <span class="nx">any</span><span class="p">,</span> <span class="nx">func</span><span class="o">:</span> <span class="p">(</span><span class="nx">obj</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">func</span><span class="p">(</span><span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じ。長い。こうすると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">each</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span> <span class="p">(</span><span class="nx">obj</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{})</span>
</span><span class='line'><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">each</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="p">(</span><span class="nx">obj</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{})</span>
</span></code></pre></td></tr></table></div></figure>


<p>は通るけど、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">each</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="nx">obj</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{})</span>
</span></code></pre></td></tr></table></div></figure>


<p>とかは通らなくなります、よかったですね！</p>

<p>あとは<code>func</code>をInterfaceにまとめて、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">interface</span> <span class="nx">EachFunc</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">obj</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">each</span><span class="p">(</span><span class="nx">list</span><span class="o">:</span> <span class="nx">any</span><span class="p">[],</span> <span class="nx">func</span><span class="o">:</span> <span class="nx">EachFunc</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">each</span><span class="p">(</span><span class="nx">list</span><span class="o">:</span> <span class="p">{</span> <span class="p">[</span><span class="nx">index</span><span class="o">:</span> <span class="nx">number</span><span class="p">]</span><span class="o">:</span> <span class="nx">any</span><span class="p">;</span> <span class="nx">length</span><span class="o">:</span> <span class="nx">any</span><span class="p">;</span> <span class="p">},</span> <span class="nx">func</span><span class="o">:</span> <span class="nx">EachFunc</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">each</span><span class="p">(</span><span class="nx">list</span><span class="o">:</span> <span class="nx">any</span><span class="p">,</span> <span class="nx">func</span><span class="o">:</span> <span class="nx">EachFunc</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうなって、さらにさっきのをInterfaceを経由するようにすると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">interface</span> <span class="nx">EachFunc</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">obj</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">interface</span> <span class="nx">LikeArray</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">index</span><span class="o">:</span> <span class="nx">number</span><span class="p">]</span><span class="o">:</span> <span class="nx">any</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">length</span><span class="o">:</span> <span class="nx">any</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">each</span><span class="p">(</span><span class="nx">list</span><span class="o">:</span> <span class="nx">any</span><span class="p">[],</span> <span class="nx">func</span><span class="o">:</span> <span class="nx">EachFunc</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">each</span><span class="p">(</span><span class="nx">list</span><span class="o">:</span> <span class="nx">LikeArray</span><span class="p">,</span> <span class="nx">func</span><span class="o">:</span> <span class="nx">EachFunc</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">each</span><span class="p">(</span><span class="nx">list</span><span class="o">:</span> <span class="nx">any</span><span class="p">,</span> <span class="nx">func</span><span class="o">:</span> <span class="nx">EachFunc</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>とか書いたりできます。</p>

<h2>まとめ</h2>

<p>ﾋｰｽｲﾌｰﾄﾞｰﾎﾞｰｻﾞﾊﾞﾋﾞｭｰﾄﾞｺﾞｰﾝ!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近TypeScript書くときに使うGrunt+Testem+αのテンプレ]]></title>
    <link href="http://yaakaito.org/blog/2013/04/26/typescript-proj-template/"/>
    <updated>2013-04-26T03:50:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/26/typescript-proj-template</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
TypeScript0.9のpreviewがリリースされましたね！最近はもうJavaScriptもCoffeeScriptも自発的には書ていないです。
仕事とかでも結構TypeScriptでプロト作っては捨て、みたいなことをやってるんですが、
そうしてるうちにプロジェクトのテンプレ大体決まってきたなーという感じがしたのでまとめた。</p>

<p><a href="https://github.com/yaakaito/typescript-proj">typescript-proj</a></p>

<h2>搭載しているもの</h2>

<ul>
<li>Gruntのカスタムタスク</li>
<li>Testem Mocha+chai でのテスト環境</li>
<li>jQuery.d.ts 1.9</li>
<li>.gitignoreとか.gitattributes</li>
<li>package.jsonとcomponents.json入り</li>
</ul>


<p>中核はGrunt+Testem+Bowerな感じ。yoでよくね感すごい。</p>

<h2>使い方</h2>

<p>完全に個人用にまとめてるだけなので、cloneして<code>.git</code>消して使ってる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/yaakaito/typescript-proj.git proj
</span><span class='line'>$ rm -rf proj/.git</span></code></pre></td></tr></table></div></figure>


<p>npmとbowerを使ってるので、とりあえずテンプレ分を取ってくる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install
</span><span class='line'>$ bower install</span></code></pre></td></tr></table></div></figure>


<h2>プロジェクト構成</h2>

<p>セットアップしてから、とりあえず <code>grunt generate</code> するとこんな感じになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tree -L 2 --dirsfirst
</span><span class='line'>.
</span><span class='line'>├── build
</span><span class='line'>│   ├── index.js
</span><span class='line'>│   └── index.min.js
</span><span class='line'>├── compiled
</span><span class='line'>│   ├── src
</span><span class='line'>│   └── test
</span><span class='line'>├── components
</span><span class='line'>│   └── jquery
</span><span class='line'>├── d.ts
</span><span class='line'>│   ├── chai.d.ts
</span><span class='line'>│   ├── jquery.d.ts
</span><span class='line'>│   └── mocha.d.ts
</span><span class='line'>├── node_modules
</span><span class='line'>│   ├── grunt
</span><span class='line'>│   ├── grunt-contrib-clean
</span><span class='line'>│   ├── grunt-contrib-concat
</span><span class='line'>│   ├── grunt-contrib-connect
</span><span class='line'>│   ├── grunt-contrib-copy
</span><span class='line'>│   ├── grunt-contrib-uglify
</span><span class='line'>│   ├── grunt-regarde
</span><span class='line'>│   └── grunt-typescript
</span><span class='line'>├── public
</span><span class='line'>│   ├── javascript
</span><span class='line'>│   └── index.html
</span><span class='line'>├── res
</span><span class='line'>│   └── index.html
</span><span class='line'>├── src
</span><span class='line'>│   └── index.ts
</span><span class='line'>├── test
</span><span class='line'>│   └── index.ts
</span><span class='line'>├── Gruntfile.coffee
</span><span class='line'>├── README.md
</span><span class='line'>├── component.json
</span><span class='line'>├── package.json
</span><span class='line'>└── testem.json</span></code></pre></td></tr></table></div></figure>


<p>上から説明していくと</p>

<h3>build</h3>

<p>連結済み + minify済みのJSが置かれるところ。
これはリリースの配布にも使うことを前提にしているので、gitignoreはされてない。</p>

<h3>compiled</h3>

<p>単純にコンパイルした状態のJSが置かれるところ。
中間ファイルみたいなものなので、gitignoreの対象。</p>

<h3>components</h3>

<p>bowerで入るモジュール。gitginore。</p>

<h3>d.ts</h3>

<p>TypeScript用の<code>d.ts</code>を置くところ。コードとほぼ同じ扱い。
微妙に違うけど、vendorみたいなもの。ドットは好みだと思うのでご自由に。</p>

<p>デフォルトでは jQueryと mocha、chaiを入れてある。
jQueryはまあなんだかんだで使う(使わされる)のでデフォで入れてある感じ。
mochaとchaiはテスト用、testemはそこまでは面倒みてくれないので自分で置く。</p>

<p><code>d.ts</code>の追加は僕は<a href="http://www.tsdpm.com/">tsdpm</a>から探して<code>tsd</code>で取ってきて適当に配置してる。</p>

<h3>node_modules</h3>

<p>npm。主にgrunt系がインストールされる。特に書く事ない。</p>

<h3>public</h3>

<p>プレビューモードでルートにするところ。gh-pagesとか作りたいときはここに入るように作るんだけど、<code>index.html</code>の元ファイルとかは<code>res</code>にある。</p>

<h3>res</h3>

<p>TypeScript以外のものを置くところ。上の<code>index.html</code>とか、cssとか置いたりする。
compassとかをデフォルトで入れてないんだけど、作るならここに入れる事になると思う。</p>

<h3>src</h3>

<p>TypeScript、特に言う事ない。</p>

<h3>test</h3>

<p>テスト、特に言う事ない。</p>

<h3>Gruntfile.coffee</h3>

<p>Gruntの設定ファイル。詳しくは後で。</p>

<h3>README.md</h3>

<p>とりあえずデフォルトでテンプレートのREADME入れてる。</p>

<h3>component.json package.json</h3>

<p>bowerとnpm。特に言う事ない。</p>

<h3>testem.json</h3>

<p>Testemの設定ファイル。詳しくは後で。</p>

<h2>Gruntのタスク</h2>

<p>ビルド系は微妙に分かり難いんだけど、基本的に<code>compile</code> <code>build</code> <code>generate</code>の3種類を定義して使ってる。
それにプラスして<code>preview</code>というのを作っていて、配信サーバーを立てて、ファイル更新されたらビルドしなおす感じ。
LiveReloadとかはなくともよいかなーと思ってるので作ってない。</p>

<h3>compile</h3>

<p>単純にTypeScriptをコンパイルするだけ。<code>src</code> <code>test</code> 共にコンパイルして <code>compiled</code> へ。
TypeScriptだと<code>index.ts</code>だけコンパイルするようにして、<code>index.ts</code>で全部referenceでもいいと思うので使い分ける。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">typescript:</span>
</span><span class='line'>    <span class="nv">compile:</span>
</span><span class='line'>        <span class="nv">src: </span><span class="p">[</span><span class="s">&#39;src/**/*.ts&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">dest: </span><span class="s">&#39;compiled&#39;</span>
</span><span class='line'>        <span class="c1"># src: [&#39;src/index.ts&#39;]</span>
</span><span class='line'>        <span class="c1"># dest: &#39;compiled/src/index.ts&#39;</span>
</span><span class='line'>        <span class="nv">options:</span>
</span><span class='line'>            <span class="nv">module: </span><span class="s">&#39;commonjs&#39;</span>
</span><span class='line'>            <span class="nv">target: </span><span class="s">&#39;es5&#39;</span>
</span><span class='line'>            <span class="c1"># sourcemap: true</span>
</span><span class='line'>            <span class="c1"># declaration: true</span>
</span><span class='line'>    <span class="nv">test:</span>
</span><span class='line'>        <span class="nv">src: </span><span class="p">[</span><span class="s">&#39;test/**/*.ts&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">dest: </span><span class="s">&#39;compiled&#39;</span>
</span><span class='line'>        <span class="nv">options:</span>
</span><span class='line'>            <span class="nv">module: </span><span class="s">&#39;commonjs&#39;</span>
</span><span class='line'>            <span class="nv">target: </span><span class="s">&#39;es5&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span> <span class="s">&#39;compile&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;typescript&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>build</h3>

<p>concat + uglifyでminify作ったりする。作ったのは <code>build</code> に入る。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">concat:</span>
</span><span class='line'>    <span class="nv">dist:</span>
</span><span class='line'>        <span class="nv">src: </span><span class="p">[</span><span class="s">&#39;compiled/src/**/*.js&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">dest: </span><span class="s">&#39;build/index.js&#39;</span>
</span><span class='line'>    <span class="nv">options:</span>
</span><span class='line'>        <span class="nv">separator: </span><span class="s">&#39;;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">uglify:</span>
</span><span class='line'>    <span class="nv">min:</span>
</span><span class='line'>        <span class="nv">files:</span>
</span><span class='line'>            <span class="s">&#39;build/index.min.js&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s">&#39;build/index.js&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="cm">###</span>
</span><span class='line'><span class="cm">    options:</span>
</span><span class='line'><span class="cm">        mangle:</span>
</span><span class='line'><span class="cm">            expect: [&#39;jQuery&#39;]</span>
</span><span class='line'><span class="cm">        sourceMap: &#39;build/source-map.js&#39;</span>
</span><span class='line'><span class="cm">    ###</span>
</span><span class='line'>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span> <span class="s">&#39;build&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;concat&#39;</span><span class="p">,</span> <span class="s">&#39;uglify&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>generete</h3>

<p><code>public</code>を作る為のコマンド、用途に合わせて書き足していく。(インデントきもい)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">copy:</span>
</span><span class='line'>    <span class="nv">public:</span>
</span><span class='line'>        <span class="nv">files: </span><span class="p">[</span>
</span><span class='line'>                <span class="nv">expand: </span><span class="kc">true</span>
</span><span class='line'>                <span class="nv">cwd: </span><span class="s">&#39;build&#39;</span>
</span><span class='line'>                <span class="nv">src: </span><span class="s">&#39;**&#39;</span>
</span><span class='line'>                <span class="nv">dest: </span><span class="s">&#39;public/javascript&#39;</span>
</span><span class='line'>            <span class="p">,</span>
</span><span class='line'>                <span class="nv">expand: </span><span class="kc">true</span>
</span><span class='line'>                <span class="nv">cwd: </span><span class="s">&#39;res&#39;</span>
</span><span class='line'>                <span class="nv">src: </span><span class="s">&#39;**&#39;</span>
</span><span class='line'>                <span class="nv">dest: </span><span class="s">&#39;public/&#39;</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span> <span class="s">&#39;generate&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;compile&#39;</span><span class="p">,</span> <span class="s">&#39;build&#39;</span><span class="p">,</span> <span class="s">&#39;copy:public&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>preview</h3>

<p>connect + regarde。regardeでgenerateするようにしてる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">connect:</span>
</span><span class='line'>    <span class="nv">preview:</span>
</span><span class='line'>        <span class="nv">options:</span>
</span><span class='line'>            <span class="nv">port: </span><span class="mi">9000</span>
</span><span class='line'>            <span class="nv">base: </span><span class="s">&#39;public&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">regarde:</span>
</span><span class='line'>    <span class="nv">src:</span>
</span><span class='line'>        <span class="nv">files: </span><span class="p">[</span><span class="s">&#39;src/**/*.*&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">tasks: </span><span class="p">[</span><span class="s">&#39;generate&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span> <span class="s">&#39;preview&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;generate&#39;</span><span class="p">,</span> <span class="s">&#39;connect:preview&#39;</span><span class="p">,</span> <span class="s">&#39;regarde&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Gruntfileは状況に合わせて柔軟に変えていく感じにしたいので、デフォルトは<code>*</code>指定が多め。</p>

<h2>Testem</h2>

<p>テストは最近は全部Testemでやってる。BusterJS派だったけど、BusterJSはちょっとトロい感じがする・・・。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;framework&quot;</span> <span class="o">:</span> <span class="s2">&quot;mocha+chai&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;before_tests&quot;</span> <span class="o">:</span> <span class="s2">&quot;grunt compile&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;src_files&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;src/**/*.ts&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;test/**/*.ts&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="s2">&quot;serve_files&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;compiled/src/**/*.js&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;compiled/test/**/*.js&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本は <code>src</code> <code>test</code> を監視して、あとはGruntに任せてる。</p>

<h2>その他</h2>

<p>適当に<code>index.ts</code>を<code>src</code> <code>test</code> 共に吐いているので、忘れかけたら参考にするなどして書く。
<code>.js</code>は最初からバイナリ扱いしているので安心してください！！！</p>

<h2>まとめ</h2>

<p>CoffeeScriptとかも大体同じ感じで出来ると思うので、それなりに汎用性ある感じだと思う。(やろうとしたけど書かない事に気づいてやってない)
<a href="https://github.com/yaakaito/Gruntfile">Gruntfileだけ個別</a>にまとめたりもしてるので、適当に組み合わせるとよいのでは。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Storyboardで横にずれるメニュー作る]]></title>
    <link href="http://yaakaito.org/blog/2013/04/25/sliding-view-with-stroyboard/"/>
    <updated>2013-04-25T02:22:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/25/sliding-view-with-stroyboard</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
Storyboardって、FaceBookとかがやってる横にずれるメニューを作るのがめちゃくちゃめんどくさそう、というかそこだけコードで書くんじゃないの？という印象だったんですが、
<a href="https://github.com/edgecase/ECSlidingViewController">ESSlidingViewController</a>というのがStroyboardに対応しているらしく、綺麗にいけそうなので試してみた。</p>

<p><a href="https://github.com/yaakaito/StoryBoard-Sliding">コードはGithubで</a></p>

<h2>プロジェクトつくってセットアップ</h2>

<p>とりあえずSingle View Applicationを選んで適当に</p>

<p>作ったらCocoapodsで</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>platform :ios
</span><span class='line'>
</span><span class='line'>pod 'ECSlidingViewController'</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pod install</span></code></pre></td></tr></table></div></figure>


<h2>ECSlidingViewControllerを設定する</h2>

<p>Storyboardに最初に出てくるViewControllerのクラスを<code>ECSlidingViewController</code>にする。</p>

<p><img src="http://yaakaito.org/images/storyboard-sliding-base.png"></p>

<p>MenuViewControllerみたいなのをUITableViewControllerで作って、Storyboardで関連付ける。
Menuというidentifierを与えておく。</p>

<p><img src="http://yaakaito.org/images/storyboard-sliding-menu.png"></p>

<p>これでAppDelegateをいじるのかなーと思ったんだけど、ついてくるサンプルを読んだら、
InitialSlidingViewControllerみたいなを作って、これで初期化してた、こっちの方が綺麗な感じがするのでこっちでやることにする。
最初に表示されるViewControllerを設定しているので、それを作つくるんだけど、ついでなので2つ追加して全体でこんなStoryboardにした。
それぞれにFirstViewとSecondViewでidentifiterを与えている。</p>

<p><img src="http://yaakaito.org/images/storyboard-sliding.png"></p>

<p><code>topViewController</code>というのが生えているので、ここへFirstViewControllerみたいなのを入れる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@implementation</span> <span class="nc">SSInitialViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIStoryboard</span> <span class="o">*</span><span class="n">storyboard</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIStoryboard</span> <span class="nl">storyboardWithName:</span><span class="s">@&quot;MainStoryboard&quot;</span> <span class="nl">bundle:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">topViewController</span> <span class="o">=</span> <span class="p">[</span><span class="n">storyboard</span> <span class="nl">instantiateViewControllerWithIdentifier:</span><span class="s">@&quot;FirstView&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここまでやったらFirstViewControllerの方でメニューなんかを追加する。
グローバルな感じで設定するんじゃなくて、ViewController単位に指定できるっぽい、便利。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@implementation</span> <span class="nc">SSFirstViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewWillAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="nl">viewWillAppear:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">shadowOpacity</span> <span class="o">=</span> <span class="mf">0.75f</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">shadowRadius</span> <span class="o">=</span> <span class="mf">4.0f</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">shadowColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">blackColor</span><span class="p">].</span><span class="n">CGColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">slidingViewController</span><span class="p">.</span><span class="n">underLeftViewController</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">SSMenuViewController</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UIViewController</span> <span class="o">*</span><span class="n">menu</span> <span class="o">=</span>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">storyboard</span> <span class="nl">instantiateViewControllerWithIdentifier:</span><span class="s">@&quot;Menu&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">slidingViewController</span><span class="p">.</span><span class="n">underLeftViewController</span> <span class="o">=</span> <span class="n">menu</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">self</span><span class="p">.</span><span class="n">slidingViewController</span><span class="p">.</span><span class="n">panGesture</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">slidingViewController</span> <span class="nl">setAnchorRightRevealAmount:</span><span class="mf">280.0f</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ところでここで一回ハマってて、<code>[self.slidingViewController setAnchorRightRevealAmount:280.0f]</code>はデフォルトとかがあるわけじゃなくて、かならず設定しないと駄目っぽい。</p>

<p>こんなかんじ！</p>

<p><img src="http://yaakaito.org/images/storyboard-sliding-sample.png" width="320"></p>

<h2>メニューの実装してみる</h2>

<p>適当に、面倒なのでメニュー名からidentifier作るようにしてる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">SSMenuViewController</span> <span class="p">()</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSArray</span> <span class="o">*</span><span class="n">items</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SSMenuViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">items</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="s">@&quot;First&quot;</span><span class="p">,</span> <span class="s">@&quot;Second&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">numberOfSectionsInTableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">numberOfRowsInSection:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">section</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">cellForRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">CellIdentifier</span> <span class="o">=</span> <span class="s">@&quot;MenuCell&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UITableViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">tableView</span> <span class="nl">dequeueReusableCellWithIdentifier:</span><span class="n">CellIdentifier</span> <span class="nl">forIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">items</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">didSelectRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">identifier</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@View&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">items</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">UIViewController</span> <span class="o">*</span><span class="n">newTopViewController</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">storyboard</span> <span class="nl">instantiateViewControllerWithIdentifier:</span><span class="n">identifier</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">slidingViewController</span> <span class="nl">anchorTopViewOffScreenTo:</span><span class="n">ECRight</span> <span class="nl">animations:</span><span class="nb">nil</span> <span class="nl">onComplete:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">CGRect</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">slidingViewController</span><span class="p">.</span><span class="n">topViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">slidingViewController</span><span class="p">.</span><span class="n">topViewController</span> <span class="o">=</span> <span class="n">newTopViewController</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">slidingViewController</span><span class="p">.</span><span class="n">topViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">slidingViewController</span> <span class="n">resetTopView</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>画面の切り替えは<code>tableView:didSelectRowAtIndexPath:</code>でやってるあたり。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">didSelectRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">identifier</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@View&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">items</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">UIViewController</span> <span class="o">*</span><span class="n">newTopViewController</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">storyboard</span> <span class="nl">instantiateViewControllerWithIdentifier:</span><span class="n">identifier</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">slidingViewController</span> <span class="nl">anchorTopViewOffScreenTo:</span><span class="n">ECRight</span> <span class="nl">animations:</span><span class="nb">nil</span> <span class="nl">onComplete:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">CGRect</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">slidingViewController</span><span class="p">.</span><span class="n">topViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">slidingViewController</span><span class="p">.</span><span class="n">topViewController</span> <span class="o">=</span> <span class="n">newTopViewController</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">slidingViewController</span><span class="p">.</span><span class="n">topViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">slidingViewController</span> <span class="n">resetTopView</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>storyboardからidentifierで引いてきて、それを<code>topViewConttoller</code>に設定するだけの親切構造。
僕がいままで使ってきたライブラリだと、この辺は自由にやってね、が多かったので、こうするとよいよがあると助かる。</p>

<p>ほとんどサンプルのまま持ってきたんだけど、このままだとメニューをタップしたあとのアニメーションがちょっとうざい。(一番右まで行ってから戻るやつ)
これは<code>anchorTopViewOffScreenTo:animations:onComplete:</code>がそういうアニメーションっぽいので、<code>resetTopView</code>だけにする。こっちは元の位置に戻すやつ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">didSelectRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">identifier</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@View&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">items</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">UIViewController</span> <span class="o">*</span><span class="n">newTopViewController</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">storyboard</span> <span class="nl">instantiateViewControllerWithIdentifier:</span><span class="n">identifier</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGRect</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">slidingViewController</span><span class="p">.</span><span class="n">topViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">slidingViewController</span><span class="p">.</span><span class="n">topViewController</span> <span class="o">=</span> <span class="n">newTopViewController</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">slidingViewController</span><span class="p">.</span><span class="n">topViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">slidingViewController</span> <span class="n">resetTopView</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとはStoryboardでよしなにビュー作ったりしていけばよい、Storyboardすごいなー。</p>

<h2>まとめ</h2>

<p>思ってたより綺麗にできたし、Storyboard毛嫌いなおりそうでよかったです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Segueでのオブジェクトのやりとりとか]]></title>
    <link href="http://yaakaito.org/blog/2013/04/24/segue-with-object/"/>
    <updated>2013-04-24T03:34:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/24/segue-with-object</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
UIのコード書くのがだるいので今更感満載でStoryboardを始めました！
Storyboard出来がよくて、iOSっぽいUIを作る分にはぽちぽちしていけば作れて便利だなーという感じです。</p>

<p>で、ViewController間でのオブジェクトのやりとりにはやっぱコードが必要なので、そこのメモ。
大体よく使うのは<code>pushViewController</code>、<code>Modal</code>、<code>TableView</code>あたりだと思うので、その3つあたりを書く。</p>

<p>別にそれぞれで大きく変わる訳でもないと思うので、最初に貼っておくととりあえずこんな感じのStoryboard作った。</p>

<p><img src="http://yaakaito.org/images/sample-story-board.png"></p>

<p>めんどくさいので最初のVCをSSViewController、遷移先をSSSecondViewControllerにしてある。</p>

<h2>基本</h2>

<p><code>prepareForSegue:sender:</code>というのを使うらしい、これは遷移元の方に書く。
遷移先から戻すときは<code>delegate</code>、両方<code>prepareForSegue:sender:</code>でいけんのかなーとか思ったけどそうではないらしい。</p>

<h2>PushVC</h2>

<p><a href="https://github.com/yaakaito/SegueSample/tree/navigation">コードはここ</a></p>

<p>遷移元の方で<code>prepareForSegue:sender:</code>を定義してあげる。Segueには<code>TopToSecond</code>って名前が付けてある。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">prepareForSegue:</span><span class="p">(</span><span class="n">UIStoryboardSegue</span> <span class="o">*</span><span class="p">)</span><span class="nv">segue</span> <span class="nf">sender:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">segue</span><span class="p">.</span><span class="n">identifier</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;TopToSecond&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">segue</span><span class="p">.</span><span class="n">destinationViewController</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうすると遷移するときに、ここが呼ばれるので、Segue名で分岐する。
<code>segue.destinationViewController</code>に遷移先のViewControllerのインスタンスが入っているので、ここでよしなにする。
別にそんなにめんどくさくなさそう。</p>

<p>次、戻る時。普通に<code>delegate</code>でやる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@protocol</span> <span class="nc">SSSecondViewControllerDelegate</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">willBack:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>適当にプロトコルつくって、さっきのところで関連付ける。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">prepareForSegue:</span><span class="p">(</span><span class="n">UIStoryboardSegue</span> <span class="o">*</span><span class="p">)</span><span class="nv">segue</span> <span class="nf">sender:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">((</span><span class="n">SSSecondViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">segue</span><span class="p">.</span><span class="n">destinationViewController</span><span class="p">).</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、戻ってくるときにこれを呼べばいいんだけど、そういう感じのイベントがあるのかと思ったら別になかった。
軽く調べてみた感じだけど、<code>viewWillDisappear</code>でやればよさげ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewWillDisappear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="nl">viewWillDisappear:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">delegate</span> <span class="nl">willBack:</span><span class="err">@</span><span class="p">{</span><span class="s">@&quot;A&quot;</span> <span class="o">:</span> <span class="s">@&quot;HOGE&quot;</span><span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Modal</h2>

<p><a href="https://github.com/yaakaito/SegueSample/tree/modal">コードはここ</a></p>

<p>pushVCと大差ない。使ってないけど、いままで<code>self.presentedViewController</code>だったのが<code>self.presentingViewController</code>に変わるらしい、紛らわしい。</p>

<p>モーダル閉じるところまでStoryboardで面倒みてほしい気分なんだけど、やりかたがよくわからなかった。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">touchDismiss:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">dismissViewControllerAnimated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>TableView</h2>

<p><a href="https://github.com/yaakaito/SegueSample/tree/table">コードはここ</a></p>

<p>戻すところは一緒だけど、indexPathを知る必要があるので一手間増える。
試してみたら、<code>prepareForSegue:sender:</code> -> <code>tableView:didSelectRowAtIndexPath:</code> という順になってて、それはどうなんだろうという気持ちになった。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">prepareForSegue:</span><span class="p">(</span><span class="n">UIStoryboardSegue</span> <span class="o">*</span><span class="p">)</span><span class="nv">segue</span> <span class="nf">sender:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">segue</span><span class="p">.</span><span class="n">identifier</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;TopToSecond&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">segue</span><span class="p">.</span><span class="n">destinationViewController</span><span class="p">);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">indexPathForSelectedRow</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで、あとはよしなに。</p>

<h2>まとめ</h2>

<p>別に<code>prepareForSegue:sender:</code>じゃなくともよいのではという気がしたりしたけど、
そう書けと言われてるっぽいし長い物に巻かれてそう書く事にした。
いろいろ書けてしまいそうなので、早めにルール作っちゃうのがいいのかなーという感じ。</p>

<p>あとこれどういう名前付ければいいのかよくわからん、<code>Segue</code>ってサフィックスは付けた気がいい気がする。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS用テスティングサーバー NLTHTTPStubServer 0.4 を公開しました]]></title>
    <link href="http://yaakaito.org/blog/2013/04/22/release-nlt-http-stub-server-0-4-0/"/>
    <updated>2013-04-22T00:51:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/22/release-nlt-http-stub-server-0-4-0</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
<a href="https://github.com/yaakaito/NLTHTTPStubServer">NLTHTTPStubServer</a> を0.4にアップデートしました。</p>

<p>最初にごめんなさいしておかなければいけないことがあります。</p>

<h2>0.2.x 系との互換性がありません</h2>

<p>ごめんなさい。0.1.x 0.2.x 系でのバグフィックスなどは、半年くらいは受け付けようと思っていますので、気軽にご連絡ください。</p>

<h2>NLTHTTPStubServerって何</h2>

<p>簡単に言えば、レスポンス登録を動的にできるHTTPサーバー for iOSです。
HTTP通信をするiOSアプリはたくさんあると思うのですが、これのテストを書く為に開発されました。</p>

<p>仕組みとしては結構単純で、ローカルにHTTPサーバーを立てて、そこにレスポンスを登録し、アプリ(HTTPClient)でそこへアクセスする、という感じです。
例えば <code>/api/v1/fake</code> は <code>fake.json</code> を返してほしい、というケースであれば、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[[[</span><span class="n">server</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">forPath:</span><span class="s">@&quot;/api/v1/fake&quot;</span><span class="p">]</span> <span class="nl">andJSONResponseResource:</span><span class="s">@&quot;fake&quot;</span> <span class="nl">ofType:</span><span class="s">@&quot;json&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>という風に記述すると、クライアントからここにアクセスしたときに、<code>fake.json</code>が返されます。
NSURLConnectionを使って書くと、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSURL</span> <span class="o">*</span><span class="n">api</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://localhost:12345/api/v1/fake&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">NSURLConnection</span> <span class="nl">sendAsynchronousRequest:</span><span class="p">[</span><span class="n">NSURLRequest</span> <span class="nl">requestWithURL:</span><span class="n">api</span><span class="p">]</span>
</span><span class='line'>                                   <span class="nl">queue:</span><span class="p">[[</span><span class="n">NSOperationQueue</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span>
</span><span class='line'>                       <span class="nl">completionHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLResponse</span> <span class="o">*</span><span class="n">res</span><span class="p">,</span> <span class="n">NSData</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                         <span class="c1">// dataに fake.json が返ってくる</span>
</span><span class='line'>                       <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>このように<code>http://localhost:12345/api/v1/fake</code>へアクセスすると、<code>fake.json</code>が返ってきます。</p>

<p>カテゴリを使ってレスポンスを入れ替えたりするライブラリなんかもありますが、それと比べて、副作用が起こりにくいのが特徴です。
またモックを差し込む、という行為を必要とせず、APIのエンドポイントを入れ替えるだけでよいので、実装自体に手をいれる必要もほとんどありません。</p>

<h2>セットアップ</h2>

<p>Cocoapodsでのセットアップが簡単です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">pod</span> <span class="err">&#39;</span><span class="n">NLTHTTPStubServer</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>NLTHTTPStubServer.h</code>をインポートして使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;NLTHTTPStubServer&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>機能</h2>

<h3>サーバーの取得</h3>

<p>テスト用サーバーは <code>sharedServer</code> でインスタンスを取得することができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NLTHTTPStubServer</span> <span class="o">*</span><span class="n">server</span> <span class="o">=</span> <span class="p">[</span><span class="n">NLTHTTPStubServer</span> <span class="n">sharedServer</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>clear</code>で登録されているレスポンスをすべて削除し、綺麗な状態にすることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="n">server</span> <span class="n">clear</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>tearDown</code>などでお使いください。</p>

<h3>expect / stub /verify</h3>

<p>0.2.x まででサポートされていた<code>stub</code>が廃止されました。<code>stub</code>というAPIは存在しますが、動作が異なっています。</p>

<h4>expect</h4>

<p><code>expect</code>はレスポンスを登録する一般的な方法です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[[</span><span class="n">server</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">forPath:</span><span class="s">@&quot;/path&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>このように記述すると、<code>/path</code>へレスポンスが登録されます。
これに対して、メソッドチェインの形式で、必要なものを付加していきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[[[</span><span class="n">server</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">forPath:</span><span class="s">@&quot;/api/v1/fake&quot;</span><span class="p">]</span> <span class="nl">andJSONResponseResource:</span><span class="s">@&quot;fake&quot;</span> <span class="nl">ofType:</span><span class="s">@&quot;json&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>expect</code>で登録されたレスポンスは、一度アクセスを受けてそれが返されると、自動的に消化さた状態になります。
<code>/path</code>へ二度アクセスしても、レスポンスは返されません。(例外が投げられます。)</p>

<h4>verify</h4>

<p><code>expect</code>されたものは、<code>verify</code>によって、それが利用されたかを検証することができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[[</span><span class="n">server</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">forPath:</span><span class="s">@&quot;/path&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// http://localhost:12345/path へアクセスするコード</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">server</span> <span class="n">verify</span><span class="p">];</span> <span class="c1">// /path へきちんとアクセスされているかを検証</span>
</span></code></pre></td></tr></table></div></figure>


<h4>stub</h4>

<p><code>stub</code>は<code>expect</code>と同じインターフェイスを持ちますが、永続的に登録されるレスポンスです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[[</span><span class="n">server</span> <span class="n">stub</span><span class="p">]</span> <span class="nl">forPath:</span><span class="s">@&quot;/path&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは <code>http://localhost:12345/path</code> へアクセスを受けそれが返されても、<strong>消化された状態になりません</strong>。
また、<code>verify</code>による検証では、<code>stub</code>で登録されたものは<strong>無視されます</strong>。</p>

<h3>NLTPath</h3>

<p><code>NLTPath</code>は複雑なURLを表現するために使われる物で、現状では特にGETパラメーターに対応するための機能です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[[</span><span class="n">server</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">forPath:</span><span class="p">[</span><span class="n">NLTPath</span> <span class="nl">pathWithPathString:</span><span class="s">@&quot;/fake&quot;</span> <span class="nl">andParameters:</span><span class="err">@</span><span class="p">{</span>
</span><span class='line'>        <span class="s">@&quot;k1&quot;</span> <span class="o">:</span> <span class="s">@&quot;v1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">@&quot;k2&quot;</span> <span class="o">:</span> <span class="s">@&quot;v2&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">}]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>このような記述をした場合、このレスポンスは <code>/fake?k1=v1&amp;k2=v2</code> または <code>/fake?k2=v2&amp;k1=v1</code> にマッチします。</p>

<h4>anyValue</h4>

<p><code>[NLTPath anyValue]</code>を使う事で、値部分をワイルドカードにすることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[[</span><span class="n">server</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">forPath:</span><span class="p">[</span><span class="n">NLTPath</span> <span class="nl">pathWithPathString:</span><span class="s">@&quot;/fake&quot;</span> <span class="nl">andParameters:</span><span class="err">@</span><span class="p">{</span>
</span><span class='line'>        <span class="s">@&quot;k1&quot;</span> <span class="o">:</span> <span class="p">[</span><span class="n">NLTPAth</span> <span class="n">anyValue</span><span class="p">]</span>
</span><span class='line'><span class="p">}]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは、<code>/fake?k1=hogeeeeeeee</code> や <code>/fake?k1=fugaaaaaaaaaa</code> にマッチします。</p>

<h3>付加可能な項目</h3>

<p>メソッドチェインにより付加できる事ができる項目は以下です。</p>

<h4>HTTP Method</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[[</span><span class="n">server</span> <span class="n">stub</span><span class="p">]</span> <span class="nl">forPath:</span><span class="s">@&quot;/fake&quot;</span> <span class="nl">HTTPMethod:</span><span class="s">@&quot;Post&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Status code</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[[[</span><span class="n">server</span> <span class="n">stub</span><span class="p">]</span> <span class="nl">forPath:</span><span class="s">@&quot;/fake&quot;</span><span class="p">]</span> <span class="nl">andStatusCode:</span><span class="mi">200</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Simulate waiting</h4>

<p>タイムアウトなどを再現することができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[[[</span><span class="n">server</span> <span class="n">stub</span><span class="p">]</span> <span class="nl">forPath:</span><span class="s">@&quot;/fake&quot;</span><span class="p">]</span> <span class="nl">andProcessingTime:</span><span class="mf">10.0f</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Checking POST body</h4>

<p>POSTされた内容を調べる事が出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[[[</span><span class="n">server</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">forPath:</span><span class="s">@&quot;/fake&quot;</span> <span class="nl">HTTPMethod:</span><span class="s">@&quot;POST&quot;</span><span class="p">]</span> <span class="nl">andCheckPostBody:</span><span class="o">^</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="n">postBody</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span><span class="n">postBodyString</span> <span class="o">=</span> <span class="p">[</span><span class="n">that</span> <span class="nl">toString:</span><span class="n">postBody</span><span class="p">];</span>
</span><span class='line'>        <span class="n">GHAssertEqualStrings</span><span class="p">(</span><span class="n">postBodyString</span><span class="p">,</span> <span class="s">@&quot;POST_BODY&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Supporting Content-Types</h4>

<p>自動的にContentTypeを付加してくれるものは以下です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[[[</span><span class="n">server</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">forPath:</span><span class="s">@&quot;/fake&quot;</span><span class="p">]</span> <span class="n">and</span><span class="p">{</span><span class="n">ContentType</span><span class="p">}</span><span class="n">Response</span><span class="p">...]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>JSON</li>
<li>HTML</li>
<li>XML</li>
<li>Plain Text</li>
<li>Binary

<ul>
<li>application/octet-stream</li>
</ul>
</li>
</ul>


<p>カスタムのContent-Typeは、<code>andContentTypeHeader</code>によって付加することができます。</p>

<h2>バグなどの報告</h2>

<p><a href="https://github.com/yaakaito/NLTHTTPStubServer/issues">Github Issue</a>で受け付けています。(日本語可)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVCにpを挟んでMpVCにすれば結構うまくいくのではと考えてみたログ]]></title>
    <link href="http://yaakaito.org/blog/2013/04/17/thinking-mpvc-pattern/"/>
    <updated>2013-04-17T02:33:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/17/thinking-mpvc-pattern</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
誤解を生んでもあれなので最初に書いておくとただの戯れ言です。
もしかしたら僕が勘違いしているor知らないだけで、既存のものが当てはまっているかも知れないので、あったら教えてください。</p>

<p>クライアントアプリとか作るときに、大体の場合MVCパターンが付きまとうと思うんですが、
MVCってどうしてもどこかに(多分主にView)しわ寄せが発生してるよなー的な。</p>

<p>多分みんなModelを一番綺麗に保ちたいなーと思っているはずなので、
Modelのプロパティによってビューの表示が大きく変わる時に、どうしてもビューに <code>if hogehoge</code> みたいなことを書かないといけない。
入力必須のフォームに入力してなかったら赤になる、とかも突き詰めればそういう感じだと思うし、それをやった結果Viewが残念な状態になっていくわけですね、南無。</p>

<p>で、MVVMとか流行って？ますが、あれは相当意識を高く保たないと書き続けられないなーと思っていて、
チームとして運用していくことを考えた場合、常にそうにはなれないので、ちょっと微妙だなーとなってしまう訳です。</p>

<p>結局のところMVCが分かりやすいというか、説明も楽というか、多分一番触れやすいだろうなーというところが大きい。
んで、それでやっていくと、最初は大体うまく行くと思うんですが、残念ながら徐々に無念は生成されていきます。</p>

<p>そこでPMパターンとかMVPパターンというのがあるわけなのですが、これのP(resentaion|resentator)の部分をもっと単純なものにしてしまって、
最初っから無念をそこに集めればまあ、わりと長持ちするのでは、と考えてみた。</p>

<p>例えば上の例のフォームを赤にするみたいなのは、Pのレイヤーでもう<code>form_background</code>とか作ってしまうイメージ。(実際にはやらないでくださいね。)</p>

<p>というか多分これって結構な人がやってるんじゃないかなーと思うんだけど、どうなんだろ。</p>

<h2>実装的な話</h2>

<p>Viewがレンダリングするときに、対応するModelを、Presentationでラップして使う、的な感じかな。
必要なのはレンダリングするときだと思うので、View <-> Model の紐付けとかは従来通りでよいのでは。
イベントのハンドリングみたいのもControllerがやる、あくまで出す時だけに焦点を絞る。</p>

<p>Presentationはもう負債を全部飲み込む勢いでいいと思う。そして分かりやすく残念な感じで書けばいい。
Presentaionはパターンの主体として存在させるものではなくて、単なる変換関数くらいに考える。</p>

<p>Viewに対するプロパティがModelの分と、Presentationが生んだ分とでかなり数が大きくなってしまうが、
それでもテンプレートに<code>if</code>と書いてあるよりは大分マシだと思う。</p>

<p>テストのことを考えたときも、これで少なくともModelとControllerは無念を見ずに単純なコードが書けそうな感じする。
レンダリングとかは単体テスト書いてる上では、言っちゃあ悪いがそこまで気を使う場所ではないと思うし、
逆にそこのテストはPresentaionをテストすることで大分楽が出来そう。</p>

<h2>おわり</h2>

<p>pを小文字にしたのはそこまで出しゃばってほしくない的な意味を込めてですかね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoffeeLintの設定をやってみるなど]]></title>
    <link href="http://yaakaito.org/blog/2013/04/16/coffee-lint-setting/"/>
    <updated>2013-04-16T01:32:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/16/coffee-lint-setting</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
<a href="http://www.coffeelint.org/">CoffeeLint</a>の設定をしてプロジェクトに幸せをもたらそう(コーディング規約にそってないプルリクはリジェクト)としてちょっと調べてみたのでメモ。</p>

<h2>コンフィグファイルを作る</h2>

<p>公式サイトいわく</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ coffeelint --makeconfig</span></code></pre></td></tr></table></div></figure>


<p>すると設定ファイルのテンプレが作れるらしい！やってみよう！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ coffeelint --makeconfig
</span><span class='line'>Usage: coffeelint [options] source [...]
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  -f, --file     Specify a custom configuration file.             
</span><span class='line'>  -h, --help     Print help information.                          
</span><span class='line'>  -v, --version  Print current version number.                    
</span><span class='line'>  -r             Recursively lint .coffee files in subdirectories.  [boolean]
</span><span class='line'>  --csv          Use the csv reporter.                              [boolean]
</span><span class='line'>  --jslint       Use the JSLint XML reporter.                       [boolean]
</span><span class='line'>  --nocolor      Don't colorize the output                          [boolean]
</span><span class='line'>  -s, --stdin    Lint the source from stdin                         [boolean]
</span><span class='line'>  -q, --quiet    Only print errors.                                 [boolean]</span></code></pre></td></tr></table></div></figure>


<p>やったーそんなコマンドないよーーーーーー＾ー＾
5.5(2013.03.02~)かららしいです</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm search coffeelint
</span><span class='line'>// ...
</span><span class='line'>coffeelint  Lint your CoffeeScript  =clutchski =thomas.frossman 2012-11-30 ...</span></code></pre></td></tr></table></div></figure>


<p>やったーアップデートされてないよーーーーー＾ー＾</p>

<h2>しょうがないのでlinkします</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git://github.com/clutchski/coffeelint.git .coffeelint
</span><span class='line'>$ cd .coffeelint
</span><span class='line'>$ npm link</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ coffeelint -v
</span><span class='line'>0.5.4</span></code></pre></td></tr></table></div></figure>


<p>やったー5.4だよーーーーー＾ー＾</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ coffeelint --makeconfig
</span><span class='line'>{
</span><span class='line'>    "no_tabs": {
</span><span class='line'>        "level": "error"
</span><span class='line'>    },
</span><span class='line'>    "no_trailing_whitespace": {
</span><span class='line'>        "level": "error"
</span><span class='line'>    },
</span><span class='line'>    "max_line_length": {
</span><span class='line'>        "value": 80,
</span><span class='line'>        "level": "error"
</span><span class='line'>    },
</span><span class='line'>    // ....</span></code></pre></td></tr></table></div></figure>


<p>でもでたよやったーーーーーー＾ー＾ バージョンあげてーーーー＾ー＾</p>

<h2>書いてみた</h2>

<p>どうやら差分だけ書けば良さげなので、こんな感じで</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "max_line_length" : {
</span><span class='line'>    "value": 79,
</span><span class='line'>    "level" : "error"
</span><span class='line'>  },
</span><span class='line'> 
</span><span class='line'>  "indentation" : {
</span><span class='line'>    "value" : 4,
</span><span class='line'>    "level" : "error"
</span><span class='line'>  },
</span><span class='line'> 
</span><span class='line'>  "no_implicit_parens" : {
</span><span class='line'>    "level" : "error"
</span><span class='line'>  },
</span><span class='line'> 
</span><span class='line'>  "no_plusplus" : {
</span><span class='line'>    "level" : "error"
</span><span class='line'>  },
</span><span class='line'> 
</span><span class='line'>  "no_stand_alone_at" : {
</span><span class='line'>    "level" : "error"
</span><span class='line'>  }
</span><span class='line'> 
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>設定項目は公式サイトに書いてあるのでそちらを参考にしていただきたく。
けど、何個か動いてないのとおかしい気がするよ！！！</p>

<p>軽く書いておくと</p>

<ul>
<li><p><code>max_line_length</code> :
一行の文字数で、デフォルトは80だけど、79にしました。まあこれは好みの問題ですね。</p></li>
<li><p><code>indentation</code> :
2だと見難い場面が多いので僕は最近4にしてます。</p></li>
<li><p><code>no_implicit_parens</code> :
関数呼び出すときとかに<code>()</code>を省略できなくする。0個のときはどうせ必要だし、僕はある方にそろえるのが好きですかね。
BDD系のフレームワーク使うときはこれが邪魔なので、テストだけ別にしてますというかテストは別にlint通してないですね。</p></li>
<li><p><code>no_plusplus</code> :
<code>++</code> と <code>--</code> を無効にする。あんまり好きではない。</p></li>
<li><p><code>no_stand_alone_at</code> :
関数とかに <code>f @</code> みたいに渡せないようにする。暗黙のリターンも同じ</p></li>
</ul>


<p>とりあえずこんな感じ。</p>

<h2>実行</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ coffeelint -f config.json hoge.coffee</span></code></pre></td></tr></table></div></figure>


<h2>暗黙のりたーん</h2>

<p>なんで暗黙の<code>return</code>を無効にするオプションがないのかよくわからないですね。
暗黙の<code>return</code>使いたくない人なので、これ設定できるようにしてほしいとお願いしてみる。</p>

<p>あと<code>no-try-catch</code>とかもほしいですね。
なにやらCoffeeScriptの<code>try</code>は、<code>try</code>だけ書くと</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">try</span>
</span><span class='line'>    <span class="nx">hoge</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>これが</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">hoge</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span><span class="p">()</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>となるようです。ナイスキャッチ！ (- o ^)b</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScriptの似非オーバーロードが気に入らない]]></title>
    <link href="http://yaakaito.org/blog/2013/04/11/javascript-overload/"/>
    <updated>2013-04-11T22:36:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/11/javascript-overload</id>
    <content type="html"><![CDATA[<p>【補足】あんまり良い文章ではないので、僕はこう思ってるよ、くらいで読んでください。</p>

<p>こんにちは！うきょーです。
なんかJavaScriptで似非オーバーロードとか省略可能引数使う人結構いますよね。かっこいいですか、そうですか。
僕これ嫌いなんで、書いておこうと思います。</p>

<h2>実際によくあるコード</h2>

<p>こういうコードがよくありますかね、Backboneとかでも<code>Events.off</code>とかがこうなってます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// aを使った処理</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 引数がないと判定された時の処理</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>他にも、引数によって挙動が違うのたくさんありますよね、jQueryとかjQueryとかjQueryとか。</p>

<h2>まずもって間違っている</h2>

<p>上の例の場合、<code>f()</code> と <code>f(undefined)</code> を区別する事は出来ません。
<code>f()</code> で期待される挙動は <code>f(undefined)</code> で期待される挙動とは、異なるはずですよね。</p>

<p>これは<code>arguments</code>を見る事である程度解決できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">argument</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 引数がないときの処理</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// その他</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この件に関して、ちょうどSpineのコードを読んでいて、イラッとしたのでプルリクしました。
無事にdevにマージされたみたいなので良かったですね。</p>

<h3>【補足】勘違いのないように</h3>

<p>@kazuhoさんからこんなコメントをもらって、確かにそう読めると思ったので補足する。</p>

<blockquote><p>正論なんだけど、それ以前に、そもそも引数としてundefined渡すのが間違い。null使うべき</p><footer><strong>@kazuho</strong> <cite><a href='https://twitter.com/kazuho/status/322496581867810816'>twitter.com/kazuho/status/&hellip;</a></cite></footer></blockquote>


<p>これは、<code>f()</code>と<code>f(hoge)</code>で挙動が違うことを前提にしているのであれば、その実装は正確には間違っている(<code>f(undefined)</code>も引数一つとして扱われるべき)、という主張です。
<code>undefined</code>を使って書いているのは、省略されたときにその引数は<code>undefined</code>になるのだから、
その方が問題としていることが分かりやすいだろう、という意図があってです。</p>

<p>@kazuhoさんがおっしゃっているように、そもそも<code>undefined</code>を入れない事が前提があって、
だから<code>undefined</code>であると判定することにメリットがある、というのはもちろんその通りだと思います。</p>

<p>単純に、僕が嫌だなーと思っていることなので、そこで勘違いが起こってしまっても意味はないなと思うので、補足しました。</p>

<h2>挙動を変えないでください</h2>

<p>そもそも同じ関数で複数の挙動を持つなと言いたい。
少なくとも僕は、そんな挙動を信じられるほど頭がよくない。</p>

<p>jQueryでよくあるけど、<code>$</code>がいろいろ出来すぎて、XSS出してますよね。</p>

<p>他にも、省略することで返ってくるもののスコープが大きくなっていく関数とかよくありますよね、嫌いです。</p>

<h2>別にかっこよくも見やすくもないです</h2>

<p>なんでこうやってるのか知らないですけど、ダサいと思ってます。
<code>off</code>とか、<code>offAll</code>と<code>off</code>に分けてもらった方が分かりやすいです。
<code>$</code>もセレクトだけでいいです。作らないでください。</p>

<h2>省略可能引数はオブジェクトを渡してください</h2>

<p>省略可能引数は、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">c</span> <span class="o">:</span> <span class="nx">c</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">d</span> <span class="o">:</span> <span class="nx">d</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>という形式で書かれるべきです。</p>

<h2>挙動が異なる関数は分けください</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$select</span><span class="p">();</span>
</span><span class='line'><span class="nx">$create</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>とか</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">elem</span><span class="p">.</span><span class="nx">html</span><span class="p">();</span>
</span><span class='line'><span class="nx">elem</span><span class="p">.</span><span class="nx">setHtml</span><span class="p">()</span><span class="o">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>とか</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Events</span><span class="p">.</span><span class="nx">unbind</span><span class="p">();</span>
</span><span class='line'><span class="nx">Events</span><span class="p">.</span><span class="nx">unbindAll</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>にしてください。</p>

<p>どっちの方が挙動を推測しやすいかは一目瞭然だと思いますし、僕はコードゴルフがしたいわけじゃありません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[世の中のサンプルがTODOアプリなのは案外理にかなってる気がした]]></title>
    <link href="http://yaakaito.org/blog/2013/04/04/todo-is-good-app/"/>
    <updated>2013-04-04T10:02:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/04/todo-is-good-app</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
最近いろいろJavaScriptフレームワークのサンプルを見るんですが、Todoアプリだらけで飽きてきました！！！！
というかTodoMVCがそもそもTodoだし、世の中にはTodoアプリがあふれすぎている、もっと面白いの、例えば御坂美琴サーチとかはよ！と思ってたんですが、
風呂にはいって考えてみたら、結構Todoアプリは理にかなってる気がしたので、メモる。</p>

<p>わりとどうでもいいことしか書いてないです。</p>

<h2>大抵のTodoアプリの仕様</h2>

<ul>
<li>タスクを入力する</li>
<li>タスクがリストに追加される</li>
<li>チェックをトグルできる</li>
<li>リストにはいったタスクを編集できる</li>
</ul>


<p>こんな感じか</p>

<h2>実にただしい・・・</h2>

<p>まず</p>

<h3>タスクを入力する</h3>

<p>ユーザー入力のハンドリングと、モデル化のフロー、生成イベントの発行、保存あたりを表現する。</p>

<p>イベントの受け取り方はUIを書くなら付きまとうし、最初に知らなきゃいけないところと言っても良い。
そして大抵の場合、空だった場合はタスクとして認識しないというバリデーションを挟んでいる。
大体合わせて5~10行くらいのコードだと思うんだけど、この10行は強い・・・。</p>

<p>そのあと、そのデータをアプリケーション内でどう扱うか、というところを提示する。
生で扱っちゃ駄目よ、とクラスにラップするような処理があったりする場合も多いし、作法が読み取れる、すごい。</p>

<p>さらにそれを生成した、というイベントをリスナーに通知する、この辺のパターンはUI書くならキモになってくる部分だし、すごい、簡潔に表現されている・・・。</p>

<p>そして保存する。JavaScriptだとLocalStorageが多いけど、サーバーに送ったりとか、iOSならCoreDataに保存する見たいなサンプルにちゃんとなってる・・・。</p>

<h3>タスクがリストに追加される</h3>

<p>リストビューあたりを表現する。</p>

<p>リストビューみたいなのはよく使うパターンだし、それをちゃんとやってる、すごい。
コレクション的なものの使い方も分かってくるし、おそらく一番使うUIパターンだし、シンプルなのでわかりやすい。</p>

<p>あとはここで簡単なフィルター機能とかがつくと、ちょっとロジカルなコードも表現される。TodoMVCもたしかにそれがあった。</p>

<h3>チェックをトグルできる</h3>

<p>モデルに対するアップデートと、それに付随するUIのアップデート、その通知の仕組み。</p>

<p>ただの一個のboolですべてを表現したぞ、すごい！</p>

<h3>リストにはいったタスクを編集できる</h3>

<p>リストビューの中にある、個々のコンポーネントに対してどのようにハンドリングを行うかが分かる。(まあ上のやつもそれをちょっと含んでいるんだけど)</p>

<p>この辺ってわりと面倒くさいところで、それをどういう風に解決しているのか見れる。なるほど。
ここが気に入るか気に入らないかは結構大切だなーと思うので、一発で把握できてよい。</p>

<h2>まだまだ要素はありそう</h2>

<p>というわけでTodoアプリはすごかった！飽きたとか言ってすまんかった！！！！
このあたりの要素を、この規模で、綺麗に表現しきれるアプリが他に思いつかないのは事実としてある。(せいぜいメモアプリに名称変更するくらい)</p>

<p>「サンプルアプリ作りましょう、Todoとか」じゃなくて、「Todo相当のサンプルアプリを作りましょう」だった。</p>

<h2>まとめ</h2>

<p><a href="http://www.project-railgun.net/">Sはよ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SublimeText入れたあとにやること]]></title>
    <link href="http://yaakaito.org/blog/2013/04/04/sublime-text-setup/"/>
    <updated>2013-04-04T05:34:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/04/sublime-text-setup</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
ずいぶん前にVimからSublimeTextに変えたんですが、設定覚えられないので、いれたらやることのメモです。</p>

<p>バージョン番号とかは適当に補完して読んでください。</p>

<h2>Package Control 入れる</h2>

<p>とりあえずないと始まらないので入れます。</p>

<p><a href="http://wbond.net/sublime_packages/package_control/installation">Sublime Package Control : Installation</a></p>

<p>control+` でコンソールを呼びます。そして流し込みます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span><span class="o">,</span><span class="nn">os</span><span class="p">;</span> <span class="n">pf</span><span class="o">=</span><span class="s">&#39;Package Control.sublime-package&#39;</span><span class="p">;</span> <span class="n">ipp</span><span class="o">=</span><span class="n">sublime</span><span class="o">.</span><span class="n">installed_packages_path</span><span class="p">();</span> <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">ipp</span><span class="p">)</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">ipp</span><span class="p">)</span> <span class="k">else</span> <span class="bp">None</span><span class="p">;</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">ProxyHandler</span><span class="p">()));</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">ipp</span><span class="p">,</span><span class="n">pf</span><span class="p">),</span><span class="s">&#39;wb&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="s">&#39;http://sublime.wbond.net/&#39;</span><span class="o">+</span><span class="n">pf</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">,</span><span class="s">&#39;%20&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">read</span><span class="p">());</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;Please restart Sublime Text to finish installation&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>キーバインドを変える</h2>

<p>変えます。といってもそんなに変えません。</p>

<p>まず、Macの方のSystem Preferencesから(こっちからやるのが重要)、キーバインドに <code>Command+Option+Q</code>で<code>Quit Sublime Text</code>するようにします。
こうするとcmd+Qで間違って殺してしまう心配もなくなりますし、Sublime Textが<code>Command+Option+Q</code>を使っているので、実質死ななくなります。</p>

<p>え、死ななくなっても困らないですよね？それよりミスって殺さない事の方が大事っていうか・・・。(僕はAppCodeとかXcodeとかChromeとかもこうなってる)</p>

<p>もっとも重要なキーバインドを変えたので、残りを変えます。こっちはSublime Textから。</p>

<p>Preferences -> Key Bindings - User を開いて</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span> <span class="s2">&quot;keys&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;super+shift+p&quot;</span><span class="p">],</span> <span class="s2">&quot;command&quot;</span><span class="o">:</span> <span class="s2">&quot;show_overlay&quot;</span><span class="p">,</span> <span class="s2">&quot;args&quot;</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;overlay&quot;</span><span class="o">:</span> <span class="s2">&quot;goto&quot;</span><span class="p">,</span> <span class="s2">&quot;show_files&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">}</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s2">&quot;keys&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;super+p&quot;</span><span class="p">],</span> <span class="s2">&quot;command&quot;</span><span class="o">:</span> <span class="s2">&quot;show_overlay&quot;</span><span class="p">,</span> <span class="s2">&quot;args&quot;</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;overlay&quot;</span><span class="o">:</span> <span class="s2">&quot;command_palette&quot;</span><span class="p">}</span> <span class="p">},</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>として Command Palette と Goto を入れ替えます。これで Command+P でコマンド打てるようになります。便利ですね。(圧倒的にこっちのほうが使うので)</p>

<h2>パッケージを取りにいく</h2>

<p>あんまりいれてないですけどね！テーマとかもまとめてとります。</p>

<p>Command+P -> Package Controll : Install Package</p>

<ul>
<li>Phoenix theme</li>
<li>TypeScript</li>
<li>CoffeeScript</li>
<li>jQuery</li>
<li>Markdown Preview</li>
</ul>


<p>あとはス二ペットとか、使う物によると思うけど、最近いれたのは</p>

<ul>
<li>jQuery</li>
<li>Mocha</li>
<li>Backbone</li>
</ul>


<p>とか。すきなの入れればいいと思う。スニペットも Command+P からそれっぽく呼び出せる。</p>

<h2>テーマの設定する</h2>

<p>さっきとってきた Phoenix theme をあてる。</p>

<p>Preferences -> Settings - User に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;color_scheme&quot;</span><span class="o">:</span> <span class="s2">&quot;Packages/Theme - Phoenix/Color Scheme/Tomorrow-Night.tmTheme&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;font_size&quot;</span><span class="o">:</span> <span class="mf">14.0</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;phoenix_color_expanded_folder&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;phoenix_color_orange&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;phoenix_dirty_bottom_bar&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;phoenix_dirty_bottom_bar_red&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;phoenix_highlight_current_tab&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;phoenix_sidebar_tree_large&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;theme&quot;</span><span class="o">:</span> <span class="s2">&quot;Phoenix Dark.sublime-theme&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで書いておわり。</p>

<p>やってるのは上からカラースキームの設定、フォントサイズの設定、あとはPhoenix themeの設定。</p>

<h2>インデントとか調整する</h2>

<p>こっちは</p>

<p>Preferences -> Settings - Defaults でやっていいと思う。どうせ変えない。</p>

<p>デフォルト覚えてないけど多分、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Set to true to turn spell checking on by default</span>
</span><span class='line'><span class="s2">&quot;spell_check&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The number of spaces a tab is considered equal to</span>
</span><span class='line'><span class="s2">&quot;tab_size&quot;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set to true to insert spaces when tab is pressed</span>
</span><span class='line'><span class="s2">&quot;translate_tabs_to_spaces&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>このあたり設定すれば、他のめぼしいのは全部ついてるはず。</p>

<h2>Markdown pluginを複製する</h2>

<p>Preference -> Browse Packages&#8230; を選択するとディレクトリが開くので、ここでmarkdownをおもむろに複製する。
で、これをMarkdownJPとかにしておく。<code>.tmLanuage</code>を開いて、JPのサフィックスを付ける。</p>

<p>なんでやるかって、スペルチェックのせいさ！</p>

<h2>言語毎に設定変える</h2>

<p>変え方は、エディターで対象を適用した状態で、 Preferences -> Settings - More -> Syntax Specific。</p>

<h3>MarkdownJP</h3>

<p>さっき設定した<code>spell_check</code>はブログとか書くmarkdownモードだと日本語が警告されまくってうざいのでJPの方は消す。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;spell_check&quot;</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>普通の方はREADMEとかも書くのでそのまま。日本語書く時だけスイッチする。</p>

<h3>JavaScript, CoffeeScript</h3>

<p>この二つだけインデントを4にする。(ネストしだすと見にくい)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;tab_size&quot;</span> <span class="o">:</span> <span class="mi">4</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ファイル開いたときは空気読んでこのあたりを設定してくれるので安心ですね。</p>

<h2>エイリアスを設定する</h2>

<p>open経由で開けるようにする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">alias</span> <span class="nx">sb</span><span class="o">=</span><span class="s2">&quot;open -a Sublime\Text&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">cd</span> <span class="nx">hoge</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">sb</span> <span class="p">.</span> <span class="c1">// SublimeがFoldersにカレントセットした状態で開くヤッターーーーーー！！！</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>おわり</h2>

<p>Sublime Text良いですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[半周遅れでBower使ってみる]]></title>
    <link href="http://yaakaito.org/blog/2013/04/02/hello-bower/"/>
    <updated>2013-04-02T02:12:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/02/hello-bower</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！curlしにいくのがだるいです。
そういや<a href="http://twitter.github.com/bower/">bower</a>ってあったなと思ったので試してみたメモ。といってもまだ使ってみたレベルなので使い方くらいです。</p>

<h2>bower をインストール</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install -g bower</span></code></pre></td></tr></table></div></figure>


<p>やりましたね！</p>

<h2>どんな品揃えかみてみる</h2>

<p><code>search</code>を引数なしでやると全部出てきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bower search</span></code></pre></td></tr></table></div></figure>


<p>ドドドドドドドーーーー！！！ときて僕のScrollback Linesが足りなくなりました。行数でも数えてみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bower search | wc -l
</span><span class='line'>1505</span></code></pre></td></tr></table></div></figure>


<p>すごい！むかし30個くらいしかなかった気がする！！！
jQuery PlugingとかBackboneの拡張とか、Angularの拡張はたくさんありました。(関係ないけどBackboke Pluginとか名前になってるか分からないのでこう書いてる)</p>

<p>で、大体有名どころとそのプラグインはあるし、<code>npm</code>も組み合わせればほとんど大丈夫だろなーという感じでした。</p>

<h2>使ってみる</h2>

<p>大体npmと似たような感じで使います。例えばjQueryほしいなーと思ったら、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bower install jquery</span></code></pre></td></tr></table></div></figure>


<p>これで <code>components</code> というディレクトリが出来るので、ここにjQueryが入ってます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tree
</span><span class='line'>.
</span><span class='line'>└── components
</span><span class='line'>    └── jquery
</span><span class='line'>        ├── component.json
</span><span class='line'>        ├── composer.json
</span><span class='line'>        ├── jquery-migrate.js
</span><span class='line'>        ├── jquery-migrate.min.js
</span><span class='line'>        ├── jquery.js
</span><span class='line'>        └── jquery.min.js</span></code></pre></td></tr></table></div></figure>


<p>npmでいうところの<code>node_modules</code>ですね。あとはほしいものをどんどん突っ込んでいけば</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bower install jasmine
</span><span class='line'>$ bower install backbone
</span><span class='line'>$ tree -L 2
</span><span class='line'>.
</span><span class='line'>└── components
</span><span class='line'>    ├── backbone
</span><span class='line'>    ├── jasmine
</span><span class='line'>    └── jquery</span></code></pre></td></tr></table></div></figure>


<p>という感じに揃っていきます。便利ですね。</p>

<h2>component.json</h2>

<p>npmで言うところの<code>package.json</code>ですね。中身もほぼ一緒です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "name" : "thogehoge",
</span><span class='line'>  "version" : "0.0.0",
</span><span class='line'>  "dependencies" : {
</span><span class='line'>    "backbone" : "~1.0.0",
</span><span class='line'>    "jquery" : "~1.9.1",
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>みたいに書いておいて、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bower install</span></code></pre></td></tr></table></div></figure>


<p>すれば<code>dependencies</code>が全部<code>components</code>に入ります。</p>

<h2>便利そうかどうか</h2>

<p>まあ便利なんじゃないでしょうか、ロードするときにパスが長くなるのがちょっと面倒くらいですね。
この辺は多分<code>git clone</code>してきてるだけなので、元のリポジトリ依存っぽいような臭いがします。(たいして調べてないのでテキトーです。)</p>

<p>ただでさえ汚くなりがちなJavaScriptのリポジトリですが、<code>components</code>をgitignoreしておけばちょっとは綺麗になりそうですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MagicalRecordの始め方忘れたので思い出しながら書く]]></title>
    <link href="http://yaakaito.org/blog/2013/04/01/magical-record-setup/"/>
    <updated>2013-04-01T00:49:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/01/magical-record-setup</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
<a href="https://github.com/magicalpanda/MagicalRecord">MagicalRecord</a>使うかーと思ったけど、やりかた覚えてなかったので書く！やっぱブログ書かないと駄目ですね。</p>

<h2>プロジェクト作る</h2>

<p><code>Use Core Data</code> をチェックする</p>

<h2>xcdatamodeldをいじる</h2>

<p>とりあえずサンプルとして</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Book:
</span><span class='line'>  name: string
</span><span class='line'>  bookId: integer 16
</span><span class='line'>  authors: [Author]
</span><span class='line'>
</span><span class='line'>Author:
</span><span class='line'>  name: string
</span><span class='line'>  type: string
</span><span class='line'>  book: [Book]</span></code></pre></td></tr></table></div></figure>


<p>という感じにした、<code>Book</code>と<code>Author</code>は一対多なので、<code>To-Many Relationship</code>を設定する。</p>

<p><img src="http://yaakaito.org/images/mr-to-many.png"></p>

<p><code>Class</code>とかも忘れずに設定する。</p>

<p><img src="http://yaakaito.org/images/mr-class.png" width="240"></p>

<h2>エンティティのモデルクラス作る</h2>

<p><a href="http://rentzsch.github.com/mogenerator/">mogenerator</a>を使うのが一般的っぽいですが、僕は別に使わなくていいかなーと思ってます。
というのも、mogeneratorって「自動生成されるやつだと変更したあとにマージが大変・・・、なのでCoreDataとビジネスロジックをカテゴリで分ける」的な使われ方をするのかなーと思ってるんだけど、それってそりゃそーじゃね、と思うのです。</p>

<p>僕は、CoreDataから出てきたものは、いうならJSON形式のレスポンスをそのまま<code>NSDicitionary</code>として使ってるのとそんなに違わないよなーと思っていて、なので内部的に<code>NSManagedObject</code>をもってるビジネスロジックを担当するクラスを作ればいいと思う。</p>

<p>とはいえただの決めの問題だし、どっちにしろmogenerator使えば楽出来ることに変わりはないと思うので、mogenerator使っときます。(ていうかこれじゃないと駄目なんだっけ？大丈夫だよね？)</p>

<p>(入ってない人は)<code>brew</code>でmogeneratorをインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install mogenerator</span></code></pre></td></tr></table></div></figure>


<p>mogeneratorが吐き出すクラスを入れるディレクトリなんかを作る。とりあえず <code>CoreData</code> とかにしておく。</p>

<p>準備したらmogeneratorでクラスを吐き出す。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mogenerator -m [YourCoreData].xcdatamodeld/[YourCoreData].xcdatamodel -O CoreData/ --template-var arc=true</span></code></pre></td></tr></table></div></figure>


<p>こんな感じ！ <code>--template-var arc=true</code> 付けないとARC用のコードが出てこないっぽいので注意。</p>

<h2>MagicalRecord入れる</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod `'MagicalRecord'</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pod install</span></code></pre></td></tr></table></div></figure>


<p>いい時代になりましたね。</p>

<h2>MagicalRecord使う</h2>

<p>インポートします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#define MR_SHORTHAND 1</span>
</span><span class='line'><span class="cp">#import &quot;CoreData+MagicalRecord.h&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>セットアップします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="n">MagicalRecord</span> <span class="nl">setupCoreDataStackWithStoreNamed:</span><span class="s">@&quot;YourCoreData.sqlite&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">MGBook</span> <span class="o">*</span><span class="n">book</span> <span class="o">=</span> <span class="p">[</span><span class="n">MGBook</span> <span class="n">createEntity</span><span class="p">];</span>
</span><span class='line'><span class="n">book</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;Objective-C&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">book</span><span class="p">.</span><span class="n">bookId</span> <span class="o">=</span> <span class="err">@</span><span class="p">(</span><span class="mi">123</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">context</span> <span class="n">saveToPersistentStoreAndWait</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>簡単ですね！</p>

<p>いつの間にか <code>MR_save</code> じゃなくて、<code>MR_saveToPersistentStoreAndWait</code> と <code>MR_saveToPersistentStoreWithCompletion:</code> になったんですね。こっちの方がいいと思います！！！！</p>

<h2>sqliteのビュアーとか</h2>

<p><a href="https://itunes.apple.com/jp/app/liya/id455484422?mt=12">Liya</a>がおすすめですかね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overline0.2.0とBlocksKit併用版を公開しました]]></title>
    <link href="http://yaakaito.org/blog/2013/03/30/overline-020-release/"/>
    <updated>2013-03-30T19:13:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/30/overline-020-release</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
Objective-C用ユーティリティ、<a href="https://github.com/yaakaito">Overline</a> 0.2.0を公開しました。0.1.5は6時間くらいの命でした。
同時に0.1.xで問題になっていたBlocksKitと一緒に使うとassertで死ぬ問題を回避した、Overline-BlocksKitを公開しています。</p>

<h2>BlocksKitと一緒に使う場合</h2>

<p>Overline-BlocksKitを利用します。Podfileはこんな感じ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod 'BlocksKit'
</span><span class='line'>pod 'Overline-BlocksKit'</span></code></pre></td></tr></table></div></figure>


<p>重複を解決するために、いくつかショートハンドのメソッドを削除しています。
削除されているのは、<code>NSArray</code> <code>NSDictionary</code> <code>NSSet</code> にある以下のメソッドです。</p>

<ul>
<li><code>each:</code></li>
<li><code>map:</code></li>
<li><code>reduce:memo:</code></li>
<li><code>filter:</code></li>
<li><code>reject:</code></li>
</ul>


<p>ショートハンドは削除されますが、Objective-Cっぽい方はそのまま使えます。このあたりはBlocksKitが実装してくれているので、そちらをご利用ください。</p>

<h2>追加された機能とか</h2>

<p>たらたらと紹介していきます。全部書くのはだるいので全部じゃないです。0.1.0から0.2.0までの変更のうちいろいろという感じです。</p>

<h3>NSArray arrayWithRange</h3>

<p>指定した範囲のNSArrayを作ります、NSNumber自体が使いにくいので、あんまり使わないですかね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithRangeFrom:</span><span class="mi">0</span> <span class="nl">to:</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'><span class="c1">// @[@0, @1, @2, @3, @4, @5, @6, @7, @8, @9]</span>
</span></code></pre></td></tr></table></div></figure>


<p>逆方向にも行けます</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">array2</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithRangeFrom:</span><span class="mi">0</span> <span class="nl">to:</span><span class="o">-</span><span class="mi">10</span> <span class="nl">step:</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="c1">// @[@0, @-2, @-4, @-6, @-8]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>NSArray uniqueObjects</h3>

<p>まんま、ユニークなものだけ返ってきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">uniqueObjects</span> <span class="o">=</span> <span class="p">[</span><span class="err">@</span><span class="p">[</span><span class="err">@</span><span class="mi">1</span><span class="p">,</span> <span class="err">@</span><span class="mi">2</span><span class="p">,</span> <span class="err">@</span><span class="mi">3</span><span class="p">,</span> <span class="err">@</span><span class="mi">1</span><span class="p">,</span> <span class="err">@</span><span class="mi">3</span><span class="p">,</span> <span class="err">@</span><span class="mi">4</span><span class="p">,</span> <span class="err">@</span><span class="mi">5</span><span class="p">]</span> <span class="n">uniqueObjects</span><span class="p">];</span>
</span><span class='line'><span class="c1">// @[@1, @2, @3, @4, @5]</span>
</span></code></pre></td></tr></table></div></figure>


<p>比較の部分をBlocksで書ける <code>uniqueObjectsUsingEqualsBlock:</code> もあります。</p>

<h3>その他NSArray</h3>

<p><code>subArray</code> <code>diffrence</code> <code>reversed</code> とかが地味に増えました。</p>

<h3>NSDictionary arrayMap</h3>

<p>そもそも<code>map</code>おかしくね？となって、追加した。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="err">@</span><span class="p">{</span>
</span><span class='line'>    <span class="s">@&quot;a&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s">@&quot;b&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="s">@&quot;c&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="s">@&quot;d&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="mi">4</span>
</span><span class='line'><span class="p">}</span> <span class="nl">mappedArrayUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="err">@</span><span class="p">([</span><span class="n">obj</span> <span class="n">integerValue</span><span class="p">]</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'><span class="c1">// @[@2,@4,@6,@8]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>NSDictionary objectForKey:transformBlock: pathForKey:</h3>

<p><code>objectForKey:</code>したあとに変換してーというのが面倒なので、Blocksでまとめられるようにしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSDate</span> <span class="o">*</span><span class="n">date</span> <span class="o">=</span> <span class="p">[</span><span class="n">JSON</span> <span class="nl">objectForKey:</span><span class="s">@&quot;date8601&quot;</span> <span class="nl">transformBlock:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSDateFormatter</span> <span class="o">*</span><span class="n">formatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSDateFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">formatter</span> <span class="nl">setDateFormat:</span><span class="s">@&quot;yyyy/MM/dd HH:mm:ss Z&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">formatter</span> <span class="nl">dateFromString:</span><span class="n">obj</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>とか、あとは<code>stringForKey:</code> <code>dateForKey:usingFormat:</code> <code>bookForKey:withTrueValue:</code> <code>integerForKey:</code> などもろもろ。多いのでREADMEかテストを見てください。</p>

<p><code>objectForPath:</code> は <code>hoge.fuga</code> みたいなので階層を辿れる。 <code>valueForKey</code> とか <code>valueForKeyPath</code> でも出来たはずだけど、本来その目的に使う物ではないはずなので、あんまり使っちゃ駄目だと思います。</p>

<p>こっちの<code>transform</code>とかの対応そういえばやってなかった・・・</p>

<p>多分大きめなのはこれくらいかと思います。はい。</p>

<h2>よろしくね！</h2>

<p><a href="https://github.com/yaakaito">Overline</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TypeScriptの紹介的なプレゼンした]]></title>
    <link href="http://yaakaito.org/blog/2013/03/30/typescript-introduction/"/>
    <updated>2013-03-30T01:26:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/30/typescript-introduction</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
勉強会っぽいものがあったので、せっかくなのでTypeScriptどうよ的な話した。
スライドはあくまで紹介程度に留めてて、どっちかと言えば後半のどうよ、どうよ的なやりとりが本体だったんですが、せっかくなのでSpeaker Deckにあげた。</p>

<script async class="speakerdeck-embed" data-id="f9ddb2607a740130222e12313809347f" data-ratio="1.33333333333333" src="http://yaakaito.org//speakerdeck.com/assets/embed.js"></script>


<h2>話した事</h2>

<ul>
<li>JavaScriptで書いてたのもをTypeScriptで書くとこんな感じですかね、的な流れです</li>
<li>みなさんJavaScriptを殴りたくなることがあると思います、僕もそうです</li>
<li>というわけでC#を作ったMicrosoft製のTypeScriptはどうなのか試しています</li>
<li>簡単なJavaScriptがあります</li>
<li>これをTypeScriptで書き直すとこうです、すてきですね！！！！</li>
<li>というわけでTypeScriptはJavaScriptのスーパーセットです</li>
<li>スーパーセットなので残念ながら、JavaScriptのトラップなどを解決することはできません</li>
<li>その代わりにコンパイル時に型チェックを付ける事ができます</li>
<li>ただし出てくるJavaScriptまではチェックできないので、注意しましょう</li>
<li>書くのであれば全部tsで書くのが理想です</li>
<li>型を工夫して書いていたいままでよりも、大分見やすく書けるのが多分一番のメリットです(closure compilerとか)</li>
<li>他にもクラス、モジュール、インターフェイスみたいなものはあるので、一個ずつみていきます</li>
<li>まずクラス、JavaScriptで書くとこんな感じですね、結構分かりにくいです</li>
<li>TypeScriptで書くとこうです、全体としての見通しがよくなりました</li>
<li>コンパイルするとでてくるJavaScriptも綺麗です</li>
<li>次はモジュール、JavaScriptでもこういう感じに実装することはできますが・・・</li>
<li>これがもっと書きやすくなります</li>
<li>JavaScriptも綺麗です</li>
<li>最後にインターフェイス、JavaやC#のインターフェイスとやれることは似ていますが、ものが違います</li>
<li>公式のドキュメントから引用すると、あるオブジェクトに別名を与える、という機能です</li>
<li><code>Programmer Interface</code>はこんな感じ、これはそのままオブジェクトの型としても使えますし、<code>implement</code>することもできます</li>
<li>コンパイル時に必要な定義なので、JavaScriptになった段階では消えます</li>
<li><code>Function</code>もオブジェクトなので、それを表すこともできます</li>
<li>これはそれを利用してオーバーロードを実装してみた例です</li>
<li>ただし残念ながら、定義上のオーバーロードなので、実装自体はJavaScriptと変わりません</li>
<li>他にも機能はありますが・・・</li>
<li>JavaScriptだけでも工夫すれば大体似たような感じで実装することはできますし、型チェックもコンパイラを使えば行う事が出来ます</li>
<li>そしてJavaScriptのトラップを回避できるわけでもありません</li>
<li>なので残念ながら、ソリューションというわけではなく</li>
<li>いままでJavaScriptを書いていた人が、見通しよく、安全なコードを書きやすくなる言語という認識でよいと思います</li>
<li>JavaScriptをしっかりと書けることが前提になる言語です</li>
<li>いままで似たような事を、ちゃんとやっていたJavaScripterな方にはかなりおすすめです</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TypeScript + SourceMap でデバッグしてみる]]></title>
    <link href="http://yaakaito.org/blog/2013/03/28/typescript-with-sorucemap/"/>
    <updated>2013-03-28T03:43:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/28/typescript-with-sorucemap</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
SourceMap便利ですよね！TypeScriptでも使ってみましょう。</p>

<p>といってもそんなにやることないです。
<code>tsc</code>でコンパイルするときに <code>--sourcemap</code> オプションをつけてあげれば生成されます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tsc &lt;file&gt; --sourcemap</span></code></pre></td></tr></table></div></figure>


<p>単体で吐いてもいいですが、<a href="https://github.com/yaakaito/typebone">前から使ってこのリポジトリ</a>みたいに、<code>reference</code>だけしてるファイルをコンパイルしているような場合でも、ちゃんと吐いてくれます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tsc --out backbone.test.js test/bootstrap.ts --sourcemap</span></code></pre></td></tr></table></div></figure>


<p>こんな感じにすると、<code>backbone.test.js.map</code>が出てくるので、Chormeで使ってみましょう。</p>

<p><img src="http://yaakaito.org/images/ts-sourcemap-setting.png"></p>

<p><code>Enable source maps</code>をonにして、</p>

<p><img src="http://yaakaito.org/images/ts-sourcemap-show.png"></p>

<p>読み込めばこんな感じに<code>.ts</code>が出てくるので、</p>

<p><img src="http://yaakaito.org/images/ts-sourcemap-debug.png"></p>

<p>BP打つなりして使います、便利ですね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OverlineにNSDateFormatter系のショートハンドを追加したいのだが]]></title>
    <link href="http://yaakaito.org/blog/2013/03/28/overline-nsdateformatter-shorthands/"/>
    <updated>2013-03-28T02:26:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/28/overline-nsdateformatter-shorthands</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
<a href="https://github.com/yaakaito/Overline/">Overline</a>であんまり気が向かなかった<code>NSDateFormatter</code>系のところに手をつけ始めました。
わりと意見を求めている記事です。</p>

<p>といっても、そんなにやることはないかなーとか思っていて、<code>NSDateFormatter</code>をそのまま使っちゃって、あれ・・・和暦・・・みたいなトラップを意識的に回避できればそれでよいのかなーと思ってます。</p>

<p>んで、以下の２つのメソッドを追加した。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">dateFormatterWithCalendarIndetifiter:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">calendar</span>
</span><span class='line'>                                   <span class="nf">LocaleIdentifiter:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">locale</span>
</span><span class='line'>                                <span class="nf">timeZoneAbbreviation:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">timeZone</span><span class="p">;</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">userDefaultFormatter</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>１個目はカレンダー、ロケール、タイムゾーンを忘れずに設定してね、というのを明確にするために作ったメソッド。
なんかこの辺は設定するかなーというものを引数にとってる。</p>

<p>２個目は、デフォルトのものを返してくるよ、というもの。
つまりは単純に<code>alloc init</code>した状態のものなんだけど、そもそもの話その状態が分かりにくいんだよ・・・ってことで名前を付けたもの。
ちょっとは分かりやすくなるのかなーと思ってる。</p>

<h2>意見があったらほしいです</h2>

<p>僕はこれでよいかなーとか思っているのですが、これあったほうがいいだろJKとか、いやそれは違う、というのがあれば意見をもらいたいです。
Twitterとかはあんまり追ってないので、下のDisqusにもらえるとありがたいです。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[yaakaito.org]]></title>
  <link href="http://yaakaito.org/atom.xml" rel="self"/>
  <link href="http://yaakaito.org/"/>
  <updated>2013-04-12T13:46:17+09:00</updated>
  <id>http://yaakaito.org/</id>
  <author>
    <name><![CDATA[yaakaito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScriptの似非オーバーロードが気に入らない]]></title>
    <link href="http://yaakaito.org/blog/2013/04/11/javascript-overload/"/>
    <updated>2013-04-11T22:36:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/11/javascript-overload</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。
なんかJavaScriptで似非オーバーロードとか省略可能引数使う人結構いますよね。かっこいいですか、そうですか。
僕これ嫌いなんで、書いておこうと思います。</p>

<h2>実際によくあるコード</h2>

<p>こういうコードがよくありますかね、Backboneとかでも<code>Events.off</code>とかがこうなってます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// aを使った処理</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 引数がないと判定された時の処理</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>他にも、引数によって挙動が違うのたくさんありますよね、jQueryとかjQueryとかjQueryとか。</p>

<h2>まずもって間違っている</h2>

<p>上の例の場合、<code>f()</code> と <code>f(undefined)</code> を区別する事は出来ません。
<code>f()</code> で期待される挙動は <code>f(undefined)</code> で期待される挙動とは、異なるはずですよね。</p>

<p>これは<code>arguments</code>を見る事である程度解決できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">argument</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 引数がないときの処理</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// その他</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この件に関して、ちょうどSpineのコードを読んでいて、イラッとしたのでプルリクしました。
無事にdevにマージされたみたいなので良かったですね。</p>

<h3>【補足】勘違いのないように</h3>

<p>@kazuhoさんからこんなコメントをもらって、確かにそう読めると思ったので補足する。</p>

<blockquote><p>正論なんだけど、それ以前に、そもそも引数としてundefined渡すのが間違い。null使うべき</p><footer><strong>@kazuho</strong> <cite><a href='https://twitter.com/kazuho/status/322496581867810816'>twitter.com/kazuho/status/&hellip;</a></cite></footer></blockquote>


<p>これは、<code>f()</code>と<code>f(hoge)</code>で挙動が違うことを前提にしているのであれば、その実装は正確には間違っている(<code>f(undefined)</code>も引数一つとして扱われるべき)、という主張です。
<code>undefined</code>を使って書いているのは、省略されたときにその引数は<code>undefined</code>になるのだから、
その方が問題としていることが分かりやすいだろう、という意図があってです。</p>

<p>@kazuhoさんがおっしゃっているように、そもそも<code>undefined</code>を入れない事が前提があって、
だから<code>undefined</code>であると判定することにメリットがある、というのはもちろんその通りだと思います。</p>

<p>単純に、僕が嫌だなーと思っていることなので、そこで勘違いが起こってしまっても意味はないなと思うので、補足しました。</p>

<h2>挙動を変えないでください</h2>

<p>そもそも同じ関数で複数の挙動を持つなと言いたい。
少なくとも僕は、そんな挙動を信じられるほど頭がよくない。</p>

<p>jQueryでよくあるけど、<code>$</code>がいろいろ出来すぎて、XSS出してますよね。</p>

<p>他にも、省略することで返ってくるもののスコープが大きくなっていく関数とかよくありますよね、嫌いです。</p>

<h2>別にかっこよくも見やすくもないです</h2>

<p>なんでこうやってるのか知らないですけど、ダサいと思ってます。
<code>off</code>とか、<code>offAll</code>と<code>off</code>に分けてもらった方が分かりやすいです。
<code>$</code>もセレクトだけでいいです。作らないでください。</p>

<h2>省略可能引数はオブジェクトを渡してください</h2>

<p>省略可能引数は、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">c</span> <span class="o">:</span> <span class="nx">c</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">d</span> <span class="o">:</span> <span class="nx">d</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>という形式で書かれるべきです。</p>

<h2>挙動が異なる関数は分けください</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$select</span><span class="p">();</span>
</span><span class='line'><span class="nx">$create</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>とか</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">elem</span><span class="p">.</span><span class="nx">html</span><span class="p">();</span>
</span><span class='line'><span class="nx">elem</span><span class="p">.</span><span class="nx">setHtml</span><span class="p">()</span><span class="o">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>とか</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Events</span><span class="p">.</span><span class="nx">unbind</span><span class="p">();</span>
</span><span class='line'><span class="nx">Events</span><span class="p">.</span><span class="nx">unbindAll</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>にしてください。</p>

<p>どっちの方が挙動を推測しやすいかは一目瞭然だと思いますし、僕はコードゴルフがしたいわけじゃありません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[世の中のサンプルがTODOアプリなのは案外理にかなってる気がした]]></title>
    <link href="http://yaakaito.org/blog/2013/04/04/todo-is-good-app/"/>
    <updated>2013-04-04T10:02:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/04/todo-is-good-app</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
最近いろいろJavaScriptフレームワークのサンプルを見るんですが、Todoアプリだらけで飽きてきました！！！！
というかTodoMVCがそもそもTodoだし、世の中にはTodoアプリがあふれすぎている、もっと面白いの、例えば御坂美琴サーチとかはよ！と思ってたんですが、
風呂にはいって考えてみたら、結構Todoアプリは理にかなってる気がしたので、メモる。</p>

<p>わりとどうでもいいことしか書いてないです。</p>

<h2>大抵のTodoアプリの仕様</h2>

<ul>
<li>タスクを入力する</li>
<li>タスクがリストに追加される</li>
<li>チェックをトグルできる</li>
<li>リストにはいったタスクを編集できる</li>
</ul>


<p>こんな感じか</p>

<h2>実にただしい・・・</h2>

<p>まず</p>

<h3>タスクを入力する</h3>

<p>ユーザー入力のハンドリングと、モデル化のフロー、生成イベントの発行、保存あたりを表現する。</p>

<p>イベントの受け取り方はUIを書くなら付きまとうし、最初に知らなきゃいけないところと言っても良い。
そして大抵の場合、空だった場合はタスクとして認識しないというバリデーションを挟んでいる。
大体合わせて5~10行くらいのコードだと思うんだけど、この10行は強い・・・。</p>

<p>そのあと、そのデータをアプリケーション内でどう扱うか、というところを提示する。
生で扱っちゃ駄目よ、とクラスにラップするような処理があったりする場合も多いし、作法が読み取れる、すごい。</p>

<p>さらにそれを生成した、というイベントをリスナーに通知する、この辺のパターンはUI書くならキモになってくる部分だし、すごい、簡潔に表現されている・・・。</p>

<p>そして保存する。JavaScriptだとLocalStorageが多いけど、サーバーに送ったりとか、iOSならCoreDataに保存する見たいなサンプルにちゃんとなってる・・・。</p>

<h3>タスクがリストに追加される</h3>

<p>リストビューあたりを表現する。</p>

<p>リストビューみたいなのはよく使うパターンだし、それをちゃんとやってる、すごい。
コレクション的なものの使い方も分かってくるし、おそらく一番使うUIパターンだし、シンプルなのでわかりやすい。</p>

<p>あとはここで簡単なフィルター機能とかがつくと、ちょっとロジカルなコードも表現される。TodoMVCもたしかにそれがあった。</p>

<h3>チェックをトグルできる</h3>

<p>モデルに対するアップデートと、それに付随するUIのアップデート、その通知の仕組み。</p>

<p>ただの一個のboolですべてを表現したぞ、すごい！</p>

<h3>リストにはいったタスクを編集できる</h3>

<p>リストビューの中にある、個々のコンポーネントに対してどのようにハンドリングを行うかが分かる。(まあ上のやつもそれをちょっと含んでいるんだけど)</p>

<p>この辺ってわりと面倒くさいところで、それをどういう風に解決しているのか見れる。なるほど。
ここが気に入るか気に入らないかは結構大切だなーと思うので、一発で把握できてよい。</p>

<h2>まだまだ要素はありそう</h2>

<p>というわけでTodoアプリはすごかった！飽きたとか言ってすまんかった！！！！
このあたりの要素を、この規模で、綺麗に表現しきれるアプリが他に思いつかないのは事実としてある。(せいぜいメモアプリに名称変更するくらい)</p>

<p>「サンプルアプリ作りましょう、Todoとか」じゃなくて、「Todo相当のサンプルアプリを作りましょう」だった。</p>

<h2>まとめ</h2>

<p><a href="http://www.project-railgun.net/">Sはよ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SublimeText入れたあとにやること]]></title>
    <link href="http://yaakaito.org/blog/2013/04/04/sublime-text-setup/"/>
    <updated>2013-04-04T05:34:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/04/sublime-text-setup</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
ずいぶん前にVimからSublimeTextに変えたんですが、設定覚えられないので、いれたらやることのメモです。</p>

<p>バージョン番号とかは適当に補完して読んでください。</p>

<h2>Package Control 入れる</h2>

<p>とりあえずないと始まらないので入れます。</p>

<p><a href="http://wbond.net/sublime_packages/package_control/installation">Sublime Package Control : Installation</a></p>

<p>control+` でコンソールを呼びます。そして流し込みます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span><span class="o">,</span><span class="nn">os</span><span class="p">;</span> <span class="n">pf</span><span class="o">=</span><span class="s">&#39;Package Control.sublime-package&#39;</span><span class="p">;</span> <span class="n">ipp</span><span class="o">=</span><span class="n">sublime</span><span class="o">.</span><span class="n">installed_packages_path</span><span class="p">();</span> <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">ipp</span><span class="p">)</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">ipp</span><span class="p">)</span> <span class="k">else</span> <span class="bp">None</span><span class="p">;</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">ProxyHandler</span><span class="p">()));</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">ipp</span><span class="p">,</span><span class="n">pf</span><span class="p">),</span><span class="s">&#39;wb&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="s">&#39;http://sublime.wbond.net/&#39;</span><span class="o">+</span><span class="n">pf</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">,</span><span class="s">&#39;%20&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">read</span><span class="p">());</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;Please restart Sublime Text to finish installation&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>キーバインドを変える</h2>

<p>変えます。といってもそんなに変えません。</p>

<p>まず、Macの方のSystem Preferencesから(こっちからやるのが重要)、キーバインドに <code>Command+Option+Q</code>で<code>Quit Sublime Text</code>するようにします。
こうするとcmd+Qで間違って殺してしまう心配もなくなりますし、Sublime Textが<code>Command+Option+Q</code>を使っているので、実質死ななくなります。</p>

<p>え、死ななくなっても困らないですよね？それよりミスって殺さない事の方が大事っていうか・・・。(僕はAppCodeとかXcodeとかChromeとかもこうなってる)</p>

<p>もっとも重要なキーバインドを変えたので、残りを変えます。こっちはSublime Textから。</p>

<p>Preferences -> Key Bindings - User を開いて</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span> <span class="s2">&quot;keys&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;super+shift+p&quot;</span><span class="p">],</span> <span class="s2">&quot;command&quot;</span><span class="o">:</span> <span class="s2">&quot;show_overlay&quot;</span><span class="p">,</span> <span class="s2">&quot;args&quot;</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;overlay&quot;</span><span class="o">:</span> <span class="s2">&quot;goto&quot;</span><span class="p">,</span> <span class="s2">&quot;show_files&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">}</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s2">&quot;keys&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;super+p&quot;</span><span class="p">],</span> <span class="s2">&quot;command&quot;</span><span class="o">:</span> <span class="s2">&quot;show_overlay&quot;</span><span class="p">,</span> <span class="s2">&quot;args&quot;</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;overlay&quot;</span><span class="o">:</span> <span class="s2">&quot;command_palette&quot;</span><span class="p">}</span> <span class="p">},</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>として Command Palette と Goto を入れ替えます。これで Command+P でコマンド打てるようになります。便利ですね。(圧倒的にこっちのほうが使うので)</p>

<h2>パッケージを取りにいく</h2>

<p>あんまりいれてないですけどね！テーマとかもまとめてとります。</p>

<p>Command+P -> Package Controll : Install Package</p>

<ul>
<li>Phoenix theme</li>
<li>TypeScript</li>
<li>CoffeeScript</li>
<li>jQuery</li>
<li>Markdown Preview</li>
</ul>


<p>あとはス二ペットとか、使う物によると思うけど、最近いれたのは</p>

<ul>
<li>jQuery</li>
<li>Mocha</li>
<li>Backbone</li>
</ul>


<p>とか。すきなの入れればいいと思う。スニペットも Command+P からそれっぽく呼び出せる。</p>

<h2>テーマの設定する</h2>

<p>さっきとってきた Phoenix theme をあてる。</p>

<p>Preferences -> Settings - User に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;color_scheme&quot;</span><span class="o">:</span> <span class="s2">&quot;Packages/Theme - Phoenix/Color Scheme/Tomorrow-Night.tmTheme&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;font_size&quot;</span><span class="o">:</span> <span class="mf">14.0</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;phoenix_color_expanded_folder&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;phoenix_color_orange&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;phoenix_dirty_bottom_bar&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;phoenix_dirty_bottom_bar_red&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;phoenix_highlight_current_tab&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;phoenix_sidebar_tree_large&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;theme&quot;</span><span class="o">:</span> <span class="s2">&quot;Phoenix Dark.sublime-theme&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで書いておわり。</p>

<p>やってるのは上からカラースキームの設定、フォントサイズの設定、あとはPhoenix themeの設定。</p>

<h2>インデントとか調整する</h2>

<p>こっちは</p>

<p>Preferences -> Settings - Defaults でやっていいと思う。どうせ変えない。</p>

<p>デフォルト覚えてないけど多分、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Set to true to turn spell checking on by default</span>
</span><span class='line'><span class="s2">&quot;spell_check&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The number of spaces a tab is considered equal to</span>
</span><span class='line'><span class="s2">&quot;tab_size&quot;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set to true to insert spaces when tab is pressed</span>
</span><span class='line'><span class="s2">&quot;translate_tabs_to_spaces&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>このあたり設定すれば、他のめぼしいのは全部ついてるはず。</p>

<h2>Markdown pluginを複製する</h2>

<p>Preference -> Browse Packages&#8230; を選択するとディレクトリが開くので、ここでmarkdownをおもむろに複製する。
で、これをMarkdownJPとかにしておく。<code>.tmLanuage</code>を開いて、JPのサフィックスを付ける。</p>

<p>なんでやるかって、スペルチェックのせいさ！</p>

<h2>言語毎に設定変える</h2>

<p>変え方は、エディターで対象を適用した状態で、 Preferences -> Settings - More -> Syntax Specific。</p>

<h3>MarkdownJP</h3>

<p>さっき設定した<code>spell_check</code>はブログとか書くmarkdownモードだと日本語が警告されまくってうざいのでJPの方は消す。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;spell_check&quot;</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>普通の方はREADMEとかも書くのでそのまま。日本語書く時だけスイッチする。</p>

<h3>JavaScript, CoffeeScript</h3>

<p>この二つだけインデントを4にする。(ネストしだすと見にくい)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;tab_size&quot;</span> <span class="o">:</span> <span class="mi">4</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ファイル開いたときは空気読んでこのあたりを設定してくれるので安心ですね。</p>

<h2>エイリアスを設定する</h2>

<p>open経由で開けるようにする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">alias</span> <span class="nx">sb</span><span class="o">=</span><span class="s2">&quot;open -a Sublime\Text&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">cd</span> <span class="nx">hoge</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">sb</span> <span class="p">.</span> <span class="c1">// SublimeがFoldersにカレントセットした状態で開くヤッターーーーーー！！！</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>おわり</h2>

<p>Sublime Text良いですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[半周遅れでBower使ってみる]]></title>
    <link href="http://yaakaito.org/blog/2013/04/02/hello-bower/"/>
    <updated>2013-04-02T02:12:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/02/hello-bower</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！curlしにいくのがだるいです。
そういや<a href="http://twitter.github.com/bower/">bower</a>ってあったなと思ったので試してみたメモ。といってもまだ使ってみたレベルなので使い方くらいです。</p>

<h2>bower をインストール</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install -g bower</span></code></pre></td></tr></table></div></figure>


<p>やりましたね！</p>

<h2>どんな品揃えかみてみる</h2>

<p><code>search</code>を引数なしでやると全部出てきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bower search</span></code></pre></td></tr></table></div></figure>


<p>ドドドドドドドーーーー！！！ときて僕のScrollback Linesが足りなくなりました。行数でも数えてみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bower search | wc -l
</span><span class='line'>1505</span></code></pre></td></tr></table></div></figure>


<p>すごい！むかし30個くらいしかなかった気がする！！！
jQuery PlugingとかBackboneの拡張とか、Angularの拡張はたくさんありました。(関係ないけどBackboke Pluginとか名前になってるか分からないのでこう書いてる)</p>

<p>で、大体有名どころとそのプラグインはあるし、<code>npm</code>も組み合わせればほとんど大丈夫だろなーという感じでした。</p>

<h2>使ってみる</h2>

<p>大体npmと似たような感じで使います。例えばjQueryほしいなーと思ったら、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bower install jquery</span></code></pre></td></tr></table></div></figure>


<p>これで <code>components</code> というディレクトリが出来るので、ここにjQueryが入ってます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tree
</span><span class='line'>.
</span><span class='line'>└── components
</span><span class='line'>    └── jquery
</span><span class='line'>        ├── component.json
</span><span class='line'>        ├── composer.json
</span><span class='line'>        ├── jquery-migrate.js
</span><span class='line'>        ├── jquery-migrate.min.js
</span><span class='line'>        ├── jquery.js
</span><span class='line'>        └── jquery.min.js</span></code></pre></td></tr></table></div></figure>


<p>npmでいうところの<code>node_modules</code>ですね。あとはほしいものをどんどん突っ込んでいけば</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bower install jasmine
</span><span class='line'>$ bower install backbone
</span><span class='line'>$ tree -L 2
</span><span class='line'>.
</span><span class='line'>└── components
</span><span class='line'>    ├── backbone
</span><span class='line'>    ├── jasmine
</span><span class='line'>    └── jquery</span></code></pre></td></tr></table></div></figure>


<p>という感じに揃っていきます。便利ですね。</p>

<h2>component.json</h2>

<p>npmで言うところの<code>package.json</code>ですね。中身もほぼ一緒です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "name" : "thogehoge",
</span><span class='line'>  "version" : "0.0.0",
</span><span class='line'>  "dependencies" : {
</span><span class='line'>    "backbone" : "~1.0.0",
</span><span class='line'>    "jquery" : "~1.9.1",
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>みたいに書いておいて、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bower install</span></code></pre></td></tr></table></div></figure>


<p>すれば<code>dependencies</code>が全部<code>components</code>に入ります。</p>

<h2>便利そうかどうか</h2>

<p>まあ便利なんじゃないでしょうか、ロードするときにパスが長くなるのがちょっと面倒くらいですね。
この辺は多分<code>git clone</code>してきてるだけなので、元のリポジトリ依存っぽいような臭いがします。(たいして調べてないのでテキトーです。)</p>

<p>ただでさえ汚くなりがちなJavaScriptのリポジトリですが、<code>components</code>をgitignoreしておけばちょっとは綺麗になりそうですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MagicalRecordの始め方忘れたので思い出しながら書く]]></title>
    <link href="http://yaakaito.org/blog/2013/04/01/magical-record-setup/"/>
    <updated>2013-04-01T00:49:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/01/magical-record-setup</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
<a href="https://github.com/magicalpanda/MagicalRecord">MagicalRecord</a>使うかーと思ったけど、やりかた覚えてなかったので書く！やっぱブログ書かないと駄目ですね。</p>

<h2>プロジェクト作る</h2>

<p><code>Use Core Data</code> をチェックする</p>

<h2>xcdatamodeldをいじる</h2>

<p>とりあえずサンプルとして</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Book:
</span><span class='line'>  name: string
</span><span class='line'>  bookId: integer 16
</span><span class='line'>  authors: [Author]
</span><span class='line'>
</span><span class='line'>Author:
</span><span class='line'>  name: string
</span><span class='line'>  type: string
</span><span class='line'>  book: [Book]</span></code></pre></td></tr></table></div></figure>


<p>という感じにした、<code>Book</code>と<code>Author</code>は一対多なので、<code>To-Many Relationship</code>を設定する。</p>

<p><img src="http://yaakaito.org/images/mr-to-many.png"></p>

<p><code>Class</code>とかも忘れずに設定する。</p>

<p><img src="http://yaakaito.org/images/mr-class.png" width="240"></p>

<h2>エンティティのモデルクラス作る</h2>

<p><a href="http://rentzsch.github.com/mogenerator/">mogenerator</a>を使うのが一般的っぽいですが、僕は別に使わなくていいかなーと思ってます。
というのも、mogeneratorって「自動生成されるやつだと変更したあとにマージが大変・・・、なのでCoreDataとビジネスロジックをカテゴリで分ける」的な使われ方をするのかなーと思ってるんだけど、それってそりゃそーじゃね、と思うのです。</p>

<p>僕は、CoreDataから出てきたものは、いうならJSON形式のレスポンスをそのまま<code>NSDicitionary</code>として使ってるのとそんなに違わないよなーと思っていて、なので内部的に<code>NSManagedObject</code>をもってるビジネスロジックを担当するクラスを作ればいいと思う。</p>

<p>とはいえただの決めの問題だし、どっちにしろmogenerator使えば楽出来ることに変わりはないと思うので、mogenerator使っときます。(ていうかこれじゃないと駄目なんだっけ？大丈夫だよね？)</p>

<p>(入ってない人は)<code>brew</code>でmogeneratorをインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install mogenerator</span></code></pre></td></tr></table></div></figure>


<p>mogeneratorが吐き出すクラスを入れるディレクトリなんかを作る。とりあえず <code>CoreData</code> とかにしておく。</p>

<p>準備したらmogeneratorでクラスを吐き出す。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mogenerator -m [YourCoreData].xcdatamodeld/[YourCoreData].xcdatamodel -O CoreData/ --template-var arc=true</span></code></pre></td></tr></table></div></figure>


<p>こんな感じ！ <code>--template-var arc=true</code> 付けないとARC用のコードが出てこないっぽいので注意。</p>

<h2>MagicalRecord入れる</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod `'MagicalRecord'</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pod install</span></code></pre></td></tr></table></div></figure>


<p>いい時代になりましたね。</p>

<h2>MagicalRecord使う</h2>

<p>インポートします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#define MR_SHORTHAND 1</span>
</span><span class='line'><span class="cp">#import &quot;CoreData+MagicalRecord.h&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>セットアップします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="n">MagicalRecord</span> <span class="nl">setupCoreDataStackWithStoreNamed:</span><span class="s">@&quot;YourCoreData.sqlite&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">MGBook</span> <span class="o">*</span><span class="n">book</span> <span class="o">=</span> <span class="p">[</span><span class="n">MGBook</span> <span class="n">createEntity</span><span class="p">];</span>
</span><span class='line'><span class="n">book</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;Objective-C&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">book</span><span class="p">.</span><span class="n">bookId</span> <span class="o">=</span> <span class="err">@</span><span class="p">(</span><span class="mi">123</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">context</span> <span class="n">saveToPersistentStoreAndWait</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>簡単ですね！</p>

<p>いつの間にか <code>MR_save</code> じゃなくて、<code>MR_saveToPersistentStoreAndWait</code> と <code>MR_saveToPersistentStoreWithCompletion:</code> になったんですね。こっちの方がいいと思います！！！！</p>

<h2>sqliteのビュアーとか</h2>

<p><a href="https://itunes.apple.com/jp/app/liya/id455484422?mt=12">Liya</a>がおすすめですかね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overline0.2.0とBlocksKit併用版を公開しました]]></title>
    <link href="http://yaakaito.org/blog/2013/03/30/overline-020-release/"/>
    <updated>2013-03-30T19:13:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/30/overline-020-release</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
Objective-C用ユーティリティ、<a href="https://github.com/yaakaito">Overline</a> 0.2.0を公開しました。0.1.5は6時間くらいの命でした。
同時に0.1.xで問題になっていたBlocksKitと一緒に使うとassertで死ぬ問題を回避した、Overline-BlocksKitを公開しています。</p>

<h2>BlocksKitと一緒に使う場合</h2>

<p>Overline-BlocksKitを利用します。Podfileはこんな感じ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod 'BlocksKit'
</span><span class='line'>pod 'Overline-BlocksKit'</span></code></pre></td></tr></table></div></figure>


<p>重複を解決するために、いくつかショートハンドのメソッドを削除しています。
削除されているのは、<code>NSArray</code> <code>NSDictionary</code> <code>NSSet</code> にある以下のメソッドです。</p>

<ul>
<li><code>each:</code></li>
<li><code>map:</code></li>
<li><code>reduce:memo:</code></li>
<li><code>filter:</code></li>
<li><code>reject:</code></li>
</ul>


<p>ショートハンドは削除されますが、Objective-Cっぽい方はそのまま使えます。このあたりはBlocksKitが実装してくれているので、そちらをご利用ください。</p>

<h2>追加された機能とか</h2>

<p>たらたらと紹介していきます。全部書くのはだるいので全部じゃないです。0.1.0から0.2.0までの変更のうちいろいろという感じです。</p>

<h3>NSArray arrayWithRange</h3>

<p>指定した範囲のNSArrayを作ります、NSNumber自体が使いにくいので、あんまり使わないですかね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithRangeFrom:</span><span class="mi">0</span> <span class="nl">to:</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'><span class="c1">// @[@0, @1, @2, @3, @4, @5, @6, @7, @8, @9]</span>
</span></code></pre></td></tr></table></div></figure>


<p>逆方向にも行けます</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">array2</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithRangeFrom:</span><span class="mi">0</span> <span class="nl">to:</span><span class="o">-</span><span class="mi">10</span> <span class="nl">step:</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="c1">// @[@0, @-2, @-4, @-6, @-8]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>NSArray uniqueObjects</h3>

<p>まんま、ユニークなものだけ返ってきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">uniqueObjects</span> <span class="o">=</span> <span class="p">[</span><span class="err">@</span><span class="p">[</span><span class="err">@</span><span class="mi">1</span><span class="p">,</span> <span class="err">@</span><span class="mi">2</span><span class="p">,</span> <span class="err">@</span><span class="mi">3</span><span class="p">,</span> <span class="err">@</span><span class="mi">1</span><span class="p">,</span> <span class="err">@</span><span class="mi">3</span><span class="p">,</span> <span class="err">@</span><span class="mi">4</span><span class="p">,</span> <span class="err">@</span><span class="mi">5</span><span class="p">]</span> <span class="n">uniqueObjects</span><span class="p">];</span>
</span><span class='line'><span class="c1">// @[@1, @2, @3, @4, @5]</span>
</span></code></pre></td></tr></table></div></figure>


<p>比較の部分をBlocksで書ける <code>uniqueObjectsUsingEqualsBlock:</code> もあります。</p>

<h3>その他NSArray</h3>

<p><code>subArray</code> <code>diffrence</code> <code>reversed</code> とかが地味に増えました。</p>

<h3>NSDictionary arrayMap</h3>

<p>そもそも<code>map</code>おかしくね？となって、追加した。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="err">@</span><span class="p">{</span>
</span><span class='line'>    <span class="s">@&quot;a&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s">@&quot;b&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="s">@&quot;c&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="s">@&quot;d&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="mi">4</span>
</span><span class='line'><span class="p">}</span> <span class="nl">mappedArrayUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="err">@</span><span class="p">([</span><span class="n">obj</span> <span class="n">integerValue</span><span class="p">]</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'><span class="c1">// @[@2,@4,@6,@8]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>NSDictionary objectForKey:transformBlock: pathForKey:</h3>

<p><code>objectForKey:</code>したあとに変換してーというのが面倒なので、Blocksでまとめられるようにしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSDate</span> <span class="o">*</span><span class="n">date</span> <span class="o">=</span> <span class="p">[</span><span class="n">JSON</span> <span class="nl">objectForKey:</span><span class="s">@&quot;date8601&quot;</span> <span class="nl">transformBlock:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSDateFormatter</span> <span class="o">*</span><span class="n">formatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSDateFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">formatter</span> <span class="nl">setDateFormat:</span><span class="s">@&quot;yyyy/MM/dd HH:mm:ss Z&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">formatter</span> <span class="nl">dateFromString:</span><span class="n">obj</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>とか、あとは<code>stringForKey:</code> <code>dateForKey:usingFormat:</code> <code>bookForKey:withTrueValue:</code> <code>integerForKey:</code> などもろもろ。多いのでREADMEかテストを見てください。</p>

<p><code>objectForPath:</code> は <code>hoge.fuga</code> みたいなので階層を辿れる。 <code>valueForKey</code> とか <code>valueForKeyPath</code> でも出来たはずだけど、本来その目的に使う物ではないはずなので、あんまり使っちゃ駄目だと思います。</p>

<p>こっちの<code>transform</code>とかの対応そういえばやってなかった・・・</p>

<p>多分大きめなのはこれくらいかと思います。はい。</p>

<h2>よろしくね！</h2>

<p><a href="https://github.com/yaakaito">Overline</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TypeScriptの紹介的なプレゼンした]]></title>
    <link href="http://yaakaito.org/blog/2013/03/30/typescript-introduction/"/>
    <updated>2013-03-30T01:26:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/30/typescript-introduction</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
勉強会っぽいものがあったので、せっかくなのでTypeScriptどうよ的な話した。
スライドはあくまで紹介程度に留めてて、どっちかと言えば後半のどうよ、どうよ的なやりとりが本体だったんですが、せっかくなのでSpeaker Deckにあげた。</p>

<script async class="speakerdeck-embed" data-id="f9ddb2607a740130222e12313809347f" data-ratio="1.33333333333333" src="http://yaakaito.org//speakerdeck.com/assets/embed.js"></script>


<h2>話した事</h2>

<ul>
<li>JavaScriptで書いてたのもをTypeScriptで書くとこんな感じですかね、的な流れです</li>
<li>みなさんJavaScriptを殴りたくなることがあると思います、僕もそうです</li>
<li>というわけでC#を作ったMicrosoft製のTypeScriptはどうなのか試しています</li>
<li>簡単なJavaScriptがあります</li>
<li>これをTypeScriptで書き直すとこうです、すてきですね！！！！</li>
<li>というわけでTypeScriptはJavaScriptのスーパーセットです</li>
<li>スーパーセットなので残念ながら、JavaScriptのトラップなどを解決することはできません</li>
<li>その代わりにコンパイル時に型チェックを付ける事ができます</li>
<li>ただし出てくるJavaScriptまではチェックできないので、注意しましょう</li>
<li>書くのであれば全部tsで書くのが理想です</li>
<li>型を工夫して書いていたいままでよりも、大分見やすく書けるのが多分一番のメリットです(closure compilerとか)</li>
<li>他にもクラス、モジュール、インターフェイスみたいなものはあるので、一個ずつみていきます</li>
<li>まずクラス、JavaScriptで書くとこんな感じですね、結構分かりにくいです</li>
<li>TypeScriptで書くとこうです、全体としての見通しがよくなりました</li>
<li>コンパイルするとでてくるJavaScriptも綺麗です</li>
<li>次はモジュール、JavaScriptでもこういう感じに実装することはできますが・・・</li>
<li>これがもっと書きやすくなります</li>
<li>JavaScriptも綺麗です</li>
<li>最後にインターフェイス、JavaやC#のインターフェイスとやれることは似ていますが、ものが違います</li>
<li>公式のドキュメントから引用すると、あるオブジェクトに別名を与える、という機能です</li>
<li><code>Programmer Interface</code>はこんな感じ、これはそのままオブジェクトの型としても使えますし、<code>implement</code>することもできます</li>
<li>コンパイル時に必要な定義なので、JavaScriptになった段階では消えます</li>
<li><code>Function</code>もオブジェクトなので、それを表すこともできます</li>
<li>これはそれを利用してオーバーロードを実装してみた例です</li>
<li>ただし残念ながら、定義上のオーバーロードなので、実装自体はJavaScriptと変わりません</li>
<li>他にも機能はありますが・・・</li>
<li>JavaScriptだけでも工夫すれば大体似たような感じで実装することはできますし、型チェックもコンパイラを使えば行う事が出来ます</li>
<li>そしてJavaScriptのトラップを回避できるわけでもありません</li>
<li>なので残念ながら、ソリューションというわけではなく</li>
<li>いままでJavaScriptを書いていた人が、見通しよく、安全なコードを書きやすくなる言語という認識でよいと思います</li>
<li>JavaScriptをしっかりと書けることが前提になる言語です</li>
<li>いままで似たような事を、ちゃんとやっていたJavaScripterな方にはかなりおすすめです</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TypeScript + SourceMap でデバッグしてみる]]></title>
    <link href="http://yaakaito.org/blog/2013/03/28/typescript-with-sorucemap/"/>
    <updated>2013-03-28T03:43:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/28/typescript-with-sorucemap</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
SourceMap便利ですよね！TypeScriptでも使ってみましょう。</p>

<p>といってもそんなにやることないです。
<code>tsc</code>でコンパイルするときに <code>--sourcemap</code> オプションをつけてあげれば生成されます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tsc &lt;file&gt; --sourcemap</span></code></pre></td></tr></table></div></figure>


<p>単体で吐いてもいいですが、<a href="https://github.com/yaakaito/typebone">前から使ってこのリポジトリ</a>みたいに、<code>reference</code>だけしてるファイルをコンパイルしているような場合でも、ちゃんと吐いてくれます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tsc --out backbone.test.js test/bootstrap.ts --sourcemap</span></code></pre></td></tr></table></div></figure>


<p>こんな感じにすると、<code>backbone.test.js.map</code>が出てくるので、Chormeで使ってみましょう。</p>

<p><img src="http://yaakaito.org/images/ts-sourcemap-setting.png"></p>

<p><code>Enable source maps</code>をonにして、</p>

<p><img src="http://yaakaito.org/images/ts-sourcemap-show.png"></p>

<p>読み込めばこんな感じに<code>.ts</code>が出てくるので、</p>

<p><img src="http://yaakaito.org/images/ts-sourcemap-debug.png"></p>

<p>BP打つなりして使います、便利ですね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OverlineにNSDateFormatter系のショートハンドを追加したいのだが]]></title>
    <link href="http://yaakaito.org/blog/2013/03/28/overline-nsdateformatter-shorthands/"/>
    <updated>2013-03-28T02:26:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/28/overline-nsdateformatter-shorthands</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
<a href="https://github.com/yaakaito/Overline/">Overline</a>であんまり気が向かなかった<code>NSDateFormatter</code>系のところに手をつけ始めました。
わりと意見を求めている記事です。</p>

<p>といっても、そんなにやることはないかなーとか思っていて、<code>NSDateFormatter</code>をそのまま使っちゃって、あれ・・・和暦・・・みたいなトラップを意識的に回避できればそれでよいのかなーと思ってます。</p>

<p>んで、以下の２つのメソッドを追加した。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">dateFormatterWithCalendarIndetifiter:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">calendar</span>
</span><span class='line'>                                   <span class="nf">LocaleIdentifiter:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">locale</span>
</span><span class='line'>                                <span class="nf">timeZoneAbbreviation:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">timeZone</span><span class="p">;</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">userDefaultFormatter</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>１個目はカレンダー、ロケール、タイムゾーンを忘れずに設定してね、というのを明確にするために作ったメソッド。
なんかこの辺は設定するかなーというものを引数にとってる。</p>

<p>２個目は、デフォルトのものを返してくるよ、というもの。
つまりは単純に<code>alloc init</code>した状態のものなんだけど、そもそもの話その状態が分かりにくいんだよ・・・ってことで名前を付けたもの。
ちょっとは分かりやすくなるのかなーと思ってる。</p>

<h2>意見があったらほしいです</h2>

<p>僕はこれでよいかなーとか思っているのですが、これあったほうがいいだろJKとか、いやそれは違う、というのがあれば意見をもらいたいです。
Twitterとかはあんまり追ってないので、下のDisqusにもらえるとありがたいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【解決した】TypeScriptで複数ファイルに渡って同一moduleを定義したくてハマってる]]></title>
    <link href="http://yaakaito.org/blog/2013/03/25/typescript-module-division-files/"/>
    <updated>2013-03-25T08:42:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/25/typescript-module-division-files</id>
    <content type="html"><![CDATA[<h2>解決した</h2>

<p>どうも俺が0.8.3だと思っていた<code>tsc</code>は0.8.0だった。
バージョンが古いなんて生易しいもんじゃねぇ、気がついたらnode環境がぶっ壊れていた、何を言っているかわからねーと思うが(ry
npm listで出てくるtscと、パスが通ってるtscが違った。とりあえず直した、お騒がせしました。</p>

<p>本来下に書いてある</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span> <span class="nx">A</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">class</span> <span class="nx">Hoge</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kr">export</span> <span class="kd">var</span> <span class="nx">hoge</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Hoge</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>というのは、0.8.3時点でコンパイルでエラーになるようになっています、<code>Hoge</code>をexportしろ、とのことです。
で、Hogeの中でさらにインナークラスとか呼んでると、それもexportしなくちゃいけなくてヤダーなので、ほしいメソッドだけ<code>interface</code>にしました。</p>

<p>あと、<code>reference</code>を反対にするとなんかおかしい問題は健在っぽいです。
いろいろ邪推してみましたが、それにあんまり意味はないので、issueにしてこようと思います。</p>

<hr />

<p>　</p>

<p>こんにちは！うきょーです！分からないので誰か教えてください。
TypeScriptに<code>module</code>って機能があるんですが、こいつでハマってる。</p>

<p>というのもこれって、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span> <span class="nx">A</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">class</span> <span class="nx">Hoge</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいにしておくと、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">A</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">A</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">Hoge</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">Hoge</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">Hoge</span><span class="p">;</span>
</span><span class='line'>    <span class="p">})();</span>
</span><span class='line'><span class="p">})(</span><span class="nx">A</span> <span class="o">||</span> <span class="p">(</span><span class="nx">A</span> <span class="o">=</span> <span class="p">{}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうなるわけ。
で、<code>module</code>は複数のファイルに渡って同一のものを定義できるらしい。
実際そういう感じになっているし、そうなんだろう、分かる。</p>

<p>問題はこのモジュール内で変数定義しようとしたときに起こった。
例えばシングルトン的な感じでオブジェクトを外に出したいときに、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span> <span class="nx">A</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">class</span> <span class="nx">Hoge</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kr">export</span> <span class="kd">var</span> <span class="nx">hoge</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Hoge</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすれば、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">A</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">A</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">Hoge</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">Hoge</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">Hoge</span><span class="p">;</span>
</span><span class='line'>    <span class="p">})();</span>
</span><span class='line'>    <span class="nx">A</span><span class="p">.</span><span class="nx">hoge</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Hoge</span><span class="p">();</span>
</span><span class='line'><span class="p">})(</span><span class="nx">A</span> <span class="o">||</span> <span class="p">(</span><span class="nx">A</span> <span class="o">=</span> <span class="p">{}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>となる、ここまではよい。
もう一個同じ<code>module</code>を実装しているファイルがあるとする、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span> <span class="nx">A</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">class</span> <span class="nx">Fuga</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、この二つを個別にコンパイルする分には何も起こらないし、普通に実行できてるっぽいんだけど、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">/// &lt;reference path=&quot;Fugaの方.ts&quot; /&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span> <span class="nx">A</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">class</span> <span class="nx">Hoge</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kr">export</span> <span class="kd">var</span> <span class="nx">hoge</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Hoge</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>という風にreferenceすると <code>export var hoge = new Hoge();</code> でHogeが見つからなくなる。真上にあるが・・・。</p>

<p>例えばこういう感じにしてビルドしてみても駄目。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">/// &lt;reference path=&quot;Fugaの方.ts&quot; /&gt;</span>
</span><span class='line'><span class="c1">/// &lt;reference path=&quot;Hogeの方.ts&quot; /&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>なんだけど、順番を入れ替えると・・・</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">/// &lt;reference path=&quot;Hogeの方.ts&quot; /&gt;</span>
</span><span class='line'><span class="c1">/// &lt;reference path=&quot;Fugaの方.ts&quot; /&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>なんか知らんが通る。そんな参照で大丈夫か？</p>

<p>要するに、コンパイルするときに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span> <span class="nx">A</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span> <span class="nx">A</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>という状態になると、二番目以降の<code>module</code>内で参照が死ぬ。
けど<code>class</code>とかでプロパティに持つ分には大丈夫という謎状況。</p>

<p>バグなのかな、バグならバグでよいんだけど。</p>

<p>で、ここまで説明してきたんだけど、これエラーは出るけど、コンパイルはちゃんと通った跡がある、どっちやねん。</p>

<p>一番いい解説を頼む。</p>

<p>(誰も知らなさそうなら公式に投げてみようと思います。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[テスト書きながらTypeScript書ける環境作る]]></title>
    <link href="http://yaakaito.org/blog/2013/03/24/test-driven-typescript/"/>
    <updated>2013-03-24T19:33:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/24/test-driven-typescript</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！TypeScriptを書いています。
というのもBackbone、というかJavaScriptでのMVCにガッツリと関わるような状況になってしまったので、
触ってるだけでもわからんとこ多いし、勉強がてらTypeScriptでクローンつくってみるかーという感じです。</p>

<p>そこで、テストを書きたいわけなんですが、TypeScriptのテスト環境の情報が少ないので、手探りでやったところまで記録しておきます。</p>

<p><a href="http://yaakaito.org/blog/2013/03/23/testing-mocha-testem-htmlcov/">前回、Mocha + Testem + HTMLCov</a> で基礎的な部分を作ったので、これをベースにします。
なのでこれにTypeScriptのコンパイルやらを乗せていく感じです。</p>

<p><a href="https://github.com/yaakaito/typebone">リポジトリはgithubにある</a>ので、見ながら読むと分かりやすいかもしれません。</p>

<h2>TypeScriptのコンパイル</h2>

<p>TypeScriptのコンパイルには <code>tsc</code> を使うので、npmで入れます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install -g tsc</span></code></pre></td></tr></table></div></figure>


<p><code>tsc</code> でコンパイルする時に、<code>--out</code> オプションを付けると <code>refrence</code> を解決しながらビルドしてくれます。
で、これは流儀的にどうなのかは分からないんですが、これを利用して、コンパイル対象は <code>reference</code> するだけにしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/backbone.ts</span>
</span><span class='line'><span class="c1">/// &lt;reference path=&quot;events.ts&quot; /&gt;</span>
</span><span class='line'><span class="c1">/// &lt;reference path=&quot;model.ts&quot; /&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>とりあえず<code>Backbone.Events</code>と<code>Backbone.Model</code>だけ用意します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/events.ts</span>
</span><span class='line'><span class="c1">/// &lt;reference path=&quot;../vendor/underscore.d.ts&quot; /&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span> <span class="nx">Backbone</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">export</span> <span class="kr">class</span> <span class="nx">Events</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ....</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// src/model.ts</span>
</span><span class='line'><span class="nx">module</span> <span class="nx">Backbone</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">export</span> <span class="kr">class</span> <span class="nx">Model</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ....</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういう感じにしておいて、以下のコマンドでビルドします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">tsc</span> <span class="o">--</span><span class="nx">out</span> <span class="nx">backbone</span><span class="p">.</span><span class="nx">js</span> <span class="nx">src</span><span class="o">/</span><span class="nx">backbone</span><span class="p">.</span><span class="nx">ts</span>
</span></code></pre></td></tr></table></div></figure>


<p>すると、<code>backbone.js</code>に <code>events.ts</code> と <code>models.ts</code> をコンパイルして、依存を解決したものが吐き出されます。
これには <code>underscore</code> は含まれません。</p>

<h2>テスト用のビルドとTestem</h2>

<p>テストもTypeScriptで書きます。といっても、Mochaを使うので、ほとんどJavaScriptになります。</p>

<h3>【追記】d.tsファイルについて</h3>

<p>TypeScriptからMocha(JavaScript)を利用する為に、<code>d.ts</code>というファイルが必要になります。
これは安全に既存のJavaScriptをTypeScriptから利用する為の仕組みです。</p>

<p><code>d.ts</code> ファイル自体はただのテキストで、コードと対して変わらないです。</p>

<p>入手方法としては自分で書く(ある程度自動生成できるっぽい？)、他の人が作ったものを使う、<a href="http://www.tsdpm.com/">tsd</a>を利用するの3つがあります。
tsdは<code>d.ts</code>のパッケージマネージャみたいなものなんですが、僕はそこまで大げさなものじゃないよなーと思っているので、適当に拾ってきて突っ込んでいます。(あんまりツール的なの増やしたくないのもある。)</p>

<p><a href="https://github.com/borisyankov/DefinitelyTyped">DefinitelyTyped</a> を見ると有名どころは大体揃ってるので、ほとんどの場合はここから取得すれば済むと思います。
mochaとchaiはこの中になかったので、僕は下のを使ってます。</p>

<p><a href="https://gist.github.com/muratg/4163650">mocha.d.ts</a> | <a href="https://github.com/TobiaszCudnik/asyncmachine/blob/master/headers/chai.d.ts">chai.d.ts</a></p>

<h3>テストを書く</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// test/events-test.ts</span>
</span><span class='line'><span class="c1">/// &lt;reference path=&quot;../src/events.ts&quot; /&gt;</span>
</span><span class='line'><span class="c1">/// &lt;reference path=&quot;../vendor/mocha.d.ts&quot; /&gt;</span>
</span><span class='line'><span class="c1">/// &lt;reference path=&quot;../vendor/chai.d.ts&quot; /&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Backbone.Events&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;test name&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// ....</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>test/bootstrap.ts</code> みたいなのを作って、こっちも <code>reference</code> だけにします。(<code>expect</code>のexportだけ書いてます。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">/// &lt;reference path=&quot;events-tests.ts&quot; /&gt;</span>
</span><span class='line'><span class="c1">/// &lt;reference path=&quot;../vender/chai.d.ts&quot; /&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">expect</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">expect</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これをビルドします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">tsc</span> <span class="o">--</span><span class="nx">out</span> <span class="nx">backbone</span><span class="p">.</span><span class="nx">test</span><span class="p">.</span><span class="nx">js</span> <span class="nx">test</span><span class="o">/</span><span class="nx">bootstrap</span><span class="p">.</span><span class="nx">ts</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、全部の<code>reference</code>が解決されると、さっきの<code>backbone.js</code>の下にテストが丸々ついたようなファイルが生成されます。
これをTestemに食わせます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// testem.json</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;framework&quot;</span> <span class="o">:</span> <span class="s2">&quot;mocha&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;src_files&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;vendor/chai.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;vendor/underscore.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;backbone.test.js&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでTestemでテストできるようになりました、<code>tsc</code> には <code>watch</code> があるので、これを使って 変更監視 -> 自動コンパイル -> テスト自動実行 というすてき環境を作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">tsc</span> <span class="o">--</span><span class="nx">watch</span> <span class="o">-</span><span class="nx">out</span> <span class="nx">backbone</span><span class="p">.</span><span class="nx">test</span><span class="p">.</span><span class="nx">js</span> <span class="nx">test</span><span class="o">/</span><span class="nx">bootstrap</span><span class="p">.</span><span class="nx">js</span>
</span></code></pre></td></tr></table></div></figure>


<p>やったー！これでいける！
・・・と思ったんですが、どうもちゃんと <code>watch</code> が動いていなくて、うまくコンパイルできません。
なので<a href="https://github.com/yaakaito/typebone/blob/master/Guardfile">Guardで代用</a>しました。</p>

<p>ちょっと面倒ですが、すてき環境ができましたね！</p>

<h2>カバレッジ</h2>

<p>カバレッジをとるときは、<code>backbone.js</code>側に<code>jscoverage</code>をかける必要があるので、別々にコンパイルが必要です。
となると、さっきの <code>test/bootstrap.js</code> なんかで依存関係を解決しながらコンパイルできないので、個別にコンパイルします。
個別にコンパイルしたテストを全部 <code>cat</code>で繋げて、<code>all-tests.js</code> みたいなのを作ります。あとは前回を参考にしてください。</p>

<p>Makefileにするとこんな感じ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">compile</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">tsc</span> <span class="o">--</span><span class="nx">out</span> <span class="nx">backbone</span><span class="p">.</span><span class="nx">js</span> <span class="nx">src</span><span class="o">/</span><span class="nx">backbone</span><span class="p">.</span><span class="nx">ts</span>
</span><span class='line'>
</span><span class='line'><span class="nx">compile</span><span class="o">-</span><span class="nx">test</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">tsc</span> <span class="nx">test</span><span class="o">/*</span><span class="p">.</span><span class="nx">ts</span>
</span><span class='line'>  <span class="nx">cat</span> <span class="nx">test</span><span class="o">/*</span><span class="p">.</span><span class="nx">js</span> <span class="o">&gt;</span> <span class="nx">all</span><span class="o">-</span><span class="nx">tests</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>  <span class="nx">rm</span> <span class="nx">test</span><span class="o">/*</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">cover</span><span class="o">:</span> <span class="nx">compile</span> <span class="nx">compile</span><span class="o">-</span><span class="nx">test</span>
</span><span class='line'>  <span class="nx">jscoverage</span> <span class="nx">backbone</span><span class="p">.</span><span class="nx">js</span> <span class="nx">backbone</span><span class="p">.</span><span class="nx">cover</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>  <span class="nx">mocha</span><span class="o">-</span><span class="nx">phantomjs</span> <span class="o">-</span><span class="nx">R</span> <span class="nx">json</span><span class="o">-</span><span class="nx">cov</span> <span class="nx">cover</span><span class="o">-</span><span class="nx">runner</span><span class="p">.</span><span class="nx">html</span> <span class="o">|</span> <span class="nx">json2htmlcov</span> <span class="o">&gt;</span> <span class="nx">cover</span><span class="p">.</span><span class="nx">html</span>
</span></code></pre></td></tr></table></div></figure>


<h2>とりあえず</h2>

<p>こんな感じで一旦は不満なく開発できる環境ができました。</p>

<p>TypeScriptまだ勝手がよく分かってないので、コードはあんまり見ないでーーー＾ー＾</p>

<p>あと、Backboneの移植をやってるからか、テスト側がどうしてもほとんどJavaScriptっぽい感じになるんですが、
無駄にコンパイラに怒られてだるいなーと思う事も。(まあ当然なのだが)
なんでこういう場合は、テスト側は生のJavaScriptでも十分なのかなーと思った。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocha + Testem + HTMLCov 出来るようにする]]></title>
    <link href="http://yaakaito.org/blog/2013/03/23/testing-mocha-testem-htmlcov/"/>
    <updated>2013-03-23T14:32:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/23/testing-mocha-testem-htmlcov</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！だるくなくJavaScript開発できる環境を探しています。</p>

<p>というわけでタイトル通りなんですが、Mocha + Testem + HTML-Cov環境を試してみようと思うので、それの作り方です。
想定している使い方としては、普段はTestemを使ってChrome、Firefox、Safariあたりでテストを回しつつ、たまにカバレッジを確認して〜くらいの割と普通な感じです。
CIは今回はやりません。本当は同じランナーでやりたかったんですが、めんどいので分けました。
もっといいやり方知ってる人いたら教えてください！</p>

<p><a href="https://github.com/yaakaito/mocha-testem-htmlcov">作られたリポジトリはgithubにあります。</a></p>

<h2>必要な物の準備</h2>

<p>せっかくなので？ node 0.10.1 を使います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nvm install 0.10.1</span></code></pre></td></tr></table></div></figure>


<p>必要なモジュールをいれます。</p>

<ul>
<li>testem</li>
<li>mocha</li>
<li>jscoverage</li>
<li>json2htmlcov</li>
<li>mocha-phantomjs

<ul>
<li>phantomjs</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install phantomjs</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install -g testem mocha mocha-phantomjs jscoverage json2htmlcov</span></code></pre></td></tr></table></div></figure>


<p>メンドーだったので僕は<code>Makefile</code>使ってますが、<code>grunt</code>とかがいいですって人はそれもいれるといいと思います。</p>

<h3>chaiとsinonをとってくる</h3>

<p>chaiとsinonを使いたいので、とってきます。sinon-chaiは別にいらないかなーと思ってる子なので入れてません。
<code>/test/vendor</code> みたいなところに配置しておきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -O http://chaijs.com/chai.js
</span><span class='line'>$ curl -O http://sinonjs.org/releases/sinon-1.6.0.js</span></code></pre></td></tr></table></div></figure>


<h2>適当にテスト用のjs書く</h2>

<p>サンプル用に適当に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// /src/sample.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">A</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">A</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">A</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">method</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;YES&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;NO&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">A</span><span class="p">;</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p>テストはこんな感じ、<code>NO</code>の方は通らないようにしてあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// /test/tests/sample-tests.js</span>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Sample&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">a</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">A</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;YES&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">chai</span><span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">method</span><span class="p">(</span><span class="kc">true</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="s1">&#39;YES&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>testem.jsonを書く</h2>

<p>chaiやsinonを一緒に混ぜるようにして、<code>testem.json</code>を作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;framework&quot;</span> <span class="o">:</span> <span class="s2">&quot;mocha&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;src_files&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;src/**/*.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;test/vendor/chai.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;test/vendor/sinon.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;test/tests/**/*-tests.js&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>これでtestem側は終わりです。走らせてみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">testem</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://yaakaito.org/images/testem-run.png"></p>

<p>テストしたいブラウザで <code>http://localhost:7357</code> を開きます。あとは開きっぱでよいです。</p>

<p><img src="http://yaakaito.org/images/testem-browsers.png"></p>

<p><img src="http://yaakaito.org/images/testem-result.png"></p>

<p>テストしてくれます、便利ですね。</p>

<h2>HTMLCovでカバレッジを出す</h2>

<p>こういう感じにカバレッジを出す事ができます。</p>

<p><img src="http://yaakaito.org/images/htmlcov.png"></p>

<p>適当にいろいろなブラウザでテストした結果をマージできると理想だけど、面倒そうなのでphantomjsで・・・ 、というか<a href="https://github.com/visionmedia/mocha/issues/281">サポートされていない</a>のかな。
<a href="https://github.com/visionmedia/mocha/pull/506">こういうのもあったけど</a>今回はスルーで。</p>

<p>手順としては</p>

<ul>
<li><code>jscoverage</code> で対象のjsを変換</li>
<li><code>mocha-phantomjs</code> で実行して <code>jsoncov</code> の形で吐き出す</li>
<li><code>json2htmlcov</code> を通して HTMLCov へ変換</li>
</ul>


<p>と、ちょっと面倒くさい。</p>

<h3>ランナーを用意する</h3>

<p><code>mocha</code> のランナーを用意します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">mocha</span> <span class="nx">init</span> <span class="p">[</span><span class="nx">dir</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>吐き出されたのを適当に <code>coverage-runner.html</code> みたいなのにリネームして、必要なファイルを読み込むようにする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;../cover/sample.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./vendor/mocha.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./vendor/chai.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./vendor/sinon.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span><span class="nx">mocha</span><span class="p">.</span><span class="nx">setup</span><span class="p">(</span><span class="s1">&#39;bdd&#39;</span><span class="p">)</span><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./tests/sample-tests.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>僕はカバレッジに使うjsを<code>cover</code>というディレクトリに吐き出すようにしたので、こんな感じで。</p>

<p><code>mocha-phantomjs</code> を使えるようにブートを置き換えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">mochaPhantomJS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">mochaPhantomJS</span><span class="p">.</span><span class="nx">run</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">mocha</span><span class="p">.</span><span class="nx">run</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>カバレッジを出すコマンド</h3>

<p>さっきの手順に従ったコマンドで実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">jscoverage</span> <span class="nx">src</span><span class="o">/</span><span class="nx">sample</span><span class="p">.</span><span class="nx">js</span> <span class="p">.</span><span class="o">/</span><span class="nx">cover</span><span class="o">/</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">mocha</span><span class="o">-</span><span class="nx">phantomjs</span> <span class="o">-</span><span class="nx">R</span> <span class="nx">json</span><span class="o">-</span><span class="nx">cov</span> <span class="nx">test</span><span class="o">/</span><span class="nx">cover</span><span class="o">-</span><span class="nx">runner</span><span class="p">.</span><span class="nx">html</span> <span class="o">|</span> <span class="nx">json2htmlcov</span> <span class="o">&gt;</span> <span class="nx">cover</span><span class="p">.</span><span class="nx">html</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで <code>cover.html</code> が作られるので、あとはそれを<code>open</code>すればよいです。</p>

<p>ちょっと面倒ですが、簡単な部類でしたね。</p>

<h2>ちなみに</h2>

<p>僕は Buster.JS 派です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flow.jsをObjective-Cに移植してみた]]></title>
    <link href="http://yaakaito.org/blog/2013/03/21/flow-m-0-0-1/"/>
    <updated>2013-03-21T03:24:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/21/flow-m-0-0-1</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
<a href="http://www.slideshare.net/uupaa/flowjs">Flow.js</a> というJavaScriptのライブラリを見て、面白いなーと思ったのでObjective-Cでも似たようなことが出来るようにしてみた。junctionとforkは(まだ)実装してないので、完全な移植ではないです。
コードも適当なので遊び程度に見ていただければ。
ところで英語全然書けないので誰か「Natural English」ってプルリクをください。</p>

<p><a href="https://github.com/yaakaito/Flow.m">Flow.m</a></p>

<p>名前はまんま、一応Cocoapodsにも入れてはいるのでCocoapods使ってる人は</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pod</span> <span class="s1">&#39;Flow.m&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>で使える。</p>

<h2>出来ること</h2>

<p>といっても、基本的には本家と同じなので、<a href="http://www.slideshare.net/uupaa/flowjs">本家のスライド</a>の方が詳しいのでそちらを参照していただきたく。
ただ微妙に仕様が違うところもある感じなので流しで書いておく。</p>

<h3>基本的な使い方</h3>

<p><code>FMFlow</code>のオブジェクトを作る時に、<code>waits</code>と<code>completionBlock</code>を渡す。
<code>FMFlow</code>のオブジェクトには<code>pass</code>ってメソッドが生えていて、これを呼び出すとカウンタが一個づつあがる。
呼び出した回数が<code>waits</code>に達したら、<code>completionBlock</code>が呼び出される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">FMFlow</span> <span class="o">*</span><span class="n">flow</span> <span class="o">=</span> <span class="p">[</span><span class="n">FMFlow</span> <span class="nl">flowWithWaits:</span><span class="mi">2</span> <span class="nl">completionBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="n">FMArguments</span> <span class="o">*</span><span class="n">arguments</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Flow!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">flow</span> <span class="n">pass</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">flow</span> <span class="n">pass</span><span class="p">];</span> <span class="c1">// Flow!</span>
</span></code></pre></td></tr></table></div></figure>


<h3>extends</h3>

<p>処理待機数を増やす、増える方向だけ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">FMFlow</span> <span class="o">*</span><span class="n">flow</span> <span class="o">=</span> <span class="p">[</span><span class="n">FMFlow</span> <span class="nl">flowWithWaits:</span><span class="mi">1</span> <span class="nl">completionBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="n">FMArguments</span> <span class="o">*</span><span class="n">arguments</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Flow!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">flow</span> <span class="nl">extend:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">flow</span> <span class="n">pass</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">flow</span> <span class="n">pass</span><span class="p">];</span>  <span class="c1">// Flow!</span>
</span></code></pre></td></tr></table></div></figure>


<h3>arguments</h3>

<p>本家に合わせる為に若干無理してるんだけど、<code>passWithValue:</code> か <code>passWithValue:forKey:</code>で渡せるし、インデックスかキーか好きなほうでどうぞ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">FMFlow</span> <span class="o">*</span><span class="n">flow</span> <span class="o">=</span> <span class="p">[</span><span class="n">FMFlow</span> <span class="nl">flowWithWaits:</span><span class="mi">2</span> <span class="nl">completionBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="n">FMArguments</span> <span class="o">*</span><span class="n">arguments</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">([</span><span class="n">arguments</span> <span class="nl">argumentAtIndex:</span><span class="mi">0</span><span class="p">]);</span> <span class="c1">// HOGE</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">([</span><span class="n">arguments</span> <span class="nl">argumentAtIndex:</span><span class="mi">1</span><span class="p">]);</span> <span class="c1">// FUGA</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">([</span><span class="n">arguments</span> <span class="nl">argumentForKey:</span><span class="s">@&quot;fuga&quot;</span><span class="p">]);</span> <span class="c1">// FUGA</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">flow</span> <span class="nl">passWithValue:</span><span class="s">@&quot;HOGE&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">flow</span> <span class="nl">passWithValue:</span><span class="s">@&quot;FUGA&quot;</span> <span class="nl">forKey:</span><span class="s">@&quot;fuga&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>missとmissable</h3>

<p>失敗可能回数の設定と、失敗の通知</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">FMFlow</span> <span class="o">*</span><span class="n">flow</span> <span class="o">=</span> <span class="p">[</span><span class="n">FMFlow</span> <span class="nl">flowWithWaits:</span><span class="mi">1</span> <span class="nl">completionBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="n">FMArguments</span> <span class="o">*</span><span class="n">arguments</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Flow!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">flow</span> <span class="nl">missable:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">flow</span> <span class="n">miss</span><span class="p">];</span> <span class="c1">// 1回は許可してるので問題ない</span>
</span><span class='line'><span class="p">[</span><span class="n">flow</span> <span class="n">pass</span><span class="p">];</span> <span class="c1">// Flow!</span>
</span></code></pre></td></tr></table></div></figure>


<p>失敗可能回数を超えた時は</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">FMFlow</span> <span class="o">*</span><span class="n">flow</span> <span class="o">=</span> <span class="p">[</span><span class="n">FMFlow</span> <span class="nl">flowWithWaits:</span><span class="mi">2</span> <span class="nl">completionBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="n">FMArguments</span> <span class="o">*</span><span class="n">arguments</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// error がこんな感じで渡ってくる</span>
</span><span class='line'>    <span class="c1">// error.domain : org.yaakaito.flow</span>
</span><span class='line'>    <span class="c1">// error.code   : kFMErrorCodeFailure</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">([</span><span class="n">arguments</span> <span class="nl">argumentAtIndex:</span><span class="mi">0</span><span class="p">]);</span> <span class="c1">// ここまでに渡した引数は渡ってくる </span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">flow</span> <span class="nl">missable:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">flow</span> <span class="n">miss</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">flow</span> <span class="nl">passWithValue:</span><span class="s">@&quot;HOGE&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">flow</span> <span class="n">miss</span><span class="p">];</span> <span class="c1">// 失敗したのでCompletionBlockを呼び出す</span>
</span></code></pre></td></tr></table></div></figure>


<h3>exit</h3>

<p>強制終了。これはちょっと本家と違って、<code>userInfo</code>を渡すと、<code>CompletionBlock</code>の<code>error.userInfo</code>に入ってくるようになってる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">FMFlow</span> <span class="o">*</span><span class="n">flow</span> <span class="o">=</span> <span class="p">[</span><span class="n">FMFlow</span> <span class="nl">flowWithWaits:</span><span class="mi">1</span> <span class="nl">completionBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="n">FMArguments</span> <span class="o">*</span><span class="n">arguments</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// error.domain : org.yaakaito.flow</span>
</span><span class='line'>    <span class="c1">// error.code   : kFMErrorCodeExit</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">([[</span><span class="n">error</span> <span class="n">userInfo</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="s">@&quot;msg&quot;</span><span class="p">]);</span> <span class="c1">// えらー</span>
</span><span class='line'>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">flow</span> <span class="nl">exit:</span><span class="err">@</span><span class="p">{</span> <span class="s">@&quot;msg&quot;</span> <span class="o">:</span> <span class="s">@&quot;えらー&quot;</span><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じです、残りはまた今度・・・</p>

<h2>ところで</h2>

<p>AppCode2.0のDarculaテーマは、見やすいのでおすすめです。</p>

<p>あああと非同期テストが必要になったわけなんですが、Cocoapods見てても、SenTestingKit+Asyncみたいなのはみるんだけど単純なモジュールねーなーみたいな。
みんなSenTestingKit用のスーパークラス作るのかなーと思った。
僕は別にちょっと待っててくれればいいだけなので、べつにただのオブジェクトでもいいわってなって、<a href="https://github.com/yaakaito/AsyncTestSupporter">こういう</a>の作った。作ったというか、元から他のコードで使ってたやつをpod化しただけ。
なんか<code>waitForTimeout:</code>くらいしか使わんし、それで十分やろ、とか思うので、それしか作ってない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testAsyncMethod</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Create instance.</span>
</span><span class='line'>  <span class="n">AsyncTestSupporter</span> <span class="o">*</span><span class="n">asyncTest</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AsyncTestSupporter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Prepare for asynchronous call.</span>
</span><span class='line'>  <span class="p">[</span><span class="n">asyncTest</span> <span class="n">prepare</span><span class="p">]</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">__weak</span> <span class="n">AsyncTestSupporter</span> <span class="o">*</span><span class="n">that</span> <span class="o">=</span> <span class="n">asyncTest</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// Call asynchronous method.</span>
</span><span class='line'>  <span class="p">[</span><span class="n">object</span> <span class="nl">asyncMethod:</span><span class="o">^</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// Completion blocks.</span>
</span><span class='line'>    <span class="c1">// Wait for notify with timeout seconds.</span>
</span><span class='line'>    <span class="p">[</span><span class="n">that</span> <span class="nl">waitForTimeout:</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Notify state if completed asynchronous method.</span>
</span><span class='line'>  <span class="p">[</span><span class="n">asyncTest</span> <span class="nl">notify:notify:</span><span class="n">kAsyncTestSupporterWaitStatusSuccess</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chaplin Overview オレオレ意訳]]></title>
    <link href="http://yaakaito.org/blog/2013/03/15/chaplin-overview-ja/"/>
    <updated>2013-03-15T07:22:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/15/chaplin-overview-ja</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。
このエントリは<a href="http://chaplinjs.org/">Chaplin</a>の<a href="https://github.com/chaplinjs/chaplin/blob/master/docs/overview.md">Overview</a>のオレオレ意訳です。あんまり信用はしないでください。
おかしいだろそれ、というのあれば教えてください。</p>

<p><em>italic</em>はこうでは、と思ったのを勝手に足してるところです。</p>

<h2>アーキテクチャ</h2>

<p>ChaplinはJavaScriptでWebアプリケーションを作るためのアーキテクチャで、backboneをベースにしてるよ。
<a href="http://moviepilot.com">moviepilot.com</a>みたいな単一ページの大規模プロジェクトに使われてるよ。</p>

<h2>フレームワーク</h2>

<h3>Application</h3>

<p>ブートストラップ。Chaplinを利用する上で重要なとこだよ。</p>

<h3>Router</h3>

<p>定義されたURLマッピングにしたがって、<code>Controller</code>の各アクションを呼び出すことを助ける部分だよ。
URLの変更などを監視して、責任を持つよ。
でも、<code>Router</code>が直接<code>Controller</code>をキックするんじゃなくて、それは<code>Dispatcher</code>の仕事だよ。</p>

<h3>Route</h3>

<p>Railsに似たURLマッピングを提供するよ。<code>route.coffee</code>みたいなファイル作るといいよ。
こんな感じで定義するよ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">match</span> <span class="s">&#39;likes/:id&#39;</span><span class="p">,</span> <span class="s">&#39;likes#show&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ルートにマッチしたら、GETパラメータと、パターン一致部分(例で言えば<code>id</code>) <em>と、オプションの引数</em> を持って、<code>matchRoute</code>イベントを発行するよ。
これは<code>Dispacther</code>に引き継がれるよ。</p>

<h3>Dispachter</h3>

<p>ルーティングに関するイベントをListenしてるよ。
対象のイベントが発生したら、それに対応する<code>Controller</code>のインスタンスを生成して、対象のアクション(<code>Controller</code>のメソッド)を呼び出すよ。</p>

<h3>Layout</h3>

<p><code>Layout</code>はアプリケーションの中で一番外側にあるビューだよ。新しい<code>Controller</code>が起動されると、<code>Layout</code>は新しい<code>Controller</code>をメインビューにするよ。</p>

<p><code>Layout</code>はアプリケーション内でのリンクをうまく処理する役割ももつよ。たとえば<code>&lt;a href="http://yaakaito.org/foo"&gt;</code>というリンクなんかも、正しく機能するようにしてくれるよ。</p>

<p>そして、<code>window</code>や<code>document</code>などのトップレイヤーに対するイベントハンドリングなどは<code>Layout</code>で行うよ。</p>

<h3>Mediator</h3>

<p><code>Mediator</code>はpub/subを実装するためのブローカーだよ。
Chaplinアプリケーションでは、ほとんどのモジュール間通信で利用されるべきだよ。
モジュールは<code>this.publishEvent</code>でイベントを発行できるし、<code>this.subscribeEvent</code>でイベントをリッスンできるよ。
例えばユーザーモデルのような永続的でグローバルにアクセス可能なものを共有するために使ったりもできるよ。</p>

<h3>Controller</h3>

<p><em>BackboneのControllerを継承してるよ。だからBackboneの方もちゃんと見た方がいいよ。</em></p>

<p><code>Controller</code>は<code>Model</code>とそれに結びつけられる<code>View</code>をインスタンス化して、管理するよ。
１つの<code>Controller</code>はアプリケーションの１画面を構成するようにするのが普通だよ。
けど、メインビュー的なものを提供して、他に現在のURLを表すためのコントローラーが存在することもあるよ。 <em>(多分HeaderとかFooterなんかの共通パーツのこと？)</em></p>

<p>コントローラーはアプリケーションの機能を定義することが多いよ。
<code>Controller</code>は<code>index</code>や<code>show</code>、<code>edit</code>のようなアクションメソッドを提供することができるよ。
そしてこれらのアクションはURLが一致したときに<code>Dispacther</code>から呼び出されるよ。</p>

<h3>Model</h3>

<p><em>BackboneのModelを継承してるよ。だからBackboneの方もちゃんと見た方がいいよ。</em></p>

<p>データと、それに操作を行うためのロジックをもってるよ。</p>

<h3>Collection</h3>

<p><em>BackboneのCollectionを継承してるよ。だからBackboneの方もちゃんと見た方がいいよ。</em></p>

<p><code>Model</code>のリストを持つためのものだよ。クライアントサイドでフィルタリングをしたり、ソートしたりするためのロジックをもってるよ。</p>

<h3>View</h3>

<p><em>BackboneのViewを継承してるよ。だからBackboneの方もちゃんと見た方がいいよ。</em></p>

<p><code>Model</code>をテンプレートを使って描画したり、その中に含まれるユーザーイベントなどを管理するよ。</p>

<h3>Collection View</h3>

<p><code>Collection</code>のためのビューだよ。それぞれの<code>Model</code>に対する<code>View</code>を作って、それを管理するよ。</p>

<h2>アプリケーションの起動フロー</h2>

<p>アプリケーションは、<code>Chaplin.Application</code>を継承したところから始まるよ。
<code>Application</code>では<code>Dispacther</code> <code>Layout</code> <code>Mediator</code> <code>Router</code> の順で、これらをインスタンス化してセットアップしてね。</p>

<p><code>Router</code>に<code>Route</code>を登録するよ。普通は設定ファイルとして<code>route.coffee</code>か<code>route.js</code>使うよ。
<code>Route</code>は<code>Controller</code>のアクションにURLパターンをマッピングするよ、たとえば<code>/</code>なら<code>HomeController</code>の<code>index</code>、という感じだよ。</p>

<p>ここまで終わったら、<code>initRouter</code>を呼び出して、URLの監視を始めよう。URLにマッチするパターンであれば、<code>Dispacther</code>や他のモジュールへ通知するよ。</p>

<p><code>Dispacther</code>まで来たら、対象の<code>Controller</code>をインスタンス化して、対応するアクションを呼び出すよ。
<code>Dispachter</code>はアクティブな<code>Controller</code>を管理していて、必要ないものを破棄するよ。</p>

<p>対応するアクションが呼び出されたら、<code>Model</code>や<code>Collection</code>を<code>Ctonroller</code>で生成して、それに対応する<code>View</code>をレンダリングしていくのがよくある流れだよ。
<code>Model</code>や<code>Collection</code>は必要に応じてサーバーからデータを取得したりするよ。
<code>Model</code>や<code>Collection</code>と、それに対応する<code>View</code>は、<code>Controller</code>によって管理されるのが通例だよ。</p>

<h2>メモリ管理について</h2>

<p>Chaplinでは、適切なメモリ管理を行う、というのがコアにあるよ。</p>

<p>みんな、あまりJavaScriptでGCやメモリ管理に関する議論をしないけど、それは重要なトピックだよ。
イベントドリブンで動くシステムは、イベントを登録するときにオブジェクト間の参照が発生するし、それが削除されないと、メモリ解放されないよ。</p>

<p>だから、ChaplinではBackboneのModel、Collection、View、Controllerを拡張して、それらのクリーンアップを保証して、パワフルな処理プロセスを実装できるようにしているよ。</p>

<h2>終わり</h2>

<p>起動フローとかはコードと付き合わせないと分かりにくいところが多いと思うので、<a href="https://github.com/paulmillr/ostio/blob/master/app/application.coffee">ost.ioのブート</a>とか合わせて読むといいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hosted CIでiOSライブラリ(Overline)のテスト回してみた]]></title>
    <link href="http://yaakaito.org/blog/2013/03/15/hosted-ci-with-ocunit/"/>
    <updated>2013-03-15T02:05:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/15/hosted-ci-with-ocunit</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。
<a href="https://hosted-ci.com/">Hosted CI</a>という、なんとMac環境でのJenkinsをホスティングしてくれるという超絶便利サービスがあるのですが、
そこで<a href="https://github.com/yaakaito/overline">Overline</a>のテストを回してみました。(Hosted CIはまだベータ版みたいです。)</p>

<p>参考までに、というかいろいろありそうなので、書いた時点でのOverlineの開発環境を先に乗せておきます。</p>

<ul>
<li>OS 10.7.5</li>
<li>AppCode 1.6</li>
<li>Xcode 4.5</li>
<li>Cocoapods 0.15.2

<ul>
<li>OCHamcrest 1.9</li>
</ul>
</li>
</ul>


<p>コードはAppCodeで書いています。(Hosted CI関係ないけどAppCodeの問題もあったので下に書きます)
テストはSenTestingKit + OCHamcrest。
いろいろあってメインマシンでやらなかったので、ちょっと古いです。</p>

<h2>Hosted CI へ登録する</h2>

<p>OpenSourceだしfree planで登録しました。
ちょっと時間がかかったので、先にローカルでやれることをやっておきます。</p>

<h2>ローカルでテストをビルドする</h2>

<p>とりあえずローカルでテストがビルドできないと話にならないので、そっちを確認します。
Cocoapods込みで<code>xcodebuild</code>するのが思えば始めてだったので、ちょっと面倒でした。</p>

<p>まずテスト用のSchemeを作ります。
ビルドの設定へ<code>Jenkins</code>という名前のschemeを定義してあげます。</p>

<p><img src="http://yaakaito.org/images/appcode-jenkins-scheme.png"></p>

<p>ところでこのschemeをjenkinsから使うのかと思ったんですが、実はいらなかったので、自身のある人はやらなくてよいかもしれません。
作ったら<code>xcodebuild</code>で<code>-list</code>してみましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ xcodebuild -workspace Overline.xcworkspace -list
</span><span class='line'>Information about workspace "Overline":
</span><span class='line'>    Schemes:
</span><span class='line'>        ...
</span><span class='line'>        Jenkins</span></code></pre></td></tr></table></div></figure>


<p>こんな感じに出てきたら準備完了です。<code>xcodebuild</code>で<code>Jenkins</code>のshcemeをビルドします</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ xcodebuild -workspace Overline.xcworkspace -scheme 'Jenkins' -configuration 'Debug' -sdk iphonesimulator clean build</span></code></pre></td></tr></table></div></figure>


<h2>Hosted CI へログイン</h2>

<p>登録できたっぽいメールがきたので、Hosted CI へログインしましょう！ログインするとDashboardが出てきます。何個かプロジェクトがありますね。</p>

<p><img src="http://yaakaito.org/images/hosted-ci-dashboard.png"></p>

<p>下の方にある Create new project からプロジェクトを追加します。</p>

<p><img src="http://yaakaito.org/images/hosted-ci-create.png"></p>

<h2>プロジェクトの作成</h2>

<p>新しいプロジェクトのセットアップを始めます。</p>

<p><img src="http://yaakaito.org/images/hosted-ci-new-project.png"></p>

<p>おおーここから大まかな設定は出来るのかー。便利だなー。
けどスクリプトとかどうせ書くんだろうしだるいなぁ、とか思いながらセットアップして、 Create Project します。さて次はめんどうな・・・</p>

<p><img src="http://yaakaito.org/images/hosted-ci-config-xcode.png"></p>

<p>なん・・・だと・・・</p>

<p><img src="http://yaakaito.org/images/hosted-ci-selected-target.png"></p>

<p>こいつは・・・まさか・・・ 力強くUpdateします。</p>

<p><img src="http://yaakaito.org/images/hosted-ci-created-project.png"></p>

<p>プロジェクトのページができます。ビルドします。</p>

<p><img src="http://yaakaito.org/images/hosted-ci-jenkins-console.png"></p>

<p><img src="http://yaakaito.org/images/hosted-ci-test-complete.png"></p>

<p>俺の知ってるJenkins+iOSと違う・・・。</p>

<p>という感じで拍子抜けするくらい簡単にセットアップが出来てしまいました。
(正確にはAppCodeの問題で2~3回ビルドしたんですが、それは後述します。)</p>

<p>なにげにPodfileのサポートとかも入っててすごい・・・。</p>

<h2>GithubにPushしたときにHookでテスト</h2>

<p>HookのURLが提供されているので、それを使います。プロジェクトのページにあります。</p>

<p><img src="http://yaakaito.org/images/hosted-ci-github-hook.png"></p>

<p>あとはGithubからJenkins Hook URL を設定して終わりです。</p>

<p><img src="http://yaakaito.org/images/github-jenkins-hook.png"></p>

<h2>と、というわけで</h2>

<p>あっさり動いてしまいましたね・・・？</p>

<p><img src="http://tiqav.com/et.jpg"></p>

<p>あ、いや本当に超絶素晴らしいサービスだと思いますし、フィードバックなどしつつ使わせて頂こうと思います、はい。</p>

<h2>【おまけ】AppCode使っててうまくいかなかった話</h2>

<p>Cocoapodsを使うときに、</p>

<blockquote><p>[!] Xcodeproj doesn&#8217;t know about the following attributes lastKnownFileTypetext for the &#8216;PBXGroup&#8217; isa.</p></blockquote>


<p>こういう感じになってしまったので、何かなーと思ったら、</p>

<blockquote><p>Overline これにはまってた  &#8220;Problematic attribute added to PBXGroup when renaming group using AppCode : OC-5881&#8221;  http://bit.ly/13XdHU8</p><footer><strong>@azu_re</strong> <cite><a href='https://twitter.com/azu_re/status/312065250436456448'>twitter.com/azu_re/status/&hellip;</a></cite></footer></blockquote>


<p>というのを見つけて、<a href="http://bit.ly/13XdHU8">リンク先</a>見てみたらどうもこれっぽい。
<code>lastKnownFileType = text;</code> というのが入ってしまうのだとか。</p>

<p>僕の場合はNSNumberのグループに入ってたので、<a href="https://github.com/yaakaito/Overline/commit/01fbeaf306a56319485e394d56b249bd502cab30">これ消したら</a>なおった。</p>

<p>ありがとうございます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brunchプロジェクトでtestemを使う]]></title>
    <link href="http://yaakaito.org/blog/2013/03/14/brunch-withw-testem/"/>
    <updated>2013-03-14T16:36:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/14/brunch-withw-testem</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。
<a href="http://yaakaito.org/blog/2013/03/08/hello-brunch/">前回</a>みたいな手順で始めたChaplinのプロジェクトで<a href="https://github.com/airportyh/testem">testem</a>を使う手順です。
Brunch with Chaplinを使っていますが、Brunchプロジェクトなら多分大体同じ感じでいけると思います。</p>

<h2>testemの準備</h2>

<p>testemがないと始まらないのでtestemをインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install -g testem</span></code></pre></td></tr></table></div></figure>


<h2>testem.jsonの設定</h2>

<p>BrunchはデフォルトでMochaを使ったテストのテンプレートを作ってくれるので、これを参考にします。
<code>brunch build</code>すると、<code>/public/test/index.html</code>ができるので、これを参考に書いていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;framework&quot;</span> <span class="o">:</span> <span class="s2">&quot;mocha&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;src_files&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;public/javascripts/vendor.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;public/javascripts/app.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;public/test/javascripts/test-vendor.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;public/test/javascripts/test.js&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これをプロジェクトのルートに配置します。</p>

<h2>brunchが生成するmochaを消す</h2>

<p>brunchはmochaやsinonを <code>public/test/javascripts/test-vendor.js</code> にまとめてビルドしているので、このビルドからmochaを外します。とりあえず <code>rm</code> してしまいます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">rm</span> <span class="nx">test</span><span class="o">/</span><span class="nx">vender</span><span class="o">/</span><span class="nx">scripts</span><span class="o">/</span><span class="nx">mocha</span><span class="p">[</span><span class="nx">version</span><span class="p">].</span><span class="nx">js</span>
</span></code></pre></td></tr></table></div></figure>


<h2>brunch watchを起動する</h2>

<p>brunchはテストをまとめて <code>public/test/javascripts/test.js</code> にビルドしてくれます。
なのでtestem側からはこれを見ているだけでOKです。便利ですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">brunch</span> <span class="nx">w</span> <span class="o">-</span><span class="nx">s</span>
</span></code></pre></td></tr></table></div></figure>


<p>ついでなのでサーバーも立てておきます。</p>

<h2>testemでテストする</h2>

<p>あとはtestemでテストするだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">testem</span>
</span></code></pre></td></tr></table></div></figure>


<p>便利ですね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブログのデザイン変えた]]></title>
    <link href="http://yaakaito.org/blog/2013/03/14/new-blog-design/"/>
    <updated>2013-03-14T03:27:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/14/new-blog-design</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！</p>

<p>ブログのデザイン変えました！</p>

<p>読み返してて、「くそっよみづらいし、俺は読む事に集中したいんだよ」と思ったので直した、読みやすさ重視。</p>

<p>これあってもなくても一緒やろみたいなのを全部消して、きれいに文章読めるように工夫したつもりである。緑だけ残した。緑見にくいし控えめで。
(そもそもの話ほとんど文字サイズと行間の調整しかしていない)</p>

<p>モバイル対応とかやるのだるいので、だいたいどれでみても同じようになるようにした。</p>

<p>これでまた少し世界をよく出来た気がします、やりましたね。</p>

<p>あとついでだったしドメイン変えた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BrunchでJavaScriptアプリはじめる手順]]></title>
    <link href="http://yaakaito.org/blog/2013/03/08/hello-brunch/"/>
    <updated>2013-03-08T08:14:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/08/hello-brunch</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
最近<a href="http://brunch.io/">Brunch</a>というものを知ったので、とりあえずはじめてみたときのメモです。
正確には<a href="http://chaplinjs.org/">Chaplin</a>を先に知って、結構良さげだし試してみよーとか思ったところが始まりなので、brunch-with-chaplinを前提にしてます。(今回はchaplinの話はしません。)</p>

<h2>brunchってそもそも何</h2>

<p>gruntとか使っている人は、gruntにgiter8をくっつけて++というイメージが分かりやすいかと思います。Yeomanとかその系列のものです。
レイヤーが違うので比較してもあんまり意味はないんですが、grunt使っていた頃からすると、</p>

<ul>
<li>最初からCoffeeScriptのことを考えているので、CoffeeScript使う場合は嬉しい (最近はそうでもないみたいだけど)</li>
<li>プロジェクトのひな形作りやすいのは嬉しい</li>
<li>ビルトインサーバーがあるので、<code>watch --server</code> みたいなの出来て嬉しい</li>
<li>Mocha+phantomjsを最初から生成してくれるので、テストドリブンで始めるが楽</li>
<li>ブラウザのオートリロードとかもあるよ！</li>
</ul>


<p>という感じで、gruntみたいに自分でタスク組んで〜とやるよりは、サクッと開発を始められる感じです。
そこまで使ってないし、まだよくわからんので説明はこのくらいで。</p>

<p>CommonJSっぽいモジュールシステムとかはまあ一長一短だと思うのであんまり。</p>

<h2>はじめる</h2>

<p>brunchをインストールします。(node 0.6.10 ~)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install -g brunch</span></code></pre></td></tr></table></div></figure>


<h3>プロジェクトのひな形を作る</h3>

<p>Githubからテンプレートを引っ張ってきて作ります。今回はchaplinが使いたかったので、brunch-with-chaplinを引っ張ってきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brunch new &lt;app-name&gt; --skeleton https://github.com/paulmillr/brunch-with-chaplin</span></code></pre></td></tr></table></div></figure>


<p>簡単ですね。<code>tree</code>してみるとこんな感じになってます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tree -L 2 -F --dirsfirst
</span><span class='line'>.
</span><span class='line'>├── app/
</span><span class='line'>│   ├── assets/
</span><span class='line'>│   ├── controllers/
</span><span class='line'>│   ├── lib/
</span><span class='line'>│   ├── models/
</span><span class='line'>│   ├── views/
</span><span class='line'>│   ├── application.coffee
</span><span class='line'>│   ├── initialize.coffee
</span><span class='line'>│   ├── mediator.coffee
</span><span class='line'>│   └── routes.coffee
</span><span class='line'>├── generators/
</span><span class='line'>│   ├── collection/
</span><span class='line'>│   ├── collection-test/
</span><span class='line'>│   ├── collection-view/
</span><span class='line'>│   ├── controller/
</span><span class='line'>│   ├── controller-test/
</span><span class='line'>│   ├── generator/
</span><span class='line'>│   ├── model/
</span><span class='line'>│   ├── model-test/
</span><span class='line'>│   ├── style/
</span><span class='line'>│   ├── template/
</span><span class='line'>│   ├── view/
</span><span class='line'>│   └── view-test/
</span><span class='line'>├── node_modules/
</span><span class='line'>│   ├── chai/
</span><span class='line'>│   ├── clean-css-brunch/
</span><span class='line'>│   ├── coffee-script-brunch/
</span><span class='line'>│   ├── css-brunch/
</span><span class='line'>│   ├── handlebars-brunch/
</span><span class='line'>│   ├── javascript-brunch/
</span><span class='line'>│   ├── sinon/
</span><span class='line'>│   ├── sinon-chai/
</span><span class='line'>│   ├── stylus-brunch/
</span><span class='line'>│   └── uglify-js-brunch/
</span><span class='line'>├── test/
</span><span class='line'>│   ├── assets/
</span><span class='line'>│   ├── vendor/
</span><span class='line'>│   ├── views/
</span><span class='line'>│   └── test-helpers.coffee
</span><span class='line'>├── vendor/
</span><span class='line'>│   ├── scripts/
</span><span class='line'>│   └── styles/
</span><span class='line'>├── README.md
</span><span class='line'>├── config.coffee
</span><span class='line'>└── package.json</span></code></pre></td></tr></table></div></figure>


<p><code>config.coffee</code>にいろいろ設定が書いてあるんですが、長いので別で書きます。</p>

<p>とりあえずビルドしてみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brunch build</span></code></pre></td></tr></table></div></figure>


<p><code>/public</code>ができて、ここにもろもろ生成されたファイルが入っています。デプロイのときはここを使えばよいっぽい。</p>

<p>ビルトインサーバーを使ってアプリを起動してみる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brunch watch --server
</span><span class='line'>$ open http://localhost:3333/</span></code></pre></td></tr></table></div></figure>


<p><img src="http://yaakaito.org/images/hello-brunch.png"></p>

<p>こういう感じにアプリが起動していることがわかります、やりましたね！</p>

<h2>テストを走らせる</h2>

<p>サーバー起動してる状態で、<code>/public</code>の中に出来たテストランナーをブラウザで開けば普通にテストが走ります。
phantomjs使いたいときは、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brunch test</span></code></pre></td></tr></table></div></figure>


<p>でよいらしいです。(使ってない)</p>

<h2>他の環境でのセットアップ</h2>

<p>brunchベースのプロジェクトにコミットするときは、
見た感じ、<code>npm install</code>すればよさそうなので試してみる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install
</span><span class='line'>$ brunch w --server</span></code></pre></td></tr></table></div></figure>


<p>出来た、これでよさげ。</p>

<p>使ってみてあーだこうだはもうちょっとしてから書こうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JekyllでエセAPI的なの作る話]]></title>
    <link href="http://yaakaito.org/blog/2013/03/06/jekyll-fake-api/"/>
    <updated>2013-03-06T01:55:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/06/jekyll-fake-api</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！クライアント開発のみなさんこんばんは！
元気にクライアントアプリを開発していますか？？？</p>

<p>クライアントアプリとか作るときに、とりあえずAPI出来るまではモックのAPIをJSONで用意したりとかすると思うんですよね。
ただなんか、複数個データ用意しちゃったときとかに、いちいち全部書き換えるのはめんどくさいし、わざわざモックサーバー書くのも面倒だし、
<a href="http://agile.esm.co.jp/ww/">ww</a>とかもあるが、別にそこまで高機能じゃなくてもいい・・・。</p>

<p>というわけで<a href="http://jekyllrb.com/">Jekyll</a>で作ることにした。特に難しいことはしません。
<code>_layouts</code>にいつもの感じでテンプレートを書くんですが、HTMLではなく代わりにJSONを書きます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>---
</span><span class='line'>{
</span><span class='line'>  "title" : "JekyllでエセAPI的なの作る話",
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>準備完了！あとはAPIにしたい的なデータを</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>title : each
</span><span class='line'>layout : function
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>こういう感じに書いて、拡張子なしで保存します。とりあえず<code>each</code>って名前のをかいたので、こんな感じになります</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>├── _layouts
</span><span class='line'>│   └── function.json
</span><span class='line'>└── feature
</span><span class='line'>    └── each</span></code></pre></td></tr></table></div></figure>


<p>そしてコンパイルします</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ jekyll</span></code></pre></td></tr></table></div></figure>


<p>こんな感じになって、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>└── _site
</span><span class='line'>    └── feature
</span><span class='line'>        └── each</span></code></pre></td></tr></table></div></figure>


<p>あとは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python -m SimpleHTTPServer</span></code></pre></td></tr></table></div></figure>


<p>とかやっておけば</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:8000/feature/each
</span><span class='line'>{
</span><span class='line'>  "title" : "each",
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>となります、やりましたね！！！！！
コレクションっぽいのがほしかったら、ジェネレーターとかサクっと書けばよいだけなので、楽チンですね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[buster-html-docとあとcoffee]]></title>
    <link href="http://yaakaito.org/blog/2013/03/02/buster-html-doc-and-coffee/"/>
    <updated>2013-03-02T14:40:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/02/buster-html-doc-and-coffee</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。
<a href="http://yaakaito.github.com/blog/2013/03/01/buster-testbed-and-boot/">前回BusterJSのtestbedの話</a>を書いたのですが、</p>

<blockquote><p>@yaakaito HTMLを用意するまでもない場合は buster-html-doc とかも良いと思いますがどうでしょう！</p><footer><strong>@y_imaya</strong> <cite><a href='https://twitter.com/y_imaya/status/307347977712848896'>twitter.com/y_imaya/status/&hellip;</a></cite></footer></blockquote>


<p>という意見をもらったので、こっちのことも書いておこうと思いました。</p>

<h2>そもそもbuster-html-docって何</h2>

<p>BusterJSはJSTestDriver形式で書かれたテストケースの実行をサポートしているのですが、JSTestDriverに<a href="http://code.google.com/p/js-test-driver/wiki/HtmlDoc">HTML Doc</a>という昨日があります。
この部分だけをBusterJS用に切り出したのがbuster-html-docで、前回のようにHTMLを用意するまでもない場合に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/*:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;*/</span>
</span><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">hoge</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">,</span> <span class="s1">&#39;aaaa&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>という風にテスト毎にエレメントを生成することができます。</p>

<h2>使い方</h2>

<p><code>buster-html-doc</code>をnpmからインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="nx">buster</span><span class="o">-</span><span class="nx">html</span><span class="o">-</span><span class="nx">doc</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>buster.js</code>でbuster-html-docを読み込むようにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">config</span><span class="p">[</span><span class="s2">&quot;browser test&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">env</span> <span class="o">:</span> <span class="s2">&quot;browser&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">tests</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;test.js&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nx">extensions</span><span class="o">:</span> <span class="p">[</span><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;buster-html-doc&quot;</span><span class="p">)]</span> <span class="c1">// これ</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういう感じにテストを書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">buster</span><span class="p">.</span><span class="nx">testCase</span><span class="p">(</span><span class="s1">&#39;hoge&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;test html doc&#39;</span> <span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="cm">/*:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;*/</span>
</span><span class='line'>      <span class="nx">assert</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">hoge</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">,</span> <span class="s1">&#39;aaaa&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでテストを実行すると、テスト時に<code>/*:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;*/</code>の部分が、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">hoge</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">element</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;&lt;p&gt;aaaa&lt;/p&gt;&quot;</span><span class="p">;</span><span class="k">if</span> <span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;HTML doc expected to only contain one root node, found &quot;</span> <span class="o">+</span> <span class="nx">element</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">element</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">;</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>


<p>という感じに変換されます。
あとはこのエレメントを使ってアサーションするなりできます。</p>

<p>上の例では<code>this.hoge</code>に対してエレメントを生成していますが、
そうではなく<code>body</code>とかに突っ込んでほしい場合は、<code>+=</code>を使って書く事もできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/*:DOC += &lt;p id=&quot;hoge&quot;&gt;aaaa&lt;/p&gt;*/</span>
</span><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;hoge&#39;</span><span class="p">).</span><span class="nx">innerHTML</span><span class="p">,</span> <span class="s1">&#39;aaaa&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>という感じなのがbuster-html-docプラグインです。</p>

<h2>buster-coffee</h2>

<p>続いてbuster-coffeeなのですが、名前の通りテスト実行時にCoffeeScriptをコンパイルしてくれるので、コードをCoffeeScriptで書けるよ、というものです。
これ自体は特にめんどくさくなくて、npmでインストールして、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="nx">buster</span><span class="o">-</span><span class="nx">coffee</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">runner</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">runner</span><span class="p">[</span><span class="s2">&quot;browser test&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">env</span> <span class="o">:</span> <span class="s2">&quot;browser&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">tests</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;test.coffee&quot;</span> <span class="c1">// coffee</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nx">extensions</span><span class="o">:</span> <span class="p">[</span><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;buster-coffee&quot;</span><span class="p">)]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>という風に使えばよいのですが、buster-html-docと少し相性の問題があるみたいで、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">extensions</span><span class="o">:</span> <span class="p">[</span><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;buster-coffee&quot;</span><span class="p">),</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;buster-html-doc&quot;</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういう感じにして、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">buster</span><span class="p">.</span><span class="nx">testCase</span> <span class="s">&#39;hoge&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&#39;test html doc&#39;</span> <span class="o">:</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="cm">###:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;###</span>
</span><span class='line'>      <span class="nx">assert</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">hoge</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">,</span> <span class="s">&#39;aaaa&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>こう書いても、</p>

<blockquote><p>TypeError: Cannot read property &#8216;innerHTML&#8217; of undefined</p></blockquote>

<p>となります。</p>

<p>コンパイルされるとHTML Docの部分は</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/*:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうなるはずなので、一見大丈夫そうに思えるんですが、うまくいきません。
というか自分でコンパイルするとちゃんと動くので、プラグインの実行順か、それぞれの実行タイミングが悪いのかみたいな話だと思います。</p>

<p>ハマりやすいので気をつけましょう。</p>

<p>回避策としてはプラグインのところ見直してプルリクエストが一番早そうなんですが、
僕は他の理由もあって先にcoffeeを別にコンパイルするようにしてしまいました。</p>

<h2>おまけ</h2>

<p>HTML Doc形式の書式が結構便利で、最近関わっているプロダクトだと</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="cm">###:XHR /hoge = {</span>
</span><span class='line'><span class="cm"> fuga : &#39;fuga&#39;,</span>
</span><span class='line'><span class="cm"> piyo : &#39;piyo&#39;</span>
</span><span class='line'><span class="cm">} </span>
</span><span class='line'><span class="cm">###</span>
</span><span class='line'><span class="c1"># /hoge にアクセスしたらこのレスポンスが返ってくる (XHR部分のラッパー有)</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいにして通信部分をモックできるようしてみた、便利。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[yaakaito.org]]></title>
  <link href="http://yaakaito.github.com/atom.xml" rel="self"/>
  <link href="http://yaakaito.github.com/"/>
  <updated>2013-03-14T03:33:47+09:00</updated>
  <id>http://yaakaito.github.com/</id>
  <author>
    <name><![CDATA[yaakaito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ブログのデザイン変えた]]></title>
    <link href="http://yaakaito.github.com/blog/2013/03/14/new-blog-design/"/>
    <updated>2013-03-14T03:27:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/03/14/new-blog-design</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！</p>

<p>ブログのデザイン変えました！</p>

<p>読み返してて、「くそっよみづらいし、俺は読む事に集中したいんだよ」と思ったので直した、読みやすさ重視。</p>

<p>これあってもなくても一緒やろみたいなのを全部消して、きれいに文章読めるように工夫したつもりである。緑だけ残した。緑見にくいし控えめで。
(そもそもの話ほとんど文字サイズと行間の調整しかしていない)</p>

<p>モバイル対応とかやるのだるいので、だいたいどれでみても同じようになるようにした。</p>

<p>これでまた少し世界をよく出来た気がします、やりましたね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BrunchでJavaScriptアプリはじめる手順]]></title>
    <link href="http://yaakaito.github.com/blog/2013/03/08/hello-brunch/"/>
    <updated>2013-03-08T08:14:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/03/08/hello-brunch</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
最近<a href="http://brunch.io/">Brunch</a>というものを知ったので、とりあえずはじめてみたときのメモです。
正確には<a href="http://chaplinjs.org/">Chaplin</a>を先に知って、結構良さげだし試してみよーとか思ったところが始まりなので、brunch-with-chaplinを前提にしてます。(今回はchaplinの話はしません。)</p>

<h2>brunchってそもそも何</h2>

<p>gruntとか使っている人は、gruntにgiter8をくっつけて++というイメージが分かりやすいかと思います。Yeomanとかその系列のものです。
レイヤーが違うので比較してもあんまり意味はないんですが、grunt使っていた頃からすると、</p>

<ul>
<li>最初からCoffeeScriptのことを考えているので、CoffeeScript使う場合は嬉しい (最近はそうでもないみたいだけど)</li>
<li>プロジェクトのひな形作りやすいのは嬉しい</li>
<li>ビルトインサーバーがあるので、<code>watch --server</code> みたいなの出来て嬉しい</li>
<li>Mocha+phantomjsを最初から生成してくれるので、テストドリブンで始めるが楽</li>
<li>ブラウザのオートリロードとかもあるよ！</li>
</ul>


<p>という感じで、gruntみたいに自分でタスク組んで〜とやるよりは、サクッと開発を始められる感じです。
そこまで使ってないし、まだよくわからんので説明はこのくらいで。</p>

<h2>はじめる</h2>

<p>brunchをインストールします。(node 0.6.10 ~)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install -g brunch</span></code></pre></td></tr></table></div></figure>


<h3>プロジェクトのひな形を作る</h3>

<p>Githubからテンプレートを引っ張ってきて作ります。今回はchaplinが使いたかったので、brunch-with-chaplinを引っ張ってきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brunch new &lt;app-name&gt; --skeleton https://github.com/paulmillr/brunch-with-chaplin</span></code></pre></td></tr></table></div></figure>


<p>簡単ですね。<code>tree</code>してみるとこんな感じになってます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tree -L 2 -F --dirsfirst
</span><span class='line'>.
</span><span class='line'>├── app/
</span><span class='line'>│   ├── assets/
</span><span class='line'>│   ├── controllers/
</span><span class='line'>│   ├── lib/
</span><span class='line'>│   ├── models/
</span><span class='line'>│   ├── views/
</span><span class='line'>│   ├── application.coffee
</span><span class='line'>│   ├── initialize.coffee
</span><span class='line'>│   ├── mediator.coffee
</span><span class='line'>│   └── routes.coffee
</span><span class='line'>├── generators/
</span><span class='line'>│   ├── collection/
</span><span class='line'>│   ├── collection-test/
</span><span class='line'>│   ├── collection-view/
</span><span class='line'>│   ├── controller/
</span><span class='line'>│   ├── controller-test/
</span><span class='line'>│   ├── generator/
</span><span class='line'>│   ├── model/
</span><span class='line'>│   ├── model-test/
</span><span class='line'>│   ├── style/
</span><span class='line'>│   ├── template/
</span><span class='line'>│   ├── view/
</span><span class='line'>│   └── view-test/
</span><span class='line'>├── node_modules/
</span><span class='line'>│   ├── chai/
</span><span class='line'>│   ├── clean-css-brunch/
</span><span class='line'>│   ├── coffee-script-brunch/
</span><span class='line'>│   ├── css-brunch/
</span><span class='line'>│   ├── handlebars-brunch/
</span><span class='line'>│   ├── javascript-brunch/
</span><span class='line'>│   ├── sinon/
</span><span class='line'>│   ├── sinon-chai/
</span><span class='line'>│   ├── stylus-brunch/
</span><span class='line'>│   └── uglify-js-brunch/
</span><span class='line'>├── test/
</span><span class='line'>│   ├── assets/
</span><span class='line'>│   ├── vendor/
</span><span class='line'>│   ├── views/
</span><span class='line'>│   └── test-helpers.coffee
</span><span class='line'>├── vendor/
</span><span class='line'>│   ├── scripts/
</span><span class='line'>│   └── styles/
</span><span class='line'>├── README.md
</span><span class='line'>├── config.coffee
</span><span class='line'>└── package.json</span></code></pre></td></tr></table></div></figure>


<p><code>config.coffee</code>にいろいろ設定が書いてあるんですが、長いので別で書きます。</p>

<p>とりあえずビルドしてみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brunch build</span></code></pre></td></tr></table></div></figure>


<p><code>/public</code>ができて、ここにもろもろ生成されたファイルが入っています。デプロイのときはここを使えばよいっぽい。</p>

<p>ビルトインサーバーを使ってアプリを起動してみる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brunch watch --server
</span><span class='line'>$ open http://localhost:3333/</span></code></pre></td></tr></table></div></figure>


<p><img src="http://yaakaito.github.com/images/hello-brunch.png"></p>

<p>こういう感じにアプリが起動していることがわかります、やりましたね！</p>

<h2>テストを走らせる</h2>

<p>サーバー起動してる状態で、<code>/public</code>の中に出来たテストランナーをブラウザで開けば普通にテストが走ります。
phantomjs使いたいときは、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brunch test</span></code></pre></td></tr></table></div></figure>


<p>でよいらしいです。(使ってない)</p>

<h2>他の環境でのセットアップ</h2>

<p>brunchベースのプロジェクトにコミットするときは、
見た感じ、<code>npm install</code>すればよさそうなので試してみる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install
</span><span class='line'>$ brunch w --server</span></code></pre></td></tr></table></div></figure>


<p>出来た、これでよさげ。</p>

<p>使ってみてあーだこうだはもうちょっとしてから書こうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JekyllでエセAPI的なの作る話]]></title>
    <link href="http://yaakaito.github.com/blog/2013/03/06/jekyll-fake-api/"/>
    <updated>2013-03-06T01:55:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/03/06/jekyll-fake-api</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！クライアント開発のみなさんこんばんは！
元気にクライアントアプリを開発していますか？？？</p>

<p>クライアントアプリとか作るときに、とりあえずAPI出来るまではモックのAPIをJSONで用意したりとかすると思うんですよね。
ただなんか、複数個データ用意しちゃったときとかに、いちいち全部書き換えるのはめんどくさいし、わざわざモックサーバー書くのも面倒だし、
<a href="http://agile.esm.co.jp/ww/">ww</a>とかもあるが、別にそこまで高機能じゃなくてもいい・・・。</p>

<p>というわけで<a href="http://jekyllrb.com/">Jekyll</a>で作ることにした。特に難しいことはしません。
<code>_layouts</code>にいつもの感じでテンプレートを書くんですが、HTMLではなく代わりにJSONを書きます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>---
</span><span class='line'>{
</span><span class='line'>  "title" : "JekyllでエセAPI的なの作る話",
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>準備完了！あとはAPIにしたい的なデータを</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>title : each
</span><span class='line'>layout : function
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>こういう感じに書いて、拡張子なしで保存します。とりあえず<code>each</code>って名前のをかいたので、こんな感じになります</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>├── _layouts
</span><span class='line'>│   └── function.json
</span><span class='line'>└── feature
</span><span class='line'>    └── each</span></code></pre></td></tr></table></div></figure>


<p>そしてコンパイルします</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ jekyll</span></code></pre></td></tr></table></div></figure>


<p>こんな感じになって、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>└── _site
</span><span class='line'>    └── feature
</span><span class='line'>        └── each</span></code></pre></td></tr></table></div></figure>


<p>あとは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python -m SimpleHTTPServer</span></code></pre></td></tr></table></div></figure>


<p>とかやっておけば</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:8000/feature/each
</span><span class='line'>{
</span><span class='line'>  "title" : "each",
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>となります、やりましたね！！！！！
コレクションっぽいのがほしかったら、ジェネレーターとかサクっと書けばよいだけなので、楽チンですね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[buster-html-docとあとcoffee]]></title>
    <link href="http://yaakaito.github.com/blog/2013/03/02/buster-html-doc-and-coffee/"/>
    <updated>2013-03-02T14:40:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/03/02/buster-html-doc-and-coffee</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。
<a href="http://yaakaito.github.com/blog/2013/03/01/buster-testbed-and-boot/">前回BusterJSのtestbedの話</a>を書いたのですが、</p>

<blockquote><p>@yaakaito HTMLを用意するまでもない場合は buster-html-doc とかも良いと思いますがどうでしょう！</p><footer><strong>@y_imaya</strong> <cite><a href='https://twitter.com/y_imaya/status/307347977712848896'>twitter.com/y_imaya/status/&hellip;</a></cite></footer></blockquote>


<p>という意見をもらったので、こっちのことも書いておこうと思いました。</p>

<h2>そもそもbuster-html-docって何</h2>

<p>BusterJSはJSTestDriver形式で書かれたテストケースの実行をサポートしているのですが、JSTestDriverに<a href="http://code.google.com/p/js-test-driver/wiki/HtmlDoc">HTML Doc</a>という昨日があります。
この部分だけをBusterJS用に切り出したのがbuster-html-docで、前回のようにHTMLを用意するまでもない場合に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/*:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;*/</span>
</span><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">hoge</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">,</span> <span class="s1">&#39;aaaa&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>という風にテスト毎にエレメントを生成することができます。</p>

<h2>使い方</h2>

<p><code>buster-html-doc</code>をnpmからインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="nx">buster</span><span class="o">-</span><span class="nx">html</span><span class="o">-</span><span class="nx">doc</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>buster.js</code>でbuster-html-docを読み込むようにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">config</span><span class="p">[</span><span class="s2">&quot;browser test&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">env</span> <span class="o">:</span> <span class="s2">&quot;browser&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">tests</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;test.js&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nx">extensions</span><span class="o">:</span> <span class="p">[</span><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;buster-html-doc&quot;</span><span class="p">)]</span> <span class="c1">// これ</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういう感じにテストを書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">buster</span><span class="p">.</span><span class="nx">testCase</span><span class="p">(</span><span class="s1">&#39;hoge&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;test html doc&#39;</span> <span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="cm">/*:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;*/</span>
</span><span class='line'>      <span class="nx">assert</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">hoge</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">,</span> <span class="s1">&#39;aaaa&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでテストを実行すると、テスト時に<code>/*:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;*/</code>の部分が、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">hoge</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">element</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;&lt;p&gt;aaaa&lt;/p&gt;&quot;</span><span class="p">;</span><span class="k">if</span> <span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;HTML doc expected to only contain one root node, found &quot;</span> <span class="o">+</span> <span class="nx">element</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">element</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">;</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>


<p>という感じに変換されます。
あとはこのエレメントを使ってアサーションするなりできます。</p>

<p>上の例では<code>this.hoge</code>に対してエレメントを生成していますが、
そうではなく<code>body</code>とかに突っ込んでほしい場合は、<code>+=</code>を使って書く事もできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/*:DOC += &lt;p id=&quot;hoge&quot;&gt;aaaa&lt;/p&gt;*/</span>
</span><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;hoge&#39;</span><span class="p">).</span><span class="nx">innerHTML</span><span class="p">,</span> <span class="s1">&#39;aaaa&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>という感じなのがbuster-html-docプラグインです。</p>

<h2>buster-coffee</h2>

<p>続いてbuster-coffeeなのですが、名前の通りテスト実行時にCoffeeScriptをコンパイルしてくれるので、コードをCoffeeScriptで書けるよ、というものです。
これ自体は特にめんどくさくなくて、npmでインストールして、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="nx">buster</span><span class="o">-</span><span class="nx">coffee</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">runner</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">runner</span><span class="p">[</span><span class="s2">&quot;browser test&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">env</span> <span class="o">:</span> <span class="s2">&quot;browser&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">tests</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;test.coffee&quot;</span> <span class="c1">// coffee</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nx">extensions</span><span class="o">:</span> <span class="p">[</span><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;buster-coffee&quot;</span><span class="p">)]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>という風に使えばよいのですが、buster-html-docと少し相性の問題があるみたいで、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">extensions</span><span class="o">:</span> <span class="p">[</span><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;buster-coffee&quot;</span><span class="p">),</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;buster-html-doc&quot;</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういう感じにして、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">buster</span><span class="p">.</span><span class="nx">testCase</span> <span class="s">&#39;hoge&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&#39;test html doc&#39;</span> <span class="o">:</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="cm">###:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;###</span>
</span><span class='line'>      <span class="nx">assert</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">hoge</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">,</span> <span class="s">&#39;aaaa&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>こう書いても、</p>

<blockquote><p>TypeError: Cannot read property &#8216;innerHTML&#8217; of undefined</p></blockquote>

<p>となります。</p>

<p>コンパイルされるとHTML Docの部分は</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/*:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうなるはずなので、一見大丈夫そうに思えるんですが、うまくいきません。
というか自分でコンパイルするとちゃんと動くので、プラグインの実行順か、それぞれの実行タイミングが悪いのかみたいな話だと思います。</p>

<p>ハマりやすいので気をつけましょう。</p>

<p>回避策としてはプラグインのところ見直してプルリクエストが一番早そうなんですが、
僕は他の理由もあって先にcoffeeを別にコンパイルするようにしてしまいました。</p>

<h2>おまけ</h2>

<p>HTML Doc形式の書式が結構便利で、最近関わっているプロダクトだと</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="cm">###:XHR /hoge = {</span>
</span><span class='line'><span class="cm"> fuga : &#39;fuga&#39;,</span>
</span><span class='line'><span class="cm"> piyo : &#39;piyo&#39;</span>
</span><span class='line'><span class="cm">} </span>
</span><span class='line'><span class="cm">###</span>
</span><span class='line'><span class="c1"># /hoge にアクセスしたらこのレスポンスが返ってくる (XHR部分のラッパー有)</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいにして通信部分をモックできるようしてみた、便利。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BusterJSでテストに使うHTMLの設定と手動実行]]></title>
    <link href="http://yaakaito.github.com/blog/2013/03/01/buster-testbed-and-boot/"/>
    <updated>2013-03-01T02:35:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/03/01/buster-testbed-and-boot</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
みなさんJavaScriptのテスト書いてますか？当然書いてますよね？？？</p>

<p>JSでテスト書く時に、こういうHTMLを使いたいんだけど的なことってあると思います。
BusterJSはデフォルトでいい感じのHTMLを作って使ってくれるので楽にテストをはじめられるんですが、まあ差し替えたいよねーってことで差し替えます。</p>

<p>BusterJSではこれをtestbedと呼んでいて、設定ファイル(だいたいの場合は<code>buster.js</code>)で設定することができます。
設定の仕方は<a href="http://docs.busterjs.org/en/latest/overview/#custom-test-beds">こんな感じ</a>なんだけど、いまんところ<code>testbed</code>ってプロパティは設定できないので、<code>resources</code>から設定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">config</span><span class="p">[</span><span class="s2">&quot;test&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sources</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;lib/*.js&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">tests</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;test/*-test.js&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">resources</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">path</span> <span class="o">:</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">file</span> <span class="o">:</span> <span class="s2">&quot;hoge.html&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>というわけでこんな感じに設定を追加します。こうすると<code>hoge.html</code>を使ってテストを走らせてくれます。
で、テスト用のファイルを読み込まなきゃいけないわけで(sourcesとかtestsに設定してるやつ)、それがどこに埋め込まれるのかなーというと、コードを見てみた感じ、</p>

<ol>
<li><code>{{scripts}}</code> という文字列を探して、あったらそこを置き換える</li>
<li><code>&lt;/body&gt;</code> を探して、あったらその直前に置く</li>
<li><code>&lt;/html&gt;</code> を探して、あったらその直前に置く</li>
<li>何も見つからなかったら、一番最後に連結する</li>
</ol>


<p>という順番になってた。(<code>resource-middleware</code>とか読めば分かる)
なので、例えばテストの時だけ <code>initialize</code> みたいな関数を、セットアップスクリプト走らせる前に置き換えたいんだけど的なときは、(↓みたいな感じの場合)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;hoge.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span><span class="c">&lt;!-- この中に initialize って関数があるとする --&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="c1">// この時点までにテストのときだけinitializeを置き換えてほしい ＞＜</span>
</span><span class='line'><span class="nx">initialize</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">hoge</span> <span class="o">:</span> <span class="nx">fuga</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>{{scripts}}</code> を使って、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;hoge.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>{{scripts}}
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="nx">initialize</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">hoge</span> <span class="o">:</span> <span class="nx">fuga</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういう感じにする。で、<code>bootstrap.js</code>みたいなのを用意してあげて、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// bootstrap.js</span>
</span><span class='line'><span class="nx">initialize</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span> <span class="c1">// 何もしないでーーー＾ー＾</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを<code>sources</code>に追加する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">config</span><span class="p">[</span><span class="s2">&quot;test&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sources</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;lib/*.js&quot;</span><span class="p">,</span> <span class="s2">&quot;bootstrap.js&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">tests</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;test/*-test.js&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">resources</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">path</span> <span class="o">:</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">file</span> <span class="o">:</span> <span class="s2">&quot;hoge.html&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすると、実際にテストで使われるファイルは、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;hoge.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bootstrap.js&quot;</span><span class="nt">&gt;&lt;/script&gt;&lt;script </span><span class="na">src=</span><span class="s">&quot;テストとか&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="nx">initialize</span><span class="p">({</span> <span class="c1">// なにも・・・なかった・・・</span>
</span><span class='line'>  <span class="nx">hoge</span> <span class="o">:</span> <span class="nx">fuga</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じになる。便利！</p>

<p>で、次にテストの実行開始タイミングをコントロールしたいと思うんだけど、割と簡単んで、<a href="http://docs.busterjs.org/en/latest/starting-testrun-manually/#starting-testrun-manually">この辺</a>にも書いてあるように、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">config</span><span class="p">[</span><span class="s2">&quot;test&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">autoRun</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">sources</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;lib/*.js&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">tests</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;test/*-test.js&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">resources</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">path</span> <span class="o">:</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">file</span> <span class="o">:</span> <span class="s2">&quot;hoge.html&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>autoRun</code>を<code>false</code>にして、さっきの例だと、<code>initialize</code>まで呼ばれたら実行してほしい！とかなら、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// bootstrap.js</span>
</span><span class='line'><span class="nx">initialize</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">buster</span><span class="p">.</span><span class="nx">run</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいな感じ</p>

<p>というわけでテストに使うHTMLも設定できましたし、ガンガンテストできますね！</p>

<p>そういや別にもう一個なんか書こうと思ってたんですが、忘れたので知ってる人いたら教えてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[conferenceWithDevelopersが無事に終了しました]]></title>
    <link href="http://yaakaito.github.com/blog/2013/02/26/thanks-ios-developers/"/>
    <updated>2013-02-26T00:39:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/02/26/thanks-ios-developers</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
2/23(土)に<a href="http://conference-with-developers.info/">conferenceWithDevelopers</a>というイベントを開催しました。
当日はたくさんの方にご来場頂き、盛況のうちにイベントを終える事が出来ました。</p>

<p>ご講演頂いたみなさん、ご来場頂いたみなさん、会場を提供していただいたグリー様、そして当日お手伝いをして頂いたスタッフの方、本当にありがとうございました。</p>

<p>運営上至らない点も多くあったと思いますが、今回の反省を糧に次へ繋げていきたいと思います。</p>

<p>何度か「次はあるんですか？」という趣旨の質問を受けました。
これについて現状での回答をしておくと、「続けていきたい」思っています。
ですが、毎月開催できるかと言えばそういう感じではないので、時期なんかに関してはまったくの未定です。
イベントのポジションとして、年に一度のお祭り、とかそういう感じに成長できればよいなぁとぼんやり考えています。
力を貸すよ！という方がいらっしゃいましたら是非お願いしたいとも思っています。</p>

<p>というわけで、簡単ですが一旦の挨拶とさせて頂きます。みなさん、ありがとうございました！</p>

<p>「次回にご期待ください！」</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stubbilinoというスタブライブラリがよさげです]]></title>
    <link href="http://yaakaito.github.com/blog/2013/02/12/stubbilino/"/>
    <updated>2013-02-12T04:28:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/02/12/stubbilino</id>
    <content type="html"><![CDATA[<p>こんにちは、うきょーです。
<a href="https://github.com/robb/Stubbilino">Stubbilino</a> というスタブライブラリをみけたのですが、結構良さげです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">SEHoge</span> <span class="o">*</span><span class="n">hoge</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SEHoge</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">NSObject</span><span class="o">&lt;</span><span class="n">SBStub</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">stub</span> <span class="o">=</span> <span class="p">[</span><span class="n">Stubbilino</span> <span class="nl">stubObject:</span><span class="n">hoge</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">stub</span> <span class="nl">stubMethod:</span><span class="k">@selector</span><span class="p">(</span><span class="n">intMethod</span><span class="p">)</span> <span class="nl">withBlock:</span><span class="o">^</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">hoge</span> <span class="n">intMethod</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいにselectorとBlocksを使って書きます。
このBlocksはオブジェクトとか気にせず返せるみたいで、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="n">stub</span> <span class="nl">stubMethod:</span><span class="k">@selector</span><span class="p">(</span><span class="n">stringMethod</span><span class="p">)</span> <span class="nl">withBlock:</span><span class="o">^</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">@&quot;string&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういうのもいける、超便利。
OCMockとかだと<code>OCValue</code>がどうたらとか出てくるので、非常に楽チンに書ける。
Blocks使ってるので、ちょっと生成がめんどいオブジェクトとかも、押し込んでおけるのでよい。</p>

<p>あとはクラスメソッドのスタブも出来るみたいです。
こっちはまだ使ってないのでREADMEからの引用ですが、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// https://github.com/robb/Stubbilino/blob/master/README.md</span>
</span><span class='line'><span class="n">Class</span><span class="o">&lt;</span><span class="n">SBClassStub</span><span class="o">&gt;</span> <span class="n">uiimage</span> <span class="o">=</span> <span class="p">[</span><span class="n">Stubbilino</span> <span class="nl">stubClass:</span><span class="n">UIImage</span><span class="p">.</span><span class="n">class</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">uiimage</span> <span class="nl">stubMethod:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">imageNamed:</span><span class="p">)</span>
</span><span class='line'>          <span class="nl">withBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">myImage</span><span class="p">;</span> <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういう感じで書けるみたいです。
クラスメソッドのスタブは往々にしてだるいという感じだったので、良い。</p>

<p>OCMockなんかは<code>NSProxy</code>を使った実装ですが、こっちは<code>objc/runtime.h</code>使っています。
なのでちょっとコード追うのはしんどいですが、読んでみるとよいと思います。</p>

<p>　</p>

<h2>宣伝:2/23に東京でiOSカンファレンスを開催します！</h2>

<p>「conferenceWithDevelopers」というタイトルです。</p>

<p><a href="http://conference-with-developers.info/">公式サイト</a></p>

<p><a href="http://peatix.com/event/9727">チケットをゲットはこちらから</a></p>

<p>無料です！</p>

<p>豪華スピーカーでお送りしますので、みなさん是非ご参加ください！LT発表者も募集してますよ！</p>

<iframe frameborder="0" width="400" height="460" src="http://peatix.com/event/9727/share/widget?z=1&c=dark&t=1&a=1"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[registerNibを使うとさらによいらしいです]]></title>
    <link href="http://yaakaito.github.com/blog/2013/02/11/register-nib/"/>
    <updated>2013-02-11T02:51:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/02/11/register-nib</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
<a href="http://yaakaito.github.com/blog/2013/02/10/uinib-lost-jinsei/">前の続きです</a></p>

<p>UINibで楽チンに<code>UITableViewCell</code>をxibで作れることは分かったけど、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">UINib</span> <span class="o">*</span><span class="n">nib</span> <span class="o">=</span> <span class="p">[</span><span class="n">UINib</span> <span class="nl">nibWithNibName:</span><span class="s">@&quot;HogeCell&quot;</span> <span class="nl">bundle:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="n">cell</span> <span class="o">=</span> <span class="p">[[</span><span class="n">nib</span> <span class="nl">instantiateWithOwner:</span><span class="nb">nil</span> <span class="nl">options:</span><span class="nb">nil</span><span class="p">]</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>このコードはぶっちゃけ微妙だよね。</p>

<p>で、iOS5~だと<code>registerNib</code>というものがあるらしく</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="nl">registerNib:</span><span class="p">[</span><span class="n">UINib</span> <span class="nl">nibWithNibName:</span><span class="s">@&quot;HogeCell&quot;</span> <span class="nl">bundle:</span><span class="nb">nil</span><span class="p">]</span> <span class="nl">forCellReuseIdentifier:</span><span class="n">kHogeCellReuseIdentifier</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういう感じに書いておくと、さっきの生成部分が</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">cell</span> <span class="o">=</span> <span class="p">[[</span><span class="n">HogeCell</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithStyle:</span><span class="n">UITableViewCellStyleDefault</span> <span class="nl">reuseIdentifier:</span><span class="n">kBGHogeCellReuseIdentifier</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういう感じにいける、こっちのがよさげ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UINib知らずにCellが作れなくて人生半分くらい損した話]]></title>
    <link href="http://yaakaito.github.com/blog/2013/02/10/uinib-lost-jinsei/"/>
    <updated>2013-02-10T16:32:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/02/10/uinib-lost-jinsei</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
僕は<code>UIView</code>とか<code>UITableViewCell</code>を継承してかっちょいいビューを作ろうとすると3分でやる気が消える人なのですが、
最近UINibというものを知りました、創作意欲を返してほしいと思います！！！！</p>

<h3>追記しました</h3>

<p><a href="http://yaakaito.github.com/blog/2013/02/11/register-nib/">続き</a></p>

<p>みなさん<code>UITableViewCell</code>のサブクラス作りますよね。
そしてそのままコーディングしていくと非常にだるく、3秒でモチベーションがなくなるので、
Interface Builderを使いたい！と思うわけですが、<code>UITableViewCell</code>用のxibファイル作るのは30秒で心が折れる。
(というかいつも忘れるしXcodeのバージョンあがると分からなくなる)</p>

<h2>UINibを使う</h2>

<p>おもむろにxibファイルを作ります。</p>

<p><img src="http://yaakaito.github.com/images/uinib_1.png" width="320"></p>

<p>UIViewを消します。</p>

<p><img src="http://yaakaito.github.com/images/uinib_2.png" width="320"></p>

<p>UITableViewCellをおきます。</p>

<p><img src="http://yaakaito.github.com/images/uinib_3.png" width="320"></p>

<p><code>Class</code>と<code>Reuse identifiter</code>をセットします。
FilesOwnerの<code>Class</code>はとりあえず<code>UIViewController</code>にしておきます。</p>

<p>あとはこれをdatasource側で</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">HogeCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">tableView</span> <span class="nl">dequeueReusableCellWithIdentifier:</span><span class="n">kHogeCellReuseIdentifier</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">cell</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UINib</span> <span class="o">*</span><span class="n">nib</span> <span class="o">=</span> <span class="p">[</span><span class="n">UINib</span> <span class="nl">nibWithNibName:</span><span class="s">@&quot;HogeCell&quot;</span> <span class="nl">bundle:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="n">cell</span> <span class="o">=</span> <span class="p">[[</span><span class="n">nib</span> <span class="nl">instantiateWithOwner:</span><span class="nb">nil</span> <span class="nl">options:</span><span class="nb">nil</span><span class="p">]</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">updateCell:</span><span class="n">cell</span> <span class="nl">indexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>とかすれば使えた、泣いた。いままでのよくわからん！はなんだったのか。</p>

<h2>細かいところはコードで制御したい</h2>

<p>ざっくりとしたレイアウトとかを決めるのはxibで大分楽できるんですが、
もっと細かいところとか、同じようなのだし、まとめて処理してほしい(背景とか)ってときに、毎回xibいじるのはだるいですね。</p>

<p>まあなんだかんだでいろいろコードで弄りたいこととか、コードから追加したい要素とかもあると思うんですが、
これをビューコントローラーからやったりするとゴミみたいなコードになるので、あまりやりたくないわけです。</p>

<p>が、しかしこれは<code>willMoveToSuperview:</code>あたりをうまく使えば解決できることに気づいて</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">willMoveToSuperview:</span><span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">newSuperview</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="nl">willMoveToSuperview:</span><span class="n">newSuperview</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 共通のスタイルとかコードでやりたい処理書く</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ってやればあっさりできた、全俺が号泣した。</p>

<h2>次にだるいのが</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setHoge:</span><span class="p">(</span><span class="n">Hoge</span> <span class="o">*</span><span class="p">)</span><span class="nv">hoge</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">hoge</span> <span class="o">!=</span> <span class="n">hoge</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_hoge</span> <span class="o">=</span> <span class="n">hoge</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">thumbnail</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">hoge</span><span class="p">.</span><span class="n">thumbnail</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">message</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">hoge</span><span class="p">.</span><span class="n">message</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういうの、あると思います。(updateCellとか)</p>

<p>Model-View-Binder使えばうまくいけそうですが、メジャーなの知らないので教えてください。</p>

<p>けど多分ないような気がするので作ります。</p>

<h2>宣伝:2/23に東京でiOSカンファレンスを開催します！</h2>

<p>「conferenceWithDevelopers」というタイトルです。</p>

<p><a href="http://conference-with-developers.info/">公式サイト</a></p>

<p><a href="http://peatix.com/event/9727">チケットをゲットはこちらから</a></p>

<p>無料です！</p>

<p>豪華スピーカーでお送りしますので、みなさん是非ご参加ください！LT発表者も募集してますよ！</p>

<iframe frameborder="0" width="400" height="460" src="http://peatix.com/event/9727/share/widget?z=1&c=dark&t=1&a=1"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-CでRoleやってみる]]></title>
    <link href="http://yaakaito.github.com/blog/2013/01/31/objective-c-role/"/>
    <updated>2013-01-31T01:38:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/01/31/objective-c-role</id>
    <content type="html"><![CDATA[<p>こんにちは、うきょーです！
Objective-C書いててふと、Role使いたいなー出来たっけーと、思ったのでやってみた。</p>

<p>怪しいところもあるので、あんまり参考にならないかもですよと言っておく。</p>

<h2>最終的にデータと振る舞いを合体させる</h2>

<p>ってのができればいいと思うんだけど、Objective-Cならカテゴリで書いておけばよくね？と思ったり思わなかったり。
けどちょっと違うよねーってことで、今回はそういうのはやめとく。</p>

<p>で、実装としては<code>NSProxy</code>使えばそれっぽいものは割と簡単に出来た。</p>

<p><a href="https://github.com/yaakaito/ObjCRoleSample">ObjCRoleSample</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">Book</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">title</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSUInteger</span> <span class="n">price</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういうモデルに対して、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@implementation</span> <span class="nc">BookPurchase</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">purchase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Book</span> <span class="o">*</span><span class="n">this</span> <span class="o">=</span> <span class="p">(</span><span class="n">Book</span> <span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">target</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Purchased! %@ %u&quot;</span><span class="p">,</span> <span class="n">this</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="n">this</span><span class="p">.</span><span class="n">price</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じの振る舞いを、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">Book</span> <span class="o">*</span><span class="n">book</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Book</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">book</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">@&quot;hoge&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">book</span><span class="p">.</span><span class="n">price</span> <span class="o">=</span> <span class="mi">420</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Book</span><span class="o">&lt;</span><span class="n">BookPurchase</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">extended</span> <span class="o">=</span> <span class="p">[</span><span class="n">book</span> <span class="nl">roleExtended:</span><span class="n">BookPurchase</span><span class="p">.</span><span class="n">class</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">extended</span> <span class="n">purchase</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>こう合成できるようにしてみた。</p>

<p><code>Book&lt;BookPurchase&gt;</code>が気に入らないと人は、ちょっと微妙な感じがするんだけど、<code>Book</code>の定義の方に書いちゃえば省略はできる。</p>

<p>実装としては基本的には<code>NSProxy</code>で自分にメッセージ送れなかったら流すようにしたものをベースクラスにしてあげて、<code>protocol</code>を使ってこんな感じでロールを定義する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@protocol</span> <span class="nc">BookPurchase</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">@</span><span class="n">optional</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">purchase</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">BookPurchase</span> : <span class="nc">OCRole</span> <span class="o">&lt;</span><span class="n">BookPurchase</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうやると<code>BookPurchase</code>ロールと<code>Book</code>モデルで同じメッセージが送れるような(正確にはXCodeでコンパイル出来るような)感じになる。
見た目はあんまりよくない。し、あんまり実用的でもないような感じがする。マクロとかで書きやすくしてあげるとちょっとは変わるかなー。</p>

<h2>宣伝:2/23に東京でiOSカンファレンスを開催します！</h2>

<p>「conferenceWithDevelopers」というタイトルです。</p>

<p><a href="http://conference-with-developers.info/">公式サイト</a></p>

<p><a href="http://peatix.com/event/9727">チケットをゲットはこちらから</a></p>

<p>無料です！</p>

<p>豪華スピーカーでお送りしますので、みなさん是非ご参加ください！LT発表者も募集してますよ！</p>

<iframe frameborder="0" width="400" height="473" src="http://peatix.com/event/9727/share/widget?z=1&c=dark&t=1&a=1"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2/23に東京でiOSカンファレンスを開催します！]]></title>
    <link href="http://yaakaito.github.com/blog/2013/01/26/confwd/"/>
    <updated>2013-01-26T14:56:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/01/26/confwd</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。</p>

<p>2/23(土)にグリー株式会社でiOSエンジニアのためのカンファレンスイベント「conferenceWithDevelopers」を開催します！</p>

<p><img src="http://yaakaito.github.com/images/confwd.png" width="660"></p>

<p><a href="http://conference-with-developers.info/">公式サイト</a></p>

<p><a href="http://peatix.com/event/9727">チケットをゲットはこちらから</a></p>

<p>無料です！</p>

<p>今現在、決定しているスピーカーとして、
「iPhone Core Audioプログラミング」    で有名なクックパッドの永野さん、
「ビートロボ」でiOSのリードエンジニアを務める菅宮さん。
まだWebの更新がおいついていませんが、
「Dynamic Objective-C」や「iOS開発におけるパターンによるオートマティズム」を執筆された木下さんをはじめとする、
豪華なゲストでお送りする予定です！
講演者は随時アップデート、こちらでも告知していきますのでお楽しみに！！！</p>

<p>またLT参加者も募集しています！
iOSネタであれば制限はありません、こんなことやってみた！から実践的なものまで！皆さんのトークを心からお待ちしております。
LT参加を希望されるかたは、チケットページより「LT参加チケット」でお申し込みください！</p>

<p>より詳しい情報は<a href="http://conference-with-developers.info/">公式サイト</a>をご覧ください！</p>

<p>みなさんのご来場をお待ちしております！！</p>

<iframe frameborder="0" width="400" height="446" src="http://peatix.com/event/9727/share/widget?z=1&c=dark&t=1&a=1"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C用ユーティリティOverlineを公開しました]]></title>
    <link href="http://yaakaito.github.com/blog/2013/01/06/overline-010-release/"/>
    <updated>2013-01-06T13:45:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/01/06/overline-010-release</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。寒いですね。
Objective-C(主にiOS開発)向けのユーティリティライブラリを公開しました。
バージョンは0.1.0で、まだAPIはそこまでそろってません。</p>

<p><a href="https://github.com/yaakaito/Overline">Overline</a></p>

<p>似たようなライブラリではunderscore.mとかBlocksKitが近いかなーと思います。
基本的な機能の拡張で、めんどくさいところを楽にする系のライブラリです。ひかえめです。</p>

<p>主に僕がだるいなーと思ったベースで追加しています。
なのでいわゆるmapもあれば、URLエンコードしてくれるメソッドもありますし、という感じ。あとはいつも忘れる系とか。</p>

<p>underscoreなんかと違うところは、underscoreとかってがんばってJSっぽく書こうとしてる感じが伝わってくるんですが、
僕はJavaScriptみたいに書くのが綺麗だなとか書きやすいとかまったく思ってないので、Objective-Cらしく書けるようにしてあります。
好みのレベルかなーくらいのショートハンドは用意しています。</p>

<h2>使い方</h2>

<p>Cocoapodsでやるのが楽です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pod</span> <span class="s1">&#39;Overline&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pod</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>して</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;Overline.h&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>簡単ですね。</p>

<p>必要なところだけ使いたかったり、自分でプロジェクトに追加する場合は、<code>/Overline</code>の下から好きなファイルをプロジェクトに追加してください。
READMEに書いてある通りに分割してあるので、それなどを参考に。</p>

<h2>出来る事</h2>

<p>一覧はREADMEに書いてありますが、一例をだすと<code>map</code>とか</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">mapped</span> <span class="o">=</span> <span class="p">[</span><span class="err">@</span><span class="p">[</span><span class="err">@</span><span class="mi">1</span><span class="p">,</span><span class="err">@</span><span class="mi">2</span><span class="p">,</span><span class="err">@</span><span class="mi">3</span><span class="p">,</span><span class="err">@</span><span class="mi">4</span><span class="p">,</span><span class="err">@</span><span class="mi">5</span><span class="p">,</span><span class="err">@</span><span class="mi">6</span><span class="p">]</span> <span class="nl">mappedArrayUsingBlock:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">obj</span> <span class="n">integerValue</span><span class="p">]</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'><span class="c1">// @[@2,@4,@6]</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういう感じで正規表現でマッチングできたりとか (正規表現オブジェクトとしてちゃんと表記できないので、ちょっと微妙だけども)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="s">@&quot;https?&quot;</span> <span class="nl">testInString:</span><span class="n">urlString</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>たまにしか使わないけど毎回引き出してくるのだるいーみたいな</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="s">@&quot;hoge&quot;</span> <span class="n">md5</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="s">@&quot;hoge&quot;</span> <span class="n">stringByHashingSha256</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="s">@&quot;YQ==&quot;</span> <span class="n">decodeBase64</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>なんでだよと突っ込みたくなる<code>insertObjects:atIndexes</code>とか</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="n">marray</span> <span class="nl">insertObjects:</span><span class="err">@</span><span class="p">[</span><span class="err">@</span><span class="mi">4</span><span class="p">,</span><span class="err">@</span><span class="mi">5</span><span class="p">,</span><span class="err">@</span><span class="mi">6</span><span class="p">]</span> <span class="nl">atIndex:</span><span class="mi">1</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://stackoverflow.com/questions/2060741/does-objective-c-use-short-circuit-evaluation">よく話題になったりはまったりするNSNull</a>をできるだけ意識せずに使えるように</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">dic</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span>
</span><span class='line'>        <span class="s">@&quot;null-key&quot;</span> <span class="o">:</span> <span class="p">[</span><span class="n">NSNull</span> <span class="n">null</span><span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="p">[[</span><span class="n">dic</span> <span class="nl">objectForKey:</span><span class="s">@&quot;null-key&quot;</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="s">@&quot;fuck&quot;</span><span class="p">];</span> <span class="c1">// nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>できたりします。</p>

<h3>よろしくね！</h3>

<p><a href="https://github.com/yaakaito/Overline">Overline</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ことしの抱負]]></title>
    <link href="http://yaakaito.github.com/blog/2013/01/04/new-year-2013/"/>
    <updated>2013-01-04T01:42:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/01/04/new-year-2013</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！あけてましたね！
しばらく書いてなかったので、書き方忘れそうでした。
去年はコード書くのがひじょーにだるくなっていく年でした、歳ですかね。
なので今年目標は</p>

<ul>
<li>コードできるだけ書かない</li>
<li>コードは昔の自分に書いてもらう</li>
</ul>


<p>で、いこうとおもいます。今年もよろしくお願いします！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AppCodeで華麗にテストをキメる！]]></title>
    <link href="http://yaakaito.github.com/blog/2012/12/09/adv-appcode-splendid-testing/"/>
    <updated>2012-12-09T00:02:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/12/09/adv-appcode-splendid-testing</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！！
<a href="http://qiita.com/advent-calendar/2012/objective-c">Objective-Cアドベントカレンダー2012</a> 8日目の記事です。
みなさんiOSアプリを開発するときに当然テストを書くと思うんですが、このテストメソッドだけ試したいなーってときに、
XcodeだとManageShemesからチェックを外して・・・とか、できるんですが、非常に面倒ですよね！！！
そんなあなたにAppCodeがおすすめです！</p>

<h2>テストメソッド単位で実行をキメよう！</h2>

<p>とりあえずキメてみましょう！テストフレームワークはSenTestingKitです。</p>

<p>普通にテストを書いていって・・・</p>

<p><img src="http://yaakaito.github.com/images/adv-testing-test-case.png" width="420"></p>

<p>この<code>testMappedArrayUsingBlock</code>だけを実行して確かめてみたいなーと思っずたら、
キーバインドを弄っていない場合は<code>Command + Option + R</code>(多分あってるはず)なんかで、Run > Run&#8230; を呼び出します。
そうするとこんな感じのメニューが現れて・・・</p>

<p><img src="http://yaakaito.github.com/images/adv-testing-select.png" width="420"></p>

<p><code>2</code>を押すと、このコンテキストのみを実行してくれます。
すると・・・</p>

<p><img src="http://yaakaito.github.com/images/adv-testing-result.png" width="420"></p>

<p>こういう感じに<code>testMappedArrayUsingBlock</code>だけ実行してくれます！便利ですね！！！</p>

<p>あとはガンガンテストをかいてガンガン実行してカイラクを得ましょう！！！</p>

<h2>ちなみにこれをXcodeで開いてみると・・・</h2>

<p><img src="http://yaakaito.github.com/images/adv-testing-xcode.png" width="320"></p>

<p>こんな感じになっています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSSライクにUIKitをスタイルできるNUIがおもしろい！]]></title>
    <link href="http://yaakaito.github.com/blog/2012/12/06/adv-nui-css-like-uikit/"/>
    <updated>2012-12-06T22:01:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/12/06/adv-nui-css-like-uikit</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
<a href="http://qiita.com/advent-calendar/2012/objective-c">Objective-Cアドベントカレンダー2012</a> 6日目の記事です。
AppCodeのことを書こうと思っていたのですが、今日 <a href="https://github.com/tombenner/nui">NUI</a> というライブラリを見つけて、今僕の中でアツいので紹介しようと思います。
サンプルも書いていたのですが、アドベントにカレンダーできなさそうなので、今回は紹介だけです。</p>

<h2>NUIって何</h2>

<p>NUIはCSSライクにUIKitのスタイルを指定できるライブラリです。
READMEからの引用ですが、こんな感じに定義することができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">@</span><span class="nl">primaryFontName:</span> <span class="n">HelveticaNeue</span><span class="p">;</span>
</span><span class='line'><span class="err">@</span><span class="nl">secondaryFontName:</span> <span class="n">HelveticaNeue</span><span class="o">-</span><span class="n">Light</span><span class="p">;</span>
</span><span class='line'><span class="err">@</span><span class="nl">primaryFontColor:</span> <span class="err">#</span><span class="mi">333333</span><span class="p">;</span>
</span><span class='line'><span class="err">@</span><span class="nl">primaryBackgroundColor:</span> <span class="err">#</span><span class="n">E6E6E6</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Button</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">background</span><span class="o">-</span><span class="nl">color:</span> <span class="err">@</span><span class="n">primaryBackgroundColor</span><span class="p">;</span>
</span><span class='line'>    <span class="n">border</span><span class="o">-</span><span class="nl">color:</span> <span class="err">#</span><span class="n">A2A2A2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">border</span><span class="o">-</span><span class="nl">width:</span> <span class="err">@</span><span class="n">primaryBorderWidth</span><span class="p">;</span>
</span><span class='line'>    <span class="n">font</span><span class="o">-</span><span class="nl">color:</span> <span class="err">@</span><span class="n">primaryFontColor</span><span class="p">;</span>
</span><span class='line'>    <span class="n">font</span><span class="o">-</span><span class="n">color</span><span class="o">-</span><span class="nl">highlighted:</span> <span class="err">#</span><span class="mi">999999</span><span class="p">;</span>
</span><span class='line'>    <span class="n">font</span><span class="o">-</span><span class="nl">name:</span> <span class="err">@</span><span class="n">primaryFontName</span><span class="p">;</span>
</span><span class='line'>    <span class="n">font</span><span class="o">-</span><span class="nl">size:</span> <span class="mi">18</span><span class="p">;</span>
</span><span class='line'>    <span class="n">corner</span><span class="o">-</span><span class="nl">radius:</span> <span class="mi">7</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">NavigationBar</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">background</span><span class="o">-</span><span class="n">tint</span><span class="o">-</span><span class="nl">color:</span> <span class="err">@</span><span class="n">primaryBackgroundColor</span><span class="p">;</span>
</span><span class='line'>    <span class="n">font</span><span class="o">-</span><span class="nl">name:</span> <span class="err">@</span><span class="n">secondaryFontName</span><span class="p">;</span>
</span><span class='line'>    <span class="n">font</span><span class="o">-</span><span class="nl">size:</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>    <span class="n">font</span><span class="o">-</span><span class="nl">color:</span> <span class="err">@</span><span class="n">primaryFontColor</span><span class="p">;</span>
</span><span class='line'>    <span class="n">text</span><span class="o">-</span><span class="n">shadow</span><span class="o">-</span><span class="nl">color:</span> <span class="err">#</span><span class="mi">666666</span><span class="p">;</span>
</span><span class='line'>    <span class="n">text</span><span class="o">-</span><span class="n">shadow</span><span class="o">-</span><span class="nl">offset:</span> <span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://yaakaito.github.com/images/adv_nui.png" width="320"></p>

<p>(<a href="https://github.com/tombenner/nui/blob/master/README.md">README</a>より引用)</p>

<p>実際にCSSが書けるわけではなくて、あくまでUIKitに対応するプロパティをCSSライクに設定できるライブラリです。
昔CSSをそのまま使えたら幸せじゃね、と考えてみたことはあったのですが、さすがにしんどくて挫折しました。
そういう意味では NUI みたいな感じになっていても、十分良さそうに思えますね。</p>

<h2>簡単な使い方</h2>

<p>僕自身もまだちゃんと使えている訳ではないのですが、起動後にNUIを有効にしてあげて、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="n">NUIAppearance</span> <span class="n">init</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、NUIをセットアップします。</p>

<p>あとは適用したいUIクラスをNUIButtonなどのサブクラスで定義して、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">initNUI</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">initNUI</span><span class="p">];</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">nuiClass</span> <span class="o">=</span> <span class="s">@&quot;Button:MyButton&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>とかしてあげると、プロジェクトに含まれいる<code>NUIStyle.nss</code>を元にスタイリングしてくれるようです。
自信はそんなにないですが。</p>

<h2>設定できるプロパティとか</h2>

<p><a href="https://github.com/tombenner/nui/blob/master/README.md#style-classes">READMEのStyleClasses</a>に書いてありますが、一通りは設定できる様子。</p>

<h2>楽しみですね</h2>

<p>ログをみたらまだできたばかりのプロダクトでした。今後どうなるか楽しみですね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリのテストを１週してみて思ったこと]]></title>
    <link href="http://yaakaito.github.com/blog/2012/11/12/ios-testing-cycle-1/"/>
    <updated>2012-11-12T21:57:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/11/12/ios-testing-cycle-1</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
iOSアプリのテストのことをそろそろ１年くらい考えていて、１周した感じもするので、
ここら辺で一旦の区切りの意味でもなんとなく考えをまとめてみる。
ちなみにテストというのは主に単体テストにフォーカスした内容です。</p>

<p>こういう系のエントリを書くと、僕はわりと誤解を生みやすい書き方をしてしまうので先に断っておくと、</p>

<ul>
<li>なんらかのアプリ開発手法や、テスト手法をDisっているわけではないです。</li>
<li>フレームワークがいろいろ登場したりしますが、それらをDisっている訳ではないですし、それぞれ素晴らしいものだと思っています。</li>
<li>同じくそのフレームワークを使っているプロジェクトも登場しますが、それらをDisっている訳でもありません。</li>
<li>もちろん特定個人をDisる内容でもありません。</li>
</ul>


<p>という感じで、何かをDisってる記事ではないので、ご了承ください。</p>

<p>長めです。結局何がよかったの、っていう人は下の方から見てください。</p>

<h2>テストフレームワークの変遷</h2>

<h3>はじめの一歩</h3>

<p>皆さんご存知SenTestingKitです。
ほかにどんなフレームワークあるのか知らんし、とりあえずこれで書けなきゃどっちにしろ無理だろ、という感じでした。セットでOCMockも使っていました。
記憶が正しければ、Xcodeは4.1で、iOS4.x~を対象にしたアプリを作っていた記憶です。
ぶっちゃけこのころはSenTestingKitがどうしようもない感じで、状況によっては <code>STAssertTrue(YES)</code> が落ちたりしていました。
それでもある程度のテストを書くことはできました。モデルのテストは十分に書ける感じ。ビュー関連に関しては完全に諦めモードでしたが・・・。
この頃はアプリ全体をテストしていたのと、あんまり慣れていないところもあって、テストケースが冗長だったり、テストが思ったのと違う動きをしたり、いろいろありました。</p>

<h3>安定を求めてGHUnitへ</h3>

<p>まじなんとかならんの、とか思っていたときに良さげだなーとなったのがGHUnit。
GHUnitはそれ自体がアプリとして動いて、その上でテストコードを実行するというもの。
SenTestingKitと比較して圧倒的に安定しているのと、SenTestingKitと互換性があるのがプラス点。
さらには<code>GHVerifyView</code>というビューを画像の一致率でテストできるものもあったり、非同期テスト標準であったりと、盛りだくさん。
この時期に作っていたもので公開しているものでは、NLTHTTPStubServerはテストがGHUnitで書かれています。
アプリ開発をしつつも、アプリのコア部分をフレームワーク化する、ということもやっていたし、
特にフレームワーク側はちゃんとテスト固めないとなぁという意味でも、安定しているGHUnitを選択しました。
アサーションもSenTestingKitよりも断然豊富で、iOSのテストに慣れてきたのもあって、
テストケースはわりと綺麗に書けるようになっていった気がします。(どうしようもないところもありますが。)</p>

<p>使いはじめの時点ではほとんど問題なく、これでいいや、という感じでしたが、GHUnitは使い続けるうちに問題がでてきました。
GHUnitの問題点は、GHUnit自体がiOSアプリとして動くものなので、ターゲットを切り替えたりでどうしてもテスト実行とかがスムーズにできないところ。
GHUnitを2つのチームで使ってみましたが、保守できたのは片方だけだったので、思いの他このコストは高かったみたいです。
実行されないテストに価値はないし、実行時に障害があるのは問題外。同じアプリで動くタイプでBDDスタイルなCedarもこの段階で却下。
あとはテストログの表示がイケてないなーと思うところもありました。この辺りはちょっと弄ってあげればすむ話ではありますが、それでもコストが高め。</p>

<h3>BDD系への転向</h3>

<p>次に触ってみたのはObjective-C版RspecことKiwiです。
GHUnitの時と同じくこの時期に作っていたNLTQuickCheckにはテストにKiwiが使われています。
これはこの段階ではアプリのテストにはまったく利用していなくて、NLTQuickCheckみたいなObjective-C製のライブラリ開発に利用していました。
ライブラリを書いている分にはKiwiはめちゃくちゃいいです。QuickCheckみたいに、ビューが絡まない中で一旦非同期処理などもあまり考えずに済むというのは、テストを書いていく上では快適でした。
ただKiwiはすぐに問題にぶちあたることになります。単純にGHUnitの<code>GHVerifyView</code>がアプリ開発で便利すぎたので、
どうしてもアプリを作ろうと考えるとGHUnitの方が良さそうに思えました。</p>

<h3>ビューテストをするためにGHUnitへ戻る</h3>

<p>そしてGHUnitへ戻ることになります。
結構複雑なビューをもつアプリを作っていたこともあって、ビューをコンポーネント単位で視覚的に動作確認できるのは、ものすごく便利でした。
ただやっぱりXUnit形式で書くのがもはやしんどい感じになっていて、ダルぽよ〜〜〜という状態でした。</p>

<h3>もう一度BDD系へ戻る</h3>

<p>Kiwiに戻ってきました。このあたりできれいなBDD、に対する回答を求めてTheRSpecBookなんかを読み始めました。
TheRSpecBookは非常によい本で、BDDってなんじゃ、みたいなところから実際にこんな感じで進めるといいよ、ということが書いてあって参考になりました。
ただ、じゃあそれiOSアプリ開発でObjective-C使って実践できんの、といわれるとそういう訳ではなく。
最初の方はとにかくSpecを全部書ききってから実装する、みたいなことも試してみましたが、あんまりしっくりこない。(ノッてるとうまくいっていると錯覚はする。)
BDDやるならビヘイビアにドリブンなデベロップしないと意味ないよねー、後付けのBDDとか何の意味があるんや！！！ってことで、OH！やっぱり今回も駄目だったよ。状態に。</p>

<h3>さらにBDD系を突き詰めてみる</h3>

<p>けどここで引き下がるのも勿体ないので、注目度があがってきたSpectaに乗り換えてもう一度チャレンジしてみることに。
<code>theValue</code>を書かなくともよくなった分、やりやすさはあがった気がします。ヤッホーイ！
だいたいモデル層はめちゃくちゃ綺麗にいけるようになってきたんですが・・・・え？View・・・？・・・
とりあえずビューはFrankでカバーするかーという感じになったのですが、結局のところ作ってみてだいたいこんな感じやろ、
という調整が多くなるビューでいちいちテストとか書いてられるか！！！という感じになった。</p>

<h3>原点回帰</h3>

<p>という訳でSenTestingKitまで戻ってきました。KiwiやSpectaが普段の開発で困らない分には動くってことは生でも動くってことです。
僕はあんまり思ってなかったんですが、Blocks使うとスタックトレースが追いにくくなるとかも、ちょいちょい聞くので素直にSenTestingKitがよくね？ということに。
それでもアサーションとかは不足しているので、OCHamcrestとかで補いつつ、非同期テストケースとかもサンプルがたくさんあるし、Githubなんかで拾ってこれば十分かなぁと。
普段はTDDで開発して、ビューは先に動きのプロトタイプを作ってしまって、あとからそれを補強していく、というので全然問題ないと思う。
GHUnitはやっぱり実行コストが高いし、SenTestingKitでいけるならそれでいいじゃない。Cmd+Uがないとテスト書く気起きないっていうか・・・。</p>

<h3>変遷まとめ</h3>

<p>とりあえずまとめておくと僕はこんな感じで使ってきました。
SenTestingKit -> GHUnit -> Kiwi -> GHUnit -> Kiwi -> Specta -> SenTestingKit</p>

<h2>iOS開発でよくあることを踏まえたい</h2>

<p>ここから割とエンジニアリングとは逆方向な内容になります。
ただ僕もエンジニアなので、ディレクターとかデザイナー目線でみると違うかもしれません。</p>

<h3>ビューを優先して組み立てるべき</h3>

<p>お客さんがみたいのはビューですし、ディレクターがみたいのもビューなら、みなさんがアプリ作りたいと思ったとき最初に頭に浮かぶのもビューです。
iOSアプリ作ってていつも思うのが、いくらモデル層をきれいに分離して、きれいなAPIを設計で綺麗なテストができたとしても、
アプリのファーストビューを表示するためにAPIを3つも4つも呼んでその上計算までしなきゃいけない、
とかだとハイパフォーマンスなアプリとは到底言えないですよね。ということ。
「本当の気持ちなんて伝えられるわけないのよ、だって私は、綺麗な世界とは違う世界をいきているんだもの！！！RESTfullとかしらないわよ！！！全部まとめて返してよ！！！」
という感じです。別にiOS限った話ではないですが、クライアントはだいたいそんな感じだと思ってます。(しつこいですがDisったりしてる意図ないです)</p>

<h3>やっぱさ、新しい機能とか試してみたいじゃん？</h3>

<p>ですよね、僕もそう思います。そういうのってスピードが大事じゃないですか。
テスト書いてる暇とかないわ、というのは嘘かサボりだと思いますが、プロトにいちいちテスト書いててもキリがないというのはあると思います。
OS自体のアップデートも早いし、界隈の流行り廃りもまだまだ早いので、保守にあまりにもコストを掛けすぎるのはあまりチャレンジングではないと思います。</p>

<h3>なんか思ってたのと違うんだけど</h3>

<p>よくあることです。諦めてください。
テスト書きまくって苦労しました、みたいなアホな状態になってたら悪いのはちゃんとプロト見せたりしなかった開発者です。</p>

<h3>テストってさ？コストかかるんでしょ？</h3>

<p>開発をサポートするテストは書いても書かなくても開発速度にそこまで差はないと思います。
長期的にみたらテストは書いた方がいいですが。</p>

<h3>人海戦術でなんとかなるっしょ？</h3>

<p>アホか。</p>

<p>と言いたいところですが、そういう場面があることは確かです。</p>

<h3>よくあることまとめ</h3>

<p>まあ、iOS開発に限ったことじゃないですが(2回目ですね)、巻き戻しとか、もっといいの目指そう！とかそういうのはあるし、
それが正しい場面もあるので、あんまり過剰にやりすぎないようにしないとトータルとしてのパフォーマンスが下がるので、それでは意味がない。</p>

<h2>とりあえず１週目の結論として</h2>

<p>普通にアプリ作る分には単体テストはSenTestingKit+拡張マッチャでモデル中心に大丈夫と思えるところまで書け。ということになりました。割と普通です。
カバレッジを100%にあげるとかはかなりしんどいですし、多分リターンは思ったより少ないです。iOSアプリ、試作とかでわりと中変えたりすること多いし。
なのであるリリースラインに向けて、開発者（とディレクター）がよし行ける！と思える分のテストが書ければそれでよいと思います。
もちろん高いことに超したことはないです。例えば何かのSDK作るとかって場面ではカバレッジは意識した方が良いに決まっています。
けれど、無理にカバレッジをあげるよりも、大丈夫！というラインで意識する方が、いろいろ進めやすいと思います。
勘違いのないように言っておきますが、テスト書かなくともいいやろ、という事ではありません。
テストを書くのが目的にならないように、ということです。本質はそこではありません。
設計上テストが楽になるライブラリとかもあればガンガン使えばいいと思います。(CoreDataで言えばMagicalRecodeとか)</p>

<p>そして、いわゆる単体テストでビュー全体の遷移とかをカバーしようとすると相当しんどいです。
このあたりにはFrankやKIFなどのドライバー系のツールをうまく使うとよいと思います。
TheRSpecBookなんかにも出てくる二重のテストイテレーションを真似ましょう。
ただFrankやKIFについてはまだなんか話せるほど知識がないので２週目にご期待くださいということで。</p>

<p>普通に、と言ったのにはちょっと意味があって、テストフレームワークに関して言えば、アプリによって変えるべきです。
ここでいう普通のアプリは例えばユーティリティアプリだったり、何かのサービスのクライアントだったり、という感じです。
iOSでガッツリ動くゲームとか、もっと大規模なものを作りたいなら、いまのところはまだGHUnitの方がよいと思います。
逆にビューの存在しないライブラリを書くのであればBDD系のフレームワークでBDDしても全然OKだと思います。</p>

<h2>まとめ</h2>

<p>こんなこと書いてて僕が言うのもあれなんですが、テスト書くの目的にしちゃうと絶対に終わらないです。
ここのテストしんどそうだなーと思ったら、それはしんどいんだと思います。
時には人海戦術でパターン入れてみる、というのも必要だと思いますし、
結局のところ人が触らないと分からないところも多いですが、それもテストです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小さいCoffeeScriptのテストにはVowsが便利]]></title>
    <link href="http://yaakaito.github.com/blog/2012/11/03/vows-coffee-testing/"/>
    <updated>2012-11-03T02:04:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/11/03/vows-coffee-testing</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
小さめのツールをCoffeeScriptで書く機会があったのですが、
テストに使った<a href="http://vowsjs.org/">Vows</a>(<a href="http://vowsjs.jp/">日本語訳</a>)というのが結構良かったです。
一言で言えば、BDDライクで非同期テストに強く、Coffeeと相性のよい、topicという独特の概念をもったフレームワークです。(長い)</p>

<h2>Vowsのセットアップと実行</h2>

<p>npm経由でインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install vows
</span><span class='line'>npm install -g vows</span></code></pre></td></tr></table></div></figure>


<p>設定ファイルとかは特に必要なく、直接テストファイルを実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vows test.js</span></code></pre></td></tr></table></div></figure>


<p>CoffeeScriptをそのまま実行することができます。ここが重要</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vows test.coffee --spec</span></code></pre></td></tr></table></div></figure>


<p><code>--spec</code>オプションを付けるといい感じの出力になります。</p>

<h2>Vowsのテストケース</h2>

<p>簡単な例として文字列を反転する<code>reverse</code>というモジュールを考えたときのテストはこんな感じ。
特にCoffeeScriptで書くことにメリットを感じるので、サンプルは全部CoffeeScriptです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vows    = require 'vows'
</span><span class='line'>assert  = require 'assert'
</span><span class='line'>reverse = require 'reverse'
</span><span class='line'>
</span><span class='line'>vows
</span><span class='line'>  .describe('reverse')
</span><span class='line'>  .addBatch
</span><span class='line'>    'example' :
</span><span class='line'>      topic : -&gt;
</span><span class='line'>        reverse('abc')
</span><span class='line'>      'should return cba' : (str) -&gt;
</span><span class='line'>        assert.equal str, 'cba'</span></code></pre></td></tr></table></div></figure>


<p><code>describe</code>を定義して、<code>addBatch</code>でテストのまとまりを追加します。
ポイントはさっきからちょっと出てきている<code>topic</code>で、これの実行結果がその下のテストケースへ渡ってきます。
この中は非同期でもokみたいで(今回は試していないけど)、<code>topic</code>の実行が終わったタイミングでテストが走る、という仕組みみたいです。便利ですね。
<code>topic</code>を使っていくとどうしてもモジュールを小さくせざるをえないので、きれいなコードを書くのにはよいと思います。</p>

<p><code>topic</code>とかテストケースはネストすることもできて、例えばabcの他にdefgもテストしたい！とかって場合は、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.addBatch
</span><span class='line'>  'example2' :
</span><span class='line'>    topic : reverse
</span><span class='line'>    'when abc' :
</span><span class='line'>      topic : (f) -&gt; f('abc')
</span><span class='line'>      'should return cba' : (str) -&gt;
</span><span class='line'>        assert.equal str, 'cba'
</span><span class='line'>    'when abc' :
</span><span class='line'>      topic : (f) -&gt; f('defg')
</span><span class='line'>      'should return gfed' : (str) -&gt;
</span><span class='line'>        assert.equal str, 'gfed'</span></code></pre></td></tr></table></div></figure>


<p>こういう感じで書くこともできます、一つ上の<code>topic</code>は次の<code>topic</code>に渡っていくので、テストするスコープを制限することができます。
ただ、ネストしすぎるとちょっと読みにくいですね。</p>

<h2>まとめ</h2>

<p>個人的には、今回みたいにNodeを使って小さいコマンドラインツールとかを全部Coffeeで書くときに使うのがよいかなーという印象でした。
クライアントサイドのテストとかになってくると、長い目で見たときにBusterJSやその他Swarm系使った方がよさそうな印象。
大きめのプロジェクトになってくると、テストケースが要はでかいオブジェクトの定義なので、どうもしんどくなっていく気がする。</p>

<p>テストの為の中間ファイルとして.jsを吐く必要がないので、リポジトリがCoffeeScriptだけできれいに保てるのもポイント。
vowsでカバーできるサイズなら全部CoffeeScriptで書いてしまっても、それなりにモチベーションが保てる。(CoffeeScriptそんなに好きじゃない)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ズルいデザインが流行っていたので]]></title>
    <link href="http://yaakaito.github.com/blog/2012/10/31/zurui/"/>
    <updated>2012-10-31T01:51:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/10/31/zurui</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！！！
ズルいデザインが流行っているので、僕もずるいデザインにしてみました！！！</p>

<p>ズルい線とかは元々使っていたので、さらにズルい要素を足して背景をカッチョヨクしてみました！！
あとは微妙に文字がでかくなったりしています！ズルいですね！！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KiwiとSpectaの比較]]></title>
    <link href="http://yaakaito.github.com/blog/2012/10/22/kiwi-vs-specta/"/>
    <updated>2012-10-22T00:48:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/10/22/kiwi-vs-specta</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
前まではiOSのテストには主にKiwiを使っていたのですが、最近Spectaが良い感じなので使っています。
結局のところ好みになってしまうのですが、簡単に比較というか感想を。(コードはそれぞれのREADMEみてください)
どちらもRSpecに代表されるBDDスタイルの記述ができます。</p>

<ul>
<li><a href="https://github.com/allending/Kiwi">Kiwi</a></li>
<li><a href="https://github.com/petejkim/specta">Specta</a></li>
</ul>


<h2>そもそもの違い</h2>

<p>どちらも似た感じでテストを書くことができますが、そもそもとしてSpectaは自身がマッチャーなどは提供していません。
主にExpectaを使うことになると思いますが、他のものを使うことができます。
対してKiwiはモックから何からそろったフルセットのフレームワークです。</p>

<p>Spectaの方がモジュール単位に分割されているので、ライブラリとして見たときは扱い易いです。
ただ、好みのライブラリとか特にないって場合はKiwiを使った方がスムーズにいける印象です。</p>

<h2>導入のしやすさ</h2>

<p>SenTestingKitで動かすならどっちも同じくらい簡単にセットアップできます。
ただしSpectaは分割している分、importとdefineが多くなってすこし見た目が悪いです。</p>

<h2>アサーション</h2>

<p>Sepcta使う最大の理由がほぼここにあって、Expectaががんばっているんですが、Objective-Cではありがちなプリミティブに対するラッパーが必要ないこと。
Kiwiの場合は<code>theValue</code>マクロが用意されていて、これを使わなきゃいけないのでちょっとだるい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>expect(1).to.equal(1); // Specta
</span><span class='line'>[[theValue(1) should] equal:theValue(1)]; // Kiwi</span></code></pre></td></tr></table></div></figure>


<p>あとはObjective-Cっぽく書くか、マクロで書くかの違いくらい。僕はKiwiっぽい記述の方が好きなんですが、どうしても<code>theValue</code>書きたくないでござる症候群が・・・。
マッチャーの豊富さはどちらも同じくらいです。beNonZeroとかが分かりやすく書けるのはちょっとKiwiの方がいいかな。
あとはBooleanがExpectaは<code>beTruthy</code> <code>beFalsy</code>ですが、Kiwiが<code>beTrue</code> <code>beFalse</code> なので気をつけましょう。</p>

<h2>モックとか</h2>

<p>Kiwiは組み込みのモック、SpectaはOCMockやLRMockyが推奨されているようです。
メソッドをモックしたりとか基本的なところは一緒ですが、ちょっとずつ特徴があります。</p>

<p>Kiwiの組み込みとLRMockyは、メッセージエクスペクテーションとして<code>recieve</code>がちゃんと使えるのがよいところ。
OCMockはこのあたりがちょっとめんどくさくて、mockしてverifyしてね、という形式。notはない。</p>

<p>逆にOCMockのいいところは<code>andDo:block</code>と<code>andCall:selector</code>が非常に使いやすいところ。
Kiwiなんかは、特にBlocksが絡むとテスト用に拡張したオブジェクトに頼ったりする場面があるけど、OCMockはそれがほとんど必要ないのが良い。</p>

<p>個人的にはBlocksを結構使うので、OCMockが使いやすいですね。</p>

<h2>選ぶ基準</h2>

<p>そもそもObjective-CでBDDフレームワーク使ったことないならKiwi使っとくのが無難です。
元々GHUnitで書いていて、やっぱLRMocky使いたいわー＞＜とかならSpecta使うといいと思います。</p>

<p>ちなみに最近ホットなReactiveCocoaはSpecta使ってますね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Buster.JSについて少しLTした]]></title>
    <link href="http://yaakaito.github.com/blog/2012/10/16/busterjs-clientjs-testing/"/>
    <updated>2012-10-16T22:24:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/10/16/busterjs-clientjs-testing</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。
突然LTすることになったので、最近気になってるBuster.JSネタで話してきました。
LTなのであんまり内容は濃くないです。iPhoneシュミレーターとかでも楽に動くし便利だね！というくらいです。</p>

<script async class="speakerdeck-embed" data-id="507b79def901500002026b02" data-ratio="1.3333333333333333" src="http://yaakaito.github.com//speakerdeck.com/assets/embed.js"></script>


<p>スライドにはほとんど情報がないので、どんな感じで話したかを箇条書きで。</p>

<ul>
<li>yaakaito.orgが変なところに飛ばされとる (今はなおったみたい)</li>
<li>みんなJSかきますよね！テストやってますか？？？</li>
<li>フレームワークいろいろありますが、最近はBuster.JSがアツい</li>
<li>JSTestDriverのようにブラウザ上での自動実行と、ヘッドレスでの実行がサポートされている</li>
<li>&#8220;Test-Driven JavaScript Development&#8221;でも言及されていますが、実際の環境で動かせることは大事</li>
<li>ちなみにこの本書いた人がBuster.JSの作者で、Buster.JSはこの本に書いてある理想を実際に行おうとしている</li>
<li>けど、ヘッドレスでも動くしNodeも扱えるので、使い分けがしやすくて便利</li>
<li>ヘッドレスはまだサポートされてると思った？残念、ベータちゃんでした！</li>
<li>ともあれ便利なので使ってみよう</li>
<li>npmで簡単インストール</li>
<li>buster.jsというコンフィグを書いて、テストを書く</li>
<li>サーバーを立ち上げてテスト対象になるブラウザでアクセス、対象として登録</li>
<li>ChromeやFirefoxはもちろんiOSシュミレーターなんかでもばっちり！(実機もいけるよ！)</li>
<li>RSpecみたいなBDDstyleの書き方もできるよ</li>
<li>sinon.jsとwhen.jsが内蔵されているのでこれ一つで結構いろいろできるよ！ (ちなみにsinon.jsも同じ作者だったはず)</li>
<li>クライアントサイドJSもテスト書こうね！</li>
</ul>


<p>みたいな感じです！</p>
]]></content>
  </entry>
  
</feed>

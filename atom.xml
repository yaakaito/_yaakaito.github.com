<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[yaakaito.org]]></title>
  <link href="http://yaakaito.github.com/atom.xml" rel="self"/>
  <link href="http://yaakaito.github.com/"/>
  <updated>2012-11-03T16:33:16+09:00</updated>
  <id>http://yaakaito.github.com/</id>
  <author>
    <name><![CDATA[yaakaito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[小さいCoffeeのテストにはVowsが便利]]></title>
    <link href="http://yaakaito.github.com/blog/2012/11/03/vows-coffee-testing/"/>
    <updated>2012-11-03T02:04:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/11/03/vows-coffee-testing</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
小さめのツールをCoffeeScriptで書く機会があったのですが、
テストに使った<a href="http://vowsjs.org/">Vows</a>(<a href="http://vowsjs.jp/">日本語訳</a>)というのが結構良かったです。
一言で言えば、BDDライクで非同期テストに強く、Coffeeと相性のよい、topicという独特の概念をもったフレームワークです。(長い)</p>

<h2>Vowsのセットアップと実行</h2>

<p>npm経由でインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install vows
</span><span class='line'>npm install -g vows</span></code></pre></td></tr></table></div></figure>


<p>設定ファイルとかは特に必要なく、直接テストファイルを実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vows test.js</span></code></pre></td></tr></table></div></figure>


<p>CoffeeScriptをそのまま実行することができます。ここが重要</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vows test.coffee --spec</span></code></pre></td></tr></table></div></figure>


<p><code>--spec</code>オプションを付けるといい感じの出力になります。</p>

<h2>Vowsのテストケース</h2>

<p>簡単な例として文字列を反転する<code>reverse</code>というモジュールを考えたときのテストはこんな感じ。
特にCoffeeScriptで書くことにメリットを感じるので、サンプルは全部CoffeeScriptです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vows    = require 'vows'
</span><span class='line'>assert  = require 'assert'
</span><span class='line'>reverse = require 'reverse'
</span><span class='line'>
</span><span class='line'>vows
</span><span class='line'>  .describe('reverse')
</span><span class='line'>  .addBatch
</span><span class='line'>    'example' :
</span><span class='line'>      topic : -&gt;
</span><span class='line'>        reverse('abc')
</span><span class='line'>      'should return cba' : (str) -&gt;
</span><span class='line'>        assert.equal str, 'cba'</span></code></pre></td></tr></table></div></figure>


<p><code>describe</code>を定義して、<code>addBatch</code>でテストのまとまりを追加します。
ポイントはさっきからちょっと出てきている<code>topic</code>で、これの実行結果がその下のテストケースへ渡ってきます。
この中は非同期でもokみたいで(今回は試していないけど)、<code>topic</code>の実行が終わったタイミングでテストが走る、という仕組みみたいです。便利ですね。
<code>topic</code>を使っていくとどうしてもモジュールを小さくせざるをえないので、きれいなコードを書くのにはよいと思います。</p>

<p><code>topic</code>とかテストケースはネストすることもできて、例えばabcの他にdefgもテストしたい！とかって場合は、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.addBatch
</span><span class='line'>  'example2' :
</span><span class='line'>    topic : reverse
</span><span class='line'>    'when abc' :
</span><span class='line'>      topic : (f) -&gt; f('abc')
</span><span class='line'>      'should return cba' : (str) -&gt;
</span><span class='line'>        assert.equal str, 'cba'
</span><span class='line'>    'when abc' :
</span><span class='line'>      topic : (f) -&gt; f('defg')
</span><span class='line'>      'should return gfed' : (str) -&gt;
</span><span class='line'>        assert.equal str, 'gfed'</span></code></pre></td></tr></table></div></figure>


<p>こういう感じで書くこともできます、一つ上の<code>topic</code>は次の<code>topic</code>に渡っていくので、テストするスコープを制限することができます。
ただ、ネストしすぎるとちょっと読みにくいですね。</p>

<h2>まとめ</h2>

<p>個人的には、今回みたいにNodeを使って小さいコマンドラインツールとかを全部Coffeeで書くときに使うのがよいかなーという印象でした。
クライアントサイドのテストとかになってくると、長い目で見たときにBusterJSやその他Swarm系使った方がよさそうな印象。
大きめのプロジェクトになってくると、テストケースが要はでかいオブジェクトの定義なので、どうもしんどくなっていく気がする。</p>

<p>テストの為の中間ファイルとして.jsを吐く必要がないので、リポジトリがCoffeeScriptだけできれいに保てるのもポイント。
vowsでカバーできるサイズなら全部CoffeeScriptで書いてしまっても、それなりにモチベーションが保てる。(CoffeeScriptそんなに好きじゃない)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ズルいデザインが流行っていたので]]></title>
    <link href="http://yaakaito.github.com/blog/2012/10/31/zurui/"/>
    <updated>2012-10-31T01:51:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/10/31/zurui</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！！！
ズルいデザインが流行っているので、僕もずるいデザインにしてみました！！！</p>

<p>ズルい線とかは元々使っていたので、さらにズルい要素を足して背景をカッチョヨクしてみました！！
あとは微妙に文字がでかくなったりしています！ズルいですね！！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KiwiとSpectaの比較]]></title>
    <link href="http://yaakaito.github.com/blog/2012/10/22/kiwi-vs-specta/"/>
    <updated>2012-10-22T00:48:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/10/22/kiwi-vs-specta</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
前まではiOSのテストには主にKiwiを使っていたのですが、最近Spectaが良い感じなので使っています。
結局のところ好みになってしまうのですが、簡単に比較というか感想を。(コードはそれぞれのREADMEみてください)
どちらもRSpecに代表されるBDDスタイルの記述ができます。</p>

<ul>
<li><a href="https://github.com/allending/Kiwi">Kiwi</a></li>
<li><a href="https://github.com/petejkim/specta">Specta</a></li>
</ul>


<h2>そもそもの違い</h2>

<p>どちらも似た感じでテストを書くことができますが、そもそもとしてSpectaは自身がマッチャーなどは提供していません。
主にExpectaを使うことになると思いますが、他のものを使うことができます。
対してKiwiはモックから何からそろったフルセットのフレームワークです。</p>

<p>Spectaの方がモジュール単位に分割されているので、ライブラリとして見たときは扱い易いです。
ただ、好みのライブラリとか特にないって場合はKiwiを使った方がスムーズにいける印象です。</p>

<h2>導入のしやすさ</h2>

<p>SenTestingKitで動かすならどっちも同じくらい簡単にセットアップできます。
ただしSpectaは分割している分、importとdefineが多くなってすこし見た目が悪いです。</p>

<h2>アサーション</h2>

<p>Sepcta使う最大の理由がほぼここにあって、Expectaががんばっているんですが、Objective-Cではありがちなプリミティブに対するラッパーが必要ないこと。
Kiwiの場合は<code>theValue</code>マクロが用意されていて、これを使わなきゃいけないのでちょっとだるい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>expect(1).to.equal(1); // Specta
</span><span class='line'>[[theValue(1) should] equal:theValue(1)]; // Kiwi</span></code></pre></td></tr></table></div></figure>


<p>あとはObjective-Cっぽく書くか、マクロで書くかの違いくらい。僕はKiwiっぽい記述の方が好きなんですが、どうしても<code>theValue</code>書きたくないでござる症候群が・・・。
マッチャーの豊富さはどちらも同じくらいです。beNonZeroとかが分かりやすく書けるのはちょっとKiwiの方がいいかな。
あとはBooleanがExpectaは<code>beTruthy</code> <code>beFalsy</code>ですが、Kiwiが<code>beTrue</code> <code>beFalse</code> なので気をつけましょう。</p>

<h2>モックとか</h2>

<p>Kiwiは組み込みのモック、SpectaはOCMockやLRMockyが推奨されているようです。
メソッドをモックしたりとか基本的なところは一緒ですが、ちょっとずつ特徴があります。</p>

<p>Kiwiの組み込みとLRMockyは、メッセージエクスペクテーションとして<code>recieve</code>がちゃんと使えるのがよいところ。
OCMockはこのあたりがちょっとめんどくさくて、mockしてverifyしてね、という形式。notはない。</p>

<p>逆にOCMockのいいところは<code>andDo:block</code>と<code>andCall:selector</code>が非常に使いやすいところ。
Kiwiなんかは、特にBlocksが絡むとテスト用に拡張したオブジェクトに頼ったりする場面があるけど、OCMockはそれがほとんど必要ないのが良い。</p>

<p>個人的にはBlocksを結構使うので、OCMockが使いやすいですね。</p>

<h2>選ぶ基準</h2>

<p>そもそもObjective-CでBDDフレームワーク使ったことないならKiwi使っとくのが無難です。
元々GHUnitで書いていて、やっぱLRMocky使いたいわー＞＜とかならSpecta使うといいと思います。</p>

<p>ちなみに最近ホットなReactiveCocoaはSpecta使ってますね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Buster.JSについて少しLTした]]></title>
    <link href="http://yaakaito.github.com/blog/2012/10/16/busterjs-clientjs-testing/"/>
    <updated>2012-10-16T22:24:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/10/16/busterjs-clientjs-testing</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。
突然LTすることになったので、最近気になってるBuster.JSネタで話してきました。
LTなのであんまり内容は濃くないです。iPhoneシュミレーターとかでも楽に動くし便利だね！というくらいです。</p>

<script async class="speakerdeck-embed" data-id="507b79def901500002026b02" data-ratio="1.3333333333333333" src="http://yaakaito.github.com//speakerdeck.com/assets/embed.js"></script>


<p>スライドにはほとんど情報がないので、どんな感じで話したかを箇条書きで。</p>

<ul>
<li>yaakaito.orgが変なところに飛ばされとる (今はなおったみたい)</li>
<li>みんなJSかきますよね！テストやってますか？？？</li>
<li>フレームワークいろいろありますが、最近はBuster.JSがアツい</li>
<li>JSTestDriverのようにブラウザ上での自動実行と、ヘッドレスでの実行がサポートされている</li>
<li>&#8220;Test-Driven JavaScript Development&#8221;でも言及されていますが、実際の環境で動かせることは大事</li>
<li>ちなみにこの本書いた人がBuster.JSの作者で、Buster.JSはこの本に書いてある理想を実際に行おうとしている</li>
<li>けど、ヘッドレスでも動くしNodeも扱えるので、使い分けがしやすくて便利</li>
<li>ヘッドレスはまだサポートされてると思った？残念、ベータちゃんでした！</li>
<li>ともあれ便利なので使ってみよう</li>
<li>npmで簡単インストール</li>
<li>buster.jsというコンフィグを書いて、テストを書く</li>
<li>サーバーを立ち上げてテスト対象になるブラウザでアクセス、対象として登録</li>
<li>ChromeやFirefoxはもちろんiOSシュミレーターなんかでもばっちり！(実機もいけるよ！)</li>
<li>RSpecみたいなBDDstyleの書き方もできるよ</li>
<li>sinon.jsとwhen.jsが内蔵されているのでこれ一つで結構いろいろできるよ！ (ちなみにsinon.jsも同じ作者だったはず)</li>
<li>クライアントサイドJSもテスト書こうね！</li>
</ul>


<p>みたいな感じです！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoffeeScriptでライトにBDDする]]></title>
    <link href="http://yaakaito.github.com/blog/2012/10/10/light-coffee-bdd/"/>
    <updated>2012-10-10T00:54:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/10/10/light-coffee-bdd</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。
ちょろいCoffeeScript(単発ライブラリ程度)をBDDしながら書くとしたら、
どんな感じにするのが楽かなーと思ったのでちょっとやってみた。</p>

<p>選ぶ以前に、割と最初から何使うかなーってのは決めていて、
grunt+grunt-jasmine-taskの組み合わせです。</p>

<ul>
<li><a href="https://github.com/yaakaito/light-coffee-bdd">light-coffee-bdd</a></li>
</ul>


<h2>grunt-jasmine-task</h2>

<p>grunt-jasmine-taskをnpmから引っ張ってきます。
これはgruntに標準でついてくるtest-taskと同じでphantomjsを使ってテストを実行するタスクです。
requirejs使うといい感じに書けるっぽいです。
package.jsonを適当に作って取ってきます。ついでにcoffee-taskも取ってきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;project&quot;</span>
</span><span class='line'>  <span class="p">,</span> <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;0.0.1&quot;</span>
</span><span class='line'>  <span class="p">,</span> <span class="s2">&quot;private&quot;</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">,</span> <span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;grunt-coffee&quot;</span> <span class="o">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>    <span class="p">,</span> <span class="s2">&quot;grunt-jasmine-task&quot;</span> <span class="o">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>grunt.js</h2>

<p>grunt.jsにcoffeeのコンパイルとjasmineのタスクを追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">coffee</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">src</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s1">&#39;lib/*.coffee&#39;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">dest</span> <span class="o">:</span> <span class="s1">&#39;build/&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">,</span> <span class="nx">spec</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">src</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s1">&#39;specs/*.coffee&#39;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">dest</span> <span class="o">:</span> <span class="s1">&#39;spec_runner/spec/&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">,</span> <span class="nx">runner</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">src</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s1">&#39;spec_runner/main.coffee&#39;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">dest</span> <span class="o">:</span> <span class="s1">&#39;spec_runner/&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">,</span> <span class="nx">jasmine</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">all</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">src</span> <span class="o">:</span> <span class="p">[</span><span class="s1">&#39;spec_runner/index.html&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">tasks</span> <span class="o">:</span> <span class="s1">&#39;coffee:all&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ランナー</h2>

<p>spec_runner/にランナーを用意します
libとかにjasmineとrequirejsを用意しておきます。
htmlはjasmineをブラウザで実行するときと一緒です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Jasmine Spec Runner<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;shortcut icon&quot;</span> <span class="na">type=</span><span class="s">&quot;image/png&quot;</span> <span class="na">href=</span><span class="s">&quot;lib/jasmine-1.2.0/jasmine_favicon.png&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;lib/jasmine-1.2.0/jasmine.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">data-main=</span><span class="s">&quot;main.js&quot;</span> <span class="na">src=</span><span class="s">&quot;lib/require-2.0.2.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じ。
で、main.jsからspecを読み込んで実行してあげます。
main.js自体はgruntでcoffeeからコンパイルします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">config =</span>
</span><span class='line'>  <span class="nv">paths :</span>
</span><span class='line'>    <span class="s">&#39;jasmine&#39;</span><span class="o">:</span>       <span class="s">&#39;lib/jasmine-1.2.0/jasmine&#39;</span>
</span><span class='line'>    <span class="s">&#39;jasmine.html&#39;</span><span class="o">:</span>   <span class="s">&#39;lib/jasmine-1.2.0/jasmine-html&#39;</span>
</span><span class='line'>    <span class="s">&#39;jasmine.helper&#39;</span><span class="o">:</span> <span class="s">&#39;lib/jasmine-1.2.0/jasmine-helper&#39;</span>
</span><span class='line'>  <span class="nv">shim :</span>
</span><span class='line'>    <span class="s">&#39;jasmine&#39;</span> <span class="o">:</span>
</span><span class='line'>      <span class="s">&#39;exports&#39;</span> <span class="o">:</span> <span class="s">&#39;jasmine&#39;</span>
</span><span class='line'>    <span class="s">&#39;jasmine.html&#39;</span><span class="o">:</span>   <span class="p">[</span><span class="s">&#39;jasmine&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="s">&#39;jasmine.helper&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s">&#39;jasmine&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">config</span> <span class="nx">config</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span> <span class="p">[</span><span class="s">&#39;jasmine&#39;</span><span class="p">,</span> <span class="s">&#39;jasmine.html&#39;</span><span class="p">,</span> <span class="s">&#39;jasmine.helper&#39;</span><span class="p">,</span> <span class="s">&#39;spec/sample_spec&#39;</span><span class="p">],</span> <span class="nf">(jasmine) -&gt;</span>
</span><span class='line'>  <span class="nv">jasmineEnv = </span><span class="nx">jasmine</span><span class="p">.</span><span class="nx">getEnv</span><span class="p">()</span>
</span><span class='line'>  <span class="nv">jasmineEnv.updateInterval = </span><span class="mi">1000</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">htmlReporter = </span><span class="k">new</span> <span class="nx">jasmine</span><span class="p">.</span><span class="nx">HtmlReporter</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">jasmineEnv</span><span class="p">.</span><span class="nx">addReporter</span> <span class="nx">htmlReporter</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">jasmineEnv.specFilter = </span><span class="nf">(spec) -&gt;</span>
</span><span class='line'>    <span class="nx">htmlReporter</span><span class="p">.</span><span class="nx">specFilter</span> <span class="nx">spec</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">jasmineEnv</span><span class="p">.</span><span class="nx">execute</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで準備完了です。適当なspecを書いてみましょう。</p>

<h2>sample_spec</h2>

<p>gruntで一緒にコンパイルするので、specもcoffeeで書けばよかだと思います。今回は実装がないので何もdefineしてません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">define</span> <span class="p">[],</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">describe</span> <span class="s">&#39;A suite&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">it</span> <span class="s">&#39;sample spec&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span><span class="nx">toBe</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとはコンソールから</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span> <span class="nx">grunt</span> <span class="nx">jasmine</span>
</span></code></pre></td></tr></table></div></figure>


<p>で動かします。watch-task書いて動かすのもよいと思います。</p>

<h2>まとめ</h2>

<p>jasmineの部分だけ抽出してますが、実際はこれ+coffeelint+cancat+minifyみたいな構成で書いています。
gruntと使うと簡単なものなら早くセットアップできて、ブラウザもイチイチリロードしなくていいような環境になるので、楽チンですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ｼｬﾊﾞﾄﾞｭﾋﾞ!ﾀｯﾁ!ﾀｲｼｮｰｸ!(ドワンゴ退職しました)]]></title>
    <link href="http://yaakaito.github.com/blog/2012/09/28/dwango/"/>
    <updated>2012-09-28T10:21:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/09/28/dwango</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！株式会社ドワンゴを退職しました！</p>

<p><a href="http://www.amazon.co.jp/registry/wishlist/CKH9SKYKNOT5">とりあえずなんかください。</a></p>

<p>ドワンゴには19歳の時からお世話になっていているので、だいたい3年くらい働いていたことになります。
主な業務はiOSアプリ開発でした、当初Objective-Cってなんですか、だった僕ですが、最終的には「オブジェクティブな汁が足りない」とかキチガイっぽいことを言っていたと思います。</p>

<p>ドワンゴではたくさんエキサイティングなことをさせてもらいました、なんとなく振り返ってみようと思います。</p>

<h2>ニコニコiPhone</h2>

<p>最初から中頃まで関わっていた仕事です。
生放送のサービスイン、その後の高画質化〜安定期までで、おもにプレイヤーを書いていました。
少しづつでも確実に大きくなっていくサービスを見ているのは楽しいもので、単純に楽しかったプロジェクトでした。
最後の方はプレイヤー全部改修して使いやすくしようとか、訳あって途中で引き継いだのですが、
iPad版のリーダーみたいなことをやらせてもらって、いろいろよい経験ができました。</p>

<h2>ニコニコiPhoneHTML5プレイヤー</h2>

<p>突然やってきた仕事でした、去年の9月中の話です。
「AU iPhone出るまでにiPhoneのブラウザでも再生できるようにしてほしい(10月中)」
1ヶ月ない・・・だと・・・。</p>

<p>というわけでいわゆるHTML5をプロダクトでやることになりました。
上司にはマネージャーとしてサポートしてもらったのですが、急な案件だったために実質一人で立ち向かうことに。
一人なのでリーダーですし、デザイナーのリソースもあいてないよ、ということだったので、リーダー兼プログラマー兼デザイナーというわりと楽しい状況でした。
死ぬ死ぬいいながら働いていましたが、なんとなくプロダクトが発足してからリリースまでっていう流れを早送りで体験できてよい気分でした。
途中で何度「これ終わったらW3C絶対殺す」と言ったか、もう覚えていません。
ツメが甘かった部分もいくつかありましたが、上司が補助してくれて、無事にリリースできました、本当によかった。
なんだかんだで一番思い入れのあるプロダクトでした。</p>

<h2>ニコニコ書籍</h2>

<p>後半はここでした。最初は火消しだったのですが、最終的には異動することになりました。
アプリを作っていたのもそうなんですが、赤いのに「iOSもテストガンガンやりたい！なんとかして！」みたいなことを言われて、
そっちのことを結構やったりとか、割と自由な感じで動いていました。(納期が緩いとかそういう話ではないですが。)
この辺のアレはいまがんばって文章にしているところで、ちゃんと成果として少しづつ公開していきます。
技術話とかそういうのも楽しかったですが、どっちかと言えばニコニコ書籍ではチームのつくりかた、みたいなのを見れた方が大きかったです。</p>

<h2>研究開発チャンネル</h2>

<p>エンジニアとはほとんど関係ないです。ドワンゴ研究開発チャンネルというニコニコのチャンネルで生放送をしたり出たりしていました。
なんというか、いろいろありました、という感じです。
機材の使い方から、プロデューサーっぽいことから、タレントっぽいことまでやってました。(こことは関係なしに何回かタレントっぽいこともやってましたが)
駆け足で大変でしたが、エンジニア以外の仕事もやれてよかったです。</p>

<h2>まとめ</h2>

<p>ともかくたくさん成長できたと思うし、とても楽しかったです！！！
みなさんお世話になりました！！！！！</p>

<p>うきょー先生の次回作にご期待ください！！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[22歳になりました]]></title>
    <link href="http://yaakaito.github.com/blog/2012/09/26/22-birthday/"/>
    <updated>2012-09-26T15:56:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/09/26/22-birthday</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！22歳になりました！！！！！！！！！</p>

<p>今年もいろいろありました！！！！！！！！わけあって今仕事してません！！！！</p>

<p>いろいろあったので今月末くらいに(もう末ですけど)いろいろなんかかくと思います！！！！</p>

<p><a href="http://www.amazon.co.jp/registry/wishlist/CKH9SKYKNOT5">なんかください！！！！！！</a></p>

<p>ところで「みいくんのちくわぶ」送ってくれた人が誰か分からないので名乗り出てください！！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS6のNSAttributedStringで色とか付ける]]></title>
    <link href="http://yaakaito.github.com/blog/2012/09/25/ios6-attributed-string/"/>
    <updated>2012-09-25T13:53:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/09/25/ios6-attributed-string</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
いままでは外部のライブラリを使わないとかなり面倒だった、UILabelとかに色付きの文字列の描画が、iOS6から標準サポートになりました！
便利なので使ってみましょう！！！！</p>

<h2>サンプル</h2>

<p>適当に色を付ける文章を探します、今回はgithubから「yaakaito pushed to master at yaakaito/Specs」という文章を抜き出してきました。
このうち yaakaito と yaakaito/Specs を青色にしてみようと思います。</p>

<p>コードはいつも通りgithubにあげてあります。</p>

<ul>
<li><a href="https://github.com/yaakaito/AttributedStringExample">AttributedStringExample</a></li>
</ul>


<h2>NSAttributedStringを作る</h2>

<p>実際のところ結構だるいのであんまり使ったことがない人も多いと思うのでまずはAttributedStringの作り方から。</p>

<p>作り方は大きく分けて二通りあって、</p>

<ul>
<li>小さいNSAttributedStringを複数つくって最後に繋げる</li>
<li>最初に全文でNSAttributedStringを作ってRangeで指定する</li>
</ul>


<p>という具合なのですが、多分前者の方が扱いやすいです。この記事では前者を使っています。</p>

<p>今回は色を付ける場所が二箇所＋プレーンなものが間に一つなので、全部で三つのNSAttributedStringを作って繋げます。</p>

<p>まず yaakaito の部分を作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSAttributedString</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString:</span><span class="s">@&quot;yaakaito&quot;</span>
</span><span class='line'>                                                           <span class="nl">attributes:</span><span class="err">@</span><span class="p">{</span><span class="n">NSForegroundColorAttributeName</span> <span class="o">:</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">blueColor</span><span class="p">]}];</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>NSString</code>と同じような要領で、<code>initWithString:</code>してあげて、二個目の引数に<code>attributes</code>を取ります。
この<code>attributes</code>は<code>NSDictionary</code>で、今回の例だと文字の色だけ指定しています。
他にも背景色や、フォント、アンダーラインを付けたり、影を付けたりとか、いろいろできるようです。
よく使いそうなのは <code>NSForegroundColorAttributedName</code>(文字の色) と <code>NSFontAttributeName</code>(フォント) あたりですかね。</p>

<p>せっかくなので次はフォントも指定してみましょう。 yaakaito/Specs の部分を作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSAttributedString</span> <span class="o">*</span><span class="n">repository</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString:</span><span class="s">@&quot;yaakaito/Specs&quot;</span>
</span><span class='line'>                                                                 <span class="nl">attributes:</span><span class="err">@</span><span class="p">{</span> <span class="n">NSForegroundColorAttributeName</span> <span class="o">:</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">blueColor</span><span class="p">],</span>
</span><span class='line'>                                                                               <span class="n">NSFontAttributeName</span> <span class="o">:</span> <span class="p">[</span><span class="n">UIFont</span> <span class="nl">boldSystemFontOfSize:</span><span class="mi">16</span><span class="p">]}</span> <span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後に真ん中の部分を作って、連結します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSAttributedString</span> <span class="o">*</span><span class="n">others</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString:</span><span class="s">@&quot; pushed to master at &quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSMutableAttributedString</span> <span class="o">*</span><span class="n">message</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithAttributedString:</span><span class="n">name</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">message</span> <span class="nl">appendAttributedString:</span><span class="n">others</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">message</span> <span class="nl">appendAttributedString:</span><span class="n">repository</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、NSAttributedStringの完成です。</p>

<h2>UILabelに表示する</h2>

<p>こっちは笑えるほど簡単で、いままでは <code>label.text</code> にNSStringを入れていたものを、 <code>label.attributedText</code> にNSAttributedStringを入れるだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">UILabel</span> <span class="o">*</span><span class="n">label</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UILabel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">320</span><span class="p">,</span> <span class="mi">320</span><span class="p">)];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview:</span><span class="n">label</span><span class="p">];</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">attributedText</span> <span class="o">=</span> <span class="n">message</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうするとさっき作ったNSAttributedStringが表示されます、便利ですね！！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ビューテストで便利なAlertNinjaを作りました]]></title>
    <link href="http://yaakaito.github.com/blog/2012/09/05/release-alert-ninja/"/>
    <updated>2012-09-05T19:45:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/09/05/release-alert-ninja</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！前回ふざけてましたが、今回は真面目にライブラリを作りました。
といっても、毎回書くのはめんどくさいのでまとめとくか程度です。</p>

<p>みなさん！iOSのテスト書いてますか？？？
ViewControllerなんかのテストを書いてるときに、例えばGHUnitなんかを使ってたりすると、
UIAlertViewがカジュアルに飛び出てきてウザイですよね＾ー＾ー＾ー＾</p>

<p>僕はUIAlertViewは、適当なラッパークラスを作って、そこを差し替えて出ないようにすることが多いんですが、
テストの為のクラスを作ってる様なものになってしまう上に、毎回書くのがだるポヨ・・・。</p>

<p>なのでついでだしテストも出来るようにしよう、ってことで、UIAlertViewを非表示にしつつ、スパイするライブラリを作りました。</p>

<ul>
<li><a href="https://github.com/yaakaito/AlertNinja">AlertNinja</a></li>
</ul>


<h2>AlertNinjaの機能</h2>

<p>さっきも書きましたが、UIAlertViewを非表示にする、とスパイするの２つの機能を持っています。
この二つの機能はほとんど同時に使う事が多くなると思います。</p>

<p>使い方はこんな感じ、適当なViewControllerがこんな感じでshowDialogというメソッドを持っていたとすると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">showDialog</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;Ninja&quot;</span>
</span><span class='line'>                                                  <span class="nl">message:</span><span class="s">@&quot;doron&quot;</span>
</span><span class='line'>                                                 <span class="nl">delegate:</span><span class="nb">nil</span>
</span><span class='line'>                                        <span class="nl">cancelButtonTitle:</span><span class="s">@&quot;YES&quot;</span>
</span><span class='line'>                                        <span class="nl">otherButtonTitles:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>テストを書くときにどこかからこれを読んでいると、アラートが表示されてしまいますね。
なのでAlertNinjaを使って、アラートがでる可能性のあるところを囲みます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testDialog</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">spy</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">viewController</span> <span class="n">showDialog</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">complete</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>spy</code>でスタートして、<code>complete</code>で終了です、なんか忍者っぽい感じにしたかったんです！！！
こうすると、まずアラートの表示をなかった事にできます。</p>

<p>次はどんなアラートか出たか知りたいですよね、出てないかもしれません。
これは<code>report</code>というものを取得することで検証できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">report</span><span class="p">]</span> <span class="n">showedAlerts</span><span class="p">]</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'><span class="n">STAssertEqualObjects</span><span class="p">(</span><span class="s">@&quot;Ninja&quot;</span><span class="p">,</span> <span class="n">alert</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="s">@&quot;alert title is Ninja&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>showedAlerts</code>は<code>spy</code>されてから表示されたUIAlertViewのリストです。(今のところこの機能しかないです。)
なので、これの<code>count</code>が0だったらアラートはなかったことになりますし、そうでなければ、その中身を検証できます。
今回の例では<code>title</code>が<code>Ninja</code>なアラートが表示されるはず、というテストになっていますね。</p>

<p>つなげるとこんな感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testDialog</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">spy</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">viewController</span> <span class="n">showDialog</span><span class="p">];</span>
</span><span class='line'>    <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">report</span><span class="p">]</span> <span class="n">showedAlerts</span><span class="p">]</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'>    <span class="n">STAssertEqualObjects</span><span class="p">(</span><span class="s">@&quot;Ninja&quot;</span><span class="p">,</span> <span class="n">alert</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="s">@&quot;alert title is Ninja&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">complete</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>confirmもできるよ！</h3>

<p>ボタンを何個か設定して、ここを押したい、みたいなテストにも対応できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">showConfirm</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;Ninja&quot;</span>
</span><span class='line'>                                                    <span class="nl">message:</span><span class="s">@&quot;Are you Ninja ?&quot;</span>
</span><span class='line'>                                                   <span class="nl">delegate:</span><span class="n">self</span>
</span><span class='line'>                                          <span class="nl">cancelButtonTitle:</span><span class="s">@&quot;NO&quot;</span>
</span><span class='line'>                                          <span class="nl">otherButtonTitles:</span><span class="s">@&quot;YES&quot;</span><span class="p">,</span> <span class="s">@&quot;I&#39;m Kunoichi&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">alertView:</span><span class="p">(</span><span class="n">UIAlertView</span> <span class="o">*</span><span class="p">)</span><span class="nv">alertView</span> <span class="nf">clickedButtonAtIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">buttonIndex</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">calledClickedButtonAtIndex</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">buttonIndex</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">result</span> <span class="o">=</span> <span class="s">@&quot;NO&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">buttonIndex</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">result</span> <span class="o">=</span> <span class="s">@&quot;YES&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">buttonIndex</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">result</span> <span class="o">=</span> <span class="s">@&quot;Kunoichi&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうなってるやつに・・・</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testConfirm</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">spy</span><span class="p">]</span> <span class="nl">andSelectIndexAt:</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">viewController</span> <span class="n">showConfirm</span><span class="p">];</span>
</span><span class='line'>    <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">report</span><span class="p">]</span> <span class="n">showedAlerts</span><span class="p">]</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">STAssertEqualObjects</span><span class="p">(</span><span class="s">@&quot;Ninja&quot;</span><span class="p">,</span> <span class="n">alert</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="s">@&quot;alert title is Ninja&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">STAssertEqualObjects</span><span class="p">(</span><span class="s">@&quot;Kunoichi&quot;</span><span class="p">,</span> <span class="n">viewController</span><span class="p">.</span><span class="n">result</span><span class="p">,</span> <span class="s">@&quot;result is &#39;Kunoichi&#39;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">complete</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで、<code>spy</code>に続けて<code>andSelectIndexAt</code>でどのインデックスのボタンを押すかを指定することができます。何も設定しないとキャンセルボタン扱いになります。
もちろんDelegateも呼ばれていて、さっきのViewControllerにはさらにこんなのが続いていて、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">willPresentAlertView:</span><span class="p">(</span><span class="n">UIAlertView</span> <span class="o">*</span><span class="p">)</span><span class="nv">alertView</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">calledWillPresent</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didPresentAlertView:</span><span class="p">(</span><span class="n">UIAlertView</span> <span class="o">*</span><span class="p">)</span><span class="nv">alertView</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">calledDidPresent</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">alertView:</span><span class="p">(</span><span class="n">UIAlertView</span> <span class="o">*</span><span class="p">)</span><span class="nv">alertView</span> <span class="nf">willDismissWithButtonIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">buttonIndex</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">calledWillDismiss</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">alertView:</span><span class="p">(</span><span class="n">UIAlertView</span> <span class="o">*</span><span class="p">)</span><span class="nv">alertView</span> <span class="nf">didDismissWithButtonIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">buttonIndex</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">calledDidDismiss</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>全体でこんなテストが通るようになっています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testConfirm</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">spy</span><span class="p">]</span> <span class="nl">andSelectIndexAt:</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">viewController</span> <span class="n">showConfirm</span><span class="p">];</span>
</span><span class='line'>    <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">report</span><span class="p">]</span> <span class="n">showedAlerts</span><span class="p">]</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">STAssertEqualObjects</span><span class="p">(</span><span class="s">@&quot;Ninja&quot;</span><span class="p">,</span> <span class="n">alert</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="s">@&quot;alert title is Ninja&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">STAssertTrue</span><span class="p">(</span><span class="n">viewController</span><span class="p">.</span><span class="n">calledWillPresent</span><span class="p">,</span> <span class="s">@&quot;called will present delegate method&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">STAssertTrue</span><span class="p">(</span><span class="n">viewController</span><span class="p">.</span><span class="n">calledDidPresent</span><span class="p">,</span> <span class="s">@&quot;called did present delegate method&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">STAssertTrue</span><span class="p">(</span><span class="n">viewController</span><span class="p">.</span><span class="n">calledWillDismiss</span><span class="p">,</span> <span class="s">@&quot;called will dismiss delegate method&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">STAssertTrue</span><span class="p">(</span><span class="n">viewController</span><span class="p">.</span><span class="n">calledDidDismiss</span><span class="p">,</span> <span class="s">@&quot;called did dismiss delegate method&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">STAssertTrue</span><span class="p">(</span><span class="n">viewController</span><span class="p">.</span><span class="n">calledClickedButtonAtIndex</span><span class="p">,</span> <span class="s">@&quot;called did clicked button at Index&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">STAssertEqualObjects</span><span class="p">(</span><span class="s">@&quot;Kunoichi&quot;</span><span class="p">,</span> <span class="n">viewController</span><span class="p">.</span><span class="n">result</span><span class="p">,</span> <span class="s">@&quot;result is &#39;Kunoichi&#39;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">ninja</span><span class="p">]</span> <span class="n">complete</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>流れがテストできる</h2>

<p>UIAlertViewを含んだテストができるようになったので、全体としてフィーチャーのテストがし易くなりました。
例えば <a href="https://github.com/yaakaito/NLTHTTPStubServer">NLTHTTPStubServer</a> と組み合わせると、
「APIにアクセスしたけど、404だったから&#8221;そんなものはない&#8221;というアラートだす」みたいなテストを結構スマートに書く事ができますね！！！(宣伝)
テストの為の何かをほとんどプロダクトコードに埋め込まなくとも良いのも特徴です。</p>

<h2>TODO</h2>

<p>今はこれだけで、以下には対応してない＆やろうと思っているので乞うご期待！</p>

<ul>
<li>UIActionSheetも使えるようになる</li>
<li>UIAlertViewStyleのサポート</li>
</ul>


<p>他にもこれ必要じゃね、というのがあればIssueなどに投げてください！！！</p>

<h2>というわけで</h2>

<p>よろしくお願いします！</p>

<ul>
<li><a href="https://github.com/yaakaito/AlertNinja">AlertNinja</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[もしプログラマーが仮面ライダーウィザードだったら]]></title>
    <link href="http://yaakaito.github.com/blog/2012/09/03/wizard/"/>
    <updated>2012-09-03T08:25:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/09/03/wizard</id>
    <content type="html"><![CDATA[<h2>普段の開発</h2>

<p>ﾙﾊﾟｯﾁ!ｺﾐｯﾄ!ｱｯﾄﾞｯｺﾞ!</p>

<h2>ブランチをマージするとき</h2>

<p>ﾘﾍﾞｪｰｽ!ﾌﾟﾘｰｽﾞ!</p>

<h2>マージしたのでプッシュするとき</h2>

<p>ﾌﾟｯｼｭｯｽﾄﾗｲｸ!ｻｲｰｺｰﾀﾞｾﾞｯ!(reject)</p>

<h2>しかたなくpull rebaseしたとき</h2>

<p>ｶﾓﾝ!ｺｯﾐﾄ!ﾏｧｰｼﾞﾊﾝﾄﾞ!ｶﾓﾝ!ｺｯﾐﾄ!ﾏｧｰｼﾞﾊﾝﾄﾞ!ﾋｰﾋｰﾋｰﾋｰﾋｰ!ｽﾗｯｼｭｽﾄﾗｲｸ!(rebase失敗)</p>

<h2>がんばって直して、テストを走らせたとき</h2>

<p>ﾇﾙｯﾁ!ﾏｼﾞｯｸ!ﾀｯﾁｺﾞｳ!ﾇﾙｯﾁ!ﾏｼﾞｯｸ!ﾀｯﾁｺﾞｳ!ﾒｯｾｰｼﾞ!ﾌﾟﾘｰｽﾞ!ﾁｮｰｲｲn (ｾｸﾞﾌｫ)</p>

<h2>疲れたのでケータイ持って飯へ現実逃避</h2>

<p>ｼｬﾊﾞﾄﾞｩﾋﾞﾀﾞｯﾁﾍﾝｼﾝ!ﾄﾞｺﾓ!ﾌﾟ,ﾘｰｽﾞ↑ﾄﾞﾝﾄﾞﾄﾞﾄﾞﾄﾞﾄﾞﾄﾞﾝ↑↑↑ｷﾒﾙｾﾞｪ!!!ﾙﾊﾟｯﾁ!ｱｲﾌｫﾝ!ﾀｯﾁｺﾞｩ↑ｺ,ﾈｸﾄ!ﾌﾟ,ﾘｰｽﾞ↑ｴｰﾕ→ﾁｮ→ｲｲﾈｯ↑ﾌﾟﾗﾁﾅｯｽﾄﾗｲｸｯ!ﾄﾞﾛｲﾄﾞｻｰｲｺｰﾀﾞｾﾞｪ↑ｳｨｰ↑↑↑</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリからGithubOAuth使うの見直している]]></title>
    <link href="http://yaakaito.github.com/blog/2012/09/03/re-github-oauth/"/>
    <updated>2012-09-03T04:53:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/09/03/re-github-oauth</id>
    <content type="html"><![CDATA[<p>こんばんは！うきょーです、非常に眠いです。
<a href="http://yaakaito.github.com/blog/2012/09/01/github-oauth/">前回</a>わりとカジュアルな感じでOAuthしたんですが、
<a href="https://twitter.com/azu_re/status/241853336964444160">こういうツイート</a>をみて、<code>state</code>のこと書いてなかったからそのことかなーと思ったんですが、
よくよく考えてみれば、起動スキーマ直接叩かれたらなんか起こりそうだよなーとかいろいろ気になってきたのでずっとOAuth2でググったりしてた。</p>

<h2>そもそも</h2>

<p>前回の感じになったのが単純に、メールとかパスワード入力するのがだるいしあんまりさせたくないなー、OAuthあったなーいけんじゃねー、という感じの理由。
<a href="http://developer.github.com/v3/oauth/">OAuth | GitHub API</a>を見てて、非Webアプリケーション向けの最初はBasic認証使って〜がやりたくなった感じですね。
で、本来はBasic認証一回使ってーの方がいいと思うんですが、いろいろクライアントなライブラリを見ていると、<code>Client Secret</code>を引数に取ったりしてて、
じゃあこっちでもいいのかなーとなった。</p>

<h2>本当か？</h2>

<p>で、気になって何個かGithubOAuth使ってそうなアプリを探してみたんだけど、hojokiなんかは<code>UIWebView</code>使ってやってるっぽいしやっぱこっちでいいんかなーと。
けど<code>UIWebView</code>の作り上URLとか自分で出さないといけない訳ですが、それすら偽装してかなりそれっぽく見せる事は可能なので、
僕が使う側だったらあんまり使いたくないなーと思ってしまった。一緒に変なJSとか走らされてもやだなーと思ったり。(他の人がどう思ってるのかは知らないですが)
それだったらSafariに飛ばせばいいじゃん、でcallbackにカスタムスキームでー、でできたわけ。で、そこに弱そうなところがあるなら一旦塞ぐかーという感じで作ったのを適当にアップデート。</p>

<ul>
<li><a href="https://github.com/yaakaito/GithubOAuthExample">GithubOAuthExample</a></li>
</ul>


<p>やったのは、（今回はダミーだけど）<code>state</code>の付加と、OAuthしている時以外は起動スキーマを無効化した。（今は単純にabortしてるだけ）
あとは本番では起動スキーマが使える時間とかも短くしぼったり、もやろうかなと思っていて、
これでよっぽどな感じじゃない限りはインジェクションとかは大丈夫そうな感じがする。
起動スキーマ持って行かれたときもまあ<code>Client Secret</code>バレなきゃだいじょ・・・そもそも<code>Secret</code>持っていいの？
一応すごいがんばりをすれば秘密じゃなくなる気がする。</p>

<h2>ライブラリにみるOAuth</h2>

<p>さっきも書いたけどOAuthClientと名を打ってるライブラリは<code>Client ID</code>と<code>Client Secret</code>を要求していることが多いし、
プラスアルファでアカウントとパスワードも要求してたりする。
クライアント仲間ってことでJSも何個か見てみたんですが、
カジュアルにSecretむき出し・・・秘密とは・・・みたいな感じになってて何を信じればいいのか分からなくなってきた。（まあTitaniumとかで使ってねってことだとは思うんだけど・・・）</p>

<h2>Implicit Flow</h2>

<p>さまよってるうちに「<a href="http://www.sakimura.org/2012/02/1487/">単なる OAuth 2.0 を認証に使うと、車が通れるほどのどでかいセキュリティー・ホールができる</a>」
というのに出会った、関係ありそうなので読んでみたんだけど、アプリケーションの認証として使うから駄目なのであって、
クライアントとして認可される場合にはまあ大丈夫か、ってことでいいのかな。
一旦は置いておいて良さそうだけど、あとで自分で見直したときのメモ。</p>

<h2>で</h2>

<p>正直どうやるのが理想なのかよくわからなくなってきたね、ずばっと教えてエロい人！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリでGithubにOAuthする]]></title>
    <link href="http://yaakaito.github.com/blog/2012/09/01/github-oauth/"/>
    <updated>2012-09-01T19:12:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/09/01/github-oauth</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。
Githubと連動したアプリを作りたくなったので、GithubのOAuthをiOSアプリでやってみました。</p>

<ul>
<li><a href="http://developer.github.com/v3/oauth/">OAuth | GitHub API</a></li>
<li><a href="https://github.com/yaakaito/GithubOAuthExample">GithubOAuthExample</a></li>
</ul>


<h2>アプリケーションを登録</h2>

<p>[AccountSettings]-> [Applications] -> [Register new application]からアプリケーションを登録します。
この時にCallback URLにカスタムスキームを入れる事ができるので、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yourapp://oauth</span></code></pre></td></tr></table></div></figure>


<p>みたいなコールバックを指定します。そうするとIDがもらえるのでこれで登録は終わりです。</p>

<h2>Githubへログインしてもらう</h2>

<p>OAuthなので、Safariを開いてacceptしてもらいましょう。パスワード入力してもらってJS使って押すとか、やめましょうね。
発行されたIDのうちClient IDをくっつけて</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *scope = @"public_repo,gist";
</span><span class='line'>NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"https://github.com/login/oauth/authorize?client_id=%@&scope=%@",kClientId, scope]];
</span><span class='line'>[[UIApplication sharedApplication] openURL:url];</span></code></pre></td></tr></table></div></figure>


<p>みたいな具合で、Safariを起動します。
別にUIWebViewでもいいと思いますが、専用のビュー作るのもめんどくさいし、ちゃんとGithubなことを証明するのもだるいので、Safariでいいと思います。</p>

<h2>コールバックを拾ってアクセストークンをリクエスト</h2>

<p>カスタムスキームからの起動で<code>code</code>がやってくるので、これを持って</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/login/oauth/access_token</span></code></pre></td></tr></table></div></figure>


<p>へPOSTします。</p>

<p>あとはkey-value形式でトークンが返ってくるので、それを使うだけです。簡単ですね。トークンはちゃんとキーチェインとかに入れてあげましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[便利なライブラリHullToRefresh作った]]></title>
    <link href="http://yaakaito.github.com/blog/2012/08/31/hull-to-refresh/"/>
    <updated>2012-08-31T06:31:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/08/31/hull-to-refresh</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！みなさんPullToRefresh使ってますか？便利ですよね。
けど、引っ張って更新、そろそろ飽きてきませんか？てゆーか、なんでわざわざ引っ張らなきゃいけないんですか？</p>

<p>それを解決するために、HullToRefreshというライブラリを作りました。名前はギャグっぽいですがマジメです。</p>

<ul>
<li><a href="https://github.com/yaakaito/HullToRefresh">HullToRefresh</a></li>
</ul>


<p>振るとRefreshはその名の通り、iPhoneを大きく振るとイベントが飛んでくるライブラリです、すごく、すごく便利ですね。
なんてったって画面に触る必要がありません、指を動かす必要もありません。更新したいな、と思ったときにはiPhoneでフリフリシェイクすればいいのです、楽しいですね。
電車に乗っているときは自動で揺れを検知し、空気を読んで更新をしてくれます。なんて便利なんでしょう、指による入力なんて、もはや時代遅れなのです。
このすばらしいアイデアの使い方はすごく簡単で、initしてフルフルNotificationを登録するだけです！！！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="n">HullToRefresh</span> <span class="n">sharedHullHull</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver:</span><span class="n">self</span>
</span><span class='line'>                                         <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">callback</span><span class="p">)</span>
</span><span class='line'>                                             <span class="nl">name:</span><span class="n">kDidHullHullNotification</span>
</span><span class='line'>                                           <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>ね？簡単でしょう？サンプルについてくるアプリはこんな感じになります。</p>

<p><img src="http://yaakaito.github.com/images/hullhull.png"></p>

<p>すばらしいライブラリなので、是非使ってみてください！使いどころとしては、空気を読まないアプリケーション作るときに便利です。</p>

<h3>まとめ</h3>

<p>完全にギャグです。タイポしたときとかに出るように割と悪意を持って作っていますが、ただのギャクです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gruntのcoffeelintタスク作ってみた]]></title>
    <link href="http://yaakaito.github.com/blog/2012/08/21/grunt-coffeelint/"/>
    <updated>2012-08-21T01:59:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/08/21/grunt-coffeelint</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
みなさん<a href="http://www.coffeelint.org/">CoffeeLint</a>使ってますか？
僕はあんまりCoffeeは書かないんですが、ちょっと使ってみようかなーと思っているアプリがあるので、それの下準備をしています。
coffeelintは便利ですがいちいち</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ coffeelint hoge.coffee</span></code></pre></td></tr></table></div></figure>


<p>とかするのはだるいですよね！
なので<a href="https://github.com/cowboy/grunt">grunt.js</a>を使いましょう！
(grunt.jsの説明は別にしません)</p>

<h2>使い方</h2>

<p>ほぼ自分用でnpmとかには登録してないのでがんばってください！</p>

<ul>
<li><a href="https://github.com/yaakaito/grunt-coffeelint">grunt-coffeelint</a></li>
</ul>


<p>まずはCoffeelintを入れます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install -g coffeelint</span></code></pre></td></tr></table></div></figure>


<p>取ってきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git://github.com/yaakaito/grunt-coffeelint.git grunt-coffeelint</span></code></pre></td></tr></table></div></figure>


<p>タスクをコピーします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd grunt-coffeelint
</span><span class='line'>cp -rf tasks your/grunt/dir</span></code></pre></td></tr></table></div></figure>


<p>あとはロードしてconfigを埋めます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadTasks</span><span class="p">(</span><span class="s1">&#39;tasks&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="nx">coffeelint</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">all</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">files</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s1">&#39;coffee/*.coffee&#39;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>いざ！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">grunt</span> <span class="nx">coffeelint</span>
</span><span class='line'><span class="nx">Running</span> <span class="s2">&quot;coffeelint:all&quot;</span> <span class="p">(</span><span class="nx">coffeelint</span><span class="p">)</span> <span class="nx">task</span>
</span><span class='line'><span class="p">[</span> <span class="s1">&#39;coffee/*.coffee&#39;</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">✓</span> <span class="nx">coffee</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">coffee</span>
</span><span class='line'>  <span class="err">✓</span> <span class="nx">coffee</span><span class="o">/</span><span class="nx">b</span><span class="p">.</span><span class="nx">coffee</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">✓</span> <span class="nx">Ok</span><span class="o">!</span> <span class="err">»</span> <span class="mi">0</span> <span class="nx">errors</span> <span class="nx">and</span> <span class="mi">0</span> <span class="nx">warnings</span> <span class="k">in</span> <span class="mi">2</span> <span class="nx">files</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">Done</span><span class="p">,</span> <span class="nx">without</span> <span class="nx">errors</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>やりましたね！！！！</p>

<h2>まとめ</h2>

<p>grunt.js便利なので使いましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dequeueReusable~の実装とテスト]]></title>
    <link href="http://yaakaito.github.com/blog/2012/08/19/dequeue-reusable-making/"/>
    <updated>2012-08-19T02:35:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/08/19/dequeue-reusable-making</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。UITableViewに実装されている<code>dequeueReusableCellWithIdentifier</code>と同等の機能を持ったものを開発したいんだけど的な話です。
dataSourceに似たのインターフェイスを持ってビューを実装するときに、不特定個数のものに対してインスタンスをすべて生成するわけにも行かないので、ある程度制御してあげる必要があります。
今回はUIScrollView上に構築していく前提になっています。シンタックスハイライターを作ろうとしているので、使い回して描画される対象になるのは、行数表示とコード一行分の表示です。</p>

<p>コードはいつも通りgithubにあります。</p>

<ul>
<li><a href="https://github.com/yaakaito/BGSyntaxHighlighter">BGSyntaxHighlighter</a>

<ul>
<li>注)ライブラリとしては未完成です</li>
</ul>
</li>
</ul>


<h2>実装方法を考える</h2>

<p>さらっと思いつくところではリングバッファのようにしておけばよい気がしますね。
ATPagingViewが似たような機能を実装していたのでコード読んでみたのですが、こちらはページング終了時にリサイクル用のSetに取っておいて、
次の表示タイミングでそこから適当な物をもっていく、という方式でした。微妙にリングバッファと違う・・・。
リングバッファっぽい感じでいけそう？と考えていたのですが、リングバッファにしてしまうと、画面の大きさに合わせてバッファの数を調整しなおさければいけなかったり、
今回は中で簡潔している構造になっているのでよいのですが、APIを外に向けたときに、identifier関連でめんどくなりそうだなーという気がしたので、ATPagingViewがやっているような方法を採用しました。
やることとしては、</p>

<ul>
<li>初回時に必要な分のビューを作る</li>
<li>スクロールにあわせて必要なビューの差分を取って作る</li>
<li>必要なビューを使い回す対象にする</li>
</ul>


<p>案外、簡単そうに見えますね。</p>

<h2>UIScrollViewベースで実装するときの注意点</h2>

<p>UIScrollViewで実装する場合には、UITableViewほど正確にスクロールの位置がとれる訳ではないのがポイントというか、気をつけるところです。
今回はめんどくさいのでやらなかったのですが、ある程度余裕を持って描画してあげないと、下の方のビューが欠けてしまったりします。
適当な余裕をもって描画してあげるといい感じになると思います。</p>

<h2>実装していこう！</h2>

<p>というわけで実装していきましょう。</p>

<h4>下準備</h4>

<p>まずはdequeueReusableのインターフェイスを作ります。今回は行数表示とコード一行分の表示を分けているので、2つ分必要です。
が、実装としては両方同じなので、行数表示だけの例を出していきます。全文を確認したい方はgithubからどうぞ！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">BGSyntaxHighlightLineNumberView</span><span class="o">*</span><span class="p">)</span><span class="nf">dequeueReusableLineNumberView</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">recycleLineNumberViews</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">recycleLineNumberViews</span> <span class="n">count</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">BGSyntaxHighlightLineNumberView</span> <span class="o">*</span><span class="n">view</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">recycleLineNumberViews</span> <span class="n">anyObject</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">recycleLineNumberViews</span> <span class="nl">removeObject:</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">view</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>recycleLineNumberViews</code>は<code>NSMutableSet</code>で、ここに再利用可能なビューを入れて行きます。
このメソッドは利用可能なビューが存在すれば、そこから適当なビューを抜き出してきて返す、という具合です。
実際にビューに対しての描画処理をここでやってしまうと残念な感じになってしまうので、依存しないように気をつけましょう。
次のここからビューの取得を試みて、なければ新しいものを作って、描画を行うメソッドです。
UITableViewで言えば、<code>cellForRowAtIndexPath:</code>にあたる部分で、iOSエンジニアなら見覚えのある感じだと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">BGSyntaxHighlightLineNumberView</span><span class="o">*</span><span class="p">)</span><span class="nf">lineNumberViewAtRow:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">row</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">BGSyntaxHighlightLineNumberView</span> <span class="o">*</span><span class="n">view</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">dequeueReusableLineNumberView</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">view</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">view</span> <span class="o">=</span> <span class="p">[[</span><span class="n">BGSyntaxHighlightLineNumberView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectZero</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">view</span><span class="p">.</span><span class="n">lineNumber</span> <span class="o">=</span> <span class="n">row</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">view</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで大体の準備ができました。<code>BGSyntaxHighlightLineNumberView</code>が必要なときは、このメソッド経由で取得すれば、
再利用できるときは再利用を、ビューが足りずに新しく作る必要があるときは新しくビューを作ってくれます。</p>

<h3>UIScrollViewへ表示する</h3>

<p>では、これを使って実際に<code>UIScrollView</code>へ行数を表示してみましょう。
初回のタイミングというか、最初に必要なものが決まるタイミングで必要な分だけビューを作ります。
(今回は<code>layoutSubViews</code>なんですが、レイアウト以外をここでやるの微妙な感じがするので、こっちの方がよくね？というのがあれば教えてください。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">layoutSubviews</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...     </span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">codeObject</span> <span class="n">numberOfCodeLines</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">makeAndLayoutLineAtRow:</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">((</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">kLineHeight</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">viewingLinesRange</span> <span class="o">=</span> <span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="n">U</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>必要な分だけビューを作って、初期表示に必要ない部分になったらどこまで描画したかを記録しbreakします。
<code>makeAndLayoutLineAtRow:</code>は指定した行のビューを生成してくれるメソッドで、中身はこんな感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">makeAndLayoutLineAtRow:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="n">row</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">BGSyntaxHighlightLineNumberView</span> <span class="o">*</span><span class="n">lineNumberView</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">lineNumberViewAtRow:</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">lineNumberViews</span> <span class="nl">addObject:</span><span class="n">lineNumberView</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">lineNumberScrollView</span> <span class="nl">addSubview:</span><span class="n">lineNumberView</span><span class="p">];</span>
</span><span class='line'>    <span class="n">lineNumberView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">kLineHeight</span> <span class="o">*</span> <span class="p">(</span><span class="n">row</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="n">kLineNumberWidth</span><span class="p">,</span> <span class="n">kLineHeight</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここまでで、とりあえず最初の表示が作れました、スクロールにあわせて必要な分を生成するようにしましょう。
<code>UIScrollViewDelegate</code>の<code>scrollViewDidScroll:</code>で、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">scrollViewDidScroll:</span><span class="p">(</span><span class="n">UIScrollView</span> <span class="o">*</span><span class="p">)</span><span class="nv">scrollView</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">y</span> <span class="o">=</span> <span class="n">scrollView</span><span class="p">.</span><span class="n">contentOffset</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">y</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">y</span> <span class="o">+</span> <span class="n">scrollView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">&gt;</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">codeObject</span> <span class="n">numberOfCodeLines</span><span class="p">]</span> <span class="o">*</span> <span class="n">kLineHeight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// いらないビューを再利用対象にする</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">recycleLinesOfOutsideFromRangeY:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="n">scrollView</span><span class="p">.</span><span class="n">contentOffset</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">scrollView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">      差分を計算して必要なビューをmakeAndLayoutLineAtRow:で描画</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>差分の計算ロジックなんかは長くなってしまうので、省略しています。表示範囲内にはいっているけれど、まだ表示されてないビューがある場合に表示するロジックです。
<code>recycleLinesOfOutsideFromRangeY:</code>は、名前がよくわからなかったので微妙なのですが、スクロール後に必要なくなったものを<code>removeFromSuperView</code>して、再利用対象にするメソッドです。
一見作ってから削除、でもそんなに変わらない気がしますが、先に削除しておくと、削除されたものをそのまま使い回すことができるので、少しメモリが節約できます。
<code>recycleLinesOfOutsideFromRangeY:</code>を省略して簡単に乗せておくと、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">recycleLinesOfOutsideFromRangeY:</span><span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nv">range</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">addingRecycleLineNumberViews</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSUInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">length</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">lineNumberViews</span> <span class="n">count</span><span class="p">];</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="cm">/*</span>
</span><span class='line'><span class="cm">          範囲外のものを抽出</span>
</span><span class='line'><span class="cm">        */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">recycleLineNumberViews</span> <span class="nl">addObjectsFromArray:</span><span class="n">addingRecycleLineNumberViews</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">lineNumberViews</span> <span class="nl">removeObjectsInArray:</span><span class="n">addingRecycleLineNumberViews</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>という具合です。</p>

<h3>実際どれくらいのビューを必要とするのか</h3>

<p>ここまでで大体実装ができた訳ですが、実際にどれくらいのビューが必要になるのでしょうか。
今回の例では一行の高さが20pxなので、縦を460px確保したとすると、初期状態で460/20で23個必要になります。
スクロールにあわせて描画を行って行くと、初回で何個かallocされれ、あとは大抵24~27個程度のビューのみで構成することがきでています。</p>

<h2>テストを書く</h2>

<p>さて、次はテストを書きましょう。<code>dequeueReusable~</code>のテストとして必要な項目は、</p>

<ul>
<li>あるスクロール位置でのビューが想定した通りにレンダリングされているか</li>
<li>適当なところにスクロールしたときにビューを使い回しているか</li>
</ul>


<p>の2つでしょうか。まずは1つ目の方からテストしてみましょう。
説明を分かり易くするために、ここからビューの高さを100px(ぴったりの場合ビューは5個)で統一していきます。</p>

<h3>想定したレンダリングになっているかテスト</h3>

<p>キチンとレイアウトが出来ているかは別のテスト(<code>dequeueReusable~</code>を無視したテスト)に任せるとして、スクロールした位置によってビューの枚数がキチンとあっているかを確認しましょう。
まずは、ぴったりと高さの倍数で移動したケース。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testRenderingViews</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">320</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">view</span> <span class="n">layoutSubviews</span><span class="p">];</span>
</span><span class='line'>    <span class="n">GHAssertEquals</span><span class="p">(</span><span class="mi">5</span><span class="n">U</span><span class="p">,</span> <span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="n">lineNumberViews</span> <span class="n">count</span><span class="p">],</span> <span class="s">@&quot;100/20=5で初期段階で5個ある&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GHAssertEquals</span><span class="p">(</span><span class="mi">5</span><span class="n">U</span><span class="p">,</span> <span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="n">lineViews</span> <span class="n">count</span><span class="p">],</span> <span class="s">@&quot;100/20=5で初期段階で5個ある&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="n">lineNumberScrollView</span> <span class="nl">scrollRectToVisible:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">180</span><span class="p">,</span> <span class="mi">320</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="nl">animated:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>    <span class="n">GHAssertEquals</span><span class="p">(</span><span class="mi">5</span><span class="n">U</span><span class="p">,</span> <span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="n">lineNumberViews</span> <span class="n">count</span><span class="p">],</span> <span class="s">@&quot;ぴったりで移動するのでやっぱり5個ある&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GHAssertEquals</span><span class="p">(</span><span class="mi">5</span><span class="n">U</span><span class="p">,</span> <span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="n">lineViews</span> <span class="n">count</span><span class="p">],</span> <span class="s">@&quot;ぴったりで移動するのでやっぱり5個ある&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こっちは簡単ですね。次に10pxくらいずれた場合、この場合は一番上と下に半分づつのビューが必要なので、全体で6個になります、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testMisalignRenderingVies</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">320</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">view</span> <span class="n">layoutSubviews</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="n">lineNumberScrollView</span> <span class="nl">scrollRectToVisible:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">190</span><span class="p">,</span> <span class="mi">320</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="nl">animated:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>    <span class="n">GHAssertEquals</span><span class="p">(</span><span class="mi">6</span><span class="n">U</span><span class="p">,</span> <span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="n">lineNumberViews</span> <span class="n">count</span><span class="p">],</span> <span class="s">@&quot;すこしずれて移動するので下に1個余分に追加されて6個になる&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GHAssertEquals</span><span class="p">(</span><span class="mi">6</span><span class="n">U</span><span class="p">,</span> <span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="n">lineViews</span> <span class="n">count</span><span class="p">],</span> <span class="s">@&quot;すこしずれて移動するので下に1個余分に追加されて6個になる&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じです。</p>

<h3>適当なところにスクロールした場合でのビューの個数をテスト</h3>

<p>どこにスクロールしたときも、ビューを使い回して一定以上の数のビューを生成しないのが今回の目的なので、これをテストします。
自分でたくさんいろんなところにスクロールするテストケースを書いてもいいですが、こういう時はQuickCheckが適用できます。
Objective-CのQuickCheckライブラリは、NLTQuickCheckをご利用ください。(宣伝)</p>

<ul>
<li><a href="https://github.com/yaakaito/NLTQuickCheck">NLTQuickCheck</a></li>
</ul>


<p>標準のdoubleArbitraryでは少し大きいので、doubleArbitaryの<code>quadraticGenWithA:B:C:</code>へ渡す数値を調整して、大体+-0~600pxくらいの範囲の値を作ってくれるArbitraryを定義します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@implementation</span> <span class="nc">NSNumber</span> <span class="nl">(BGArbitrary)</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">scrollYArbitrary</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NLTQGen</span> <span class="o">*</span><span class="n">quadratic</span> <span class="o">=</span> <span class="p">[</span><span class="n">NLTQGen</span> <span class="nl">quadraticGenWithA:</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">16</span> <span class="nl">b:</span><span class="mi">1</span> <span class="nl">c:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NLTQGen</span> <span class="o">*</span><span class="n">doubleGen</span> <span class="o">=</span> <span class="p">[</span><span class="n">NLTQGen</span> <span class="nl">genWithGenerateBlock:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">double</span> <span class="n">progress</span><span class="p">,</span> <span class="kt">int</span> <span class="n">random</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NLTQGen</span> <span class="o">*</span><span class="n">chooser</span> <span class="o">=</span> <span class="p">[</span><span class="n">NLTQGen</span> <span class="n">randomGen</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">chooser</span> <span class="nl">resizeWithMinimumSeed:</span><span class="o">-</span><span class="n">random</span> <span class="nl">maximumSeed:</span><span class="o">+</span><span class="n">random</span><span class="p">];</span>
</span><span class='line'>        <span class="n">random</span> <span class="o">=</span> <span class="p">[[</span><span class="n">chooser</span> <span class="nl">valueWithProgress:</span><span class="n">progress</span><span class="p">]</span> <span class="n">intValue</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">place</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span><span class="n">random</span><span class="p">]</span> <span class="n">length</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NLTQStandardGen</span> <span class="nl">standardGenWithMinimumSeed:</span><span class="mi">2</span> <span class="nl">maximumSeed:</span><span class="n">place</span><span class="p">]</span> <span class="n">currentGeneratedValue</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">base</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">l</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">base</span> <span class="o">*=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithDouble:</span><span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="n">random</span><span class="o">/</span><span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="n">base</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">doubleGen</span> <span class="nl">bindingGen:</span><span class="n">quadratic</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">doubleGen</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>このArbitraryを使って、さっきのテストと同じ要領で適当な場所へスクロールさせます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">propRecycleLogic:</span><span class="p">(</span><span class="n">NSNumber</span><span class="o">*</span><span class="p">)</span><span class="nv">y</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">view</span> <span class="o">=</span> <span class="p">[[</span><span class="n">BGSyntaxHighlightView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectZero</span><span class="p">];</span>
</span><span class='line'>    <span class="n">codeObject</span> <span class="o">=</span> <span class="p">[[</span><span class="n">BGCodeObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCodeString:</span><span class="p">[</span><span class="n">NSBundle</span> <span class="nl">codeStringForResouce:</span><span class="s">@&quot;mockLongObjective-C&quot;</span> <span class="nl">ofType:</span><span class="s">@&quot;txt&quot;</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">view</span><span class="p">.</span><span class="n">codeObject</span> <span class="o">=</span> <span class="n">codeObject</span><span class="p">;</span>
</span><span class='line'>    <span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="mi">320</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">view</span> <span class="n">layoutSubviews</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="n">lineNumberScrollView</span> <span class="nl">scrollRectToVisible:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">y</span> <span class="n">floatValue</span><span class="p">],</span> <span class="mi">320</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="nl">animated:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>    <span class="n">GHTestLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="n">lineNumberViews</span> <span class="n">count</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="n">lineNumberViews</span> <span class="n">count</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="c1">// 3つくらいは許容できる</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testRecycle</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NLTQTestable</span> <span class="o">*</span><span class="n">testable</span> <span class="o">=</span> <span class="p">[</span><span class="n">NLTQTestable</span> <span class="nl">testableWithPropertySelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">propRecycleLogic:</span><span class="p">)</span>
</span><span class='line'>                                                                 <span class="nl">target:</span><span class="n">self</span>
</span><span class='line'>                                                            <span class="nl">arbitraries:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="n">scrollYArbitrary</span><span class="p">],</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">testable</span> <span class="n">verboseCheck</span><span class="p">];</span>
</span><span class='line'>    <span class="n">GHAssertTrue</span><span class="p">([</span><span class="n">testable</span> <span class="n">success</span><span class="p">],</span> <span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">testable</span> <span class="n">prettyReport</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>アサーションは<code>return [view.lineNumberViews count] &lt; 8;</code>で、ピッタリが5個なので大体8個あれば十分使い回しきれるだろう、という風に書きます。</p>

<h2>まとめ</h2>

<p>これで<code>dequeueReusable~</code>っぽいものが実装できました。
ビューが多くなってしまうが、不可視なビューが存在する、という状況では実装しておいて損はない機能です。
ただやってみて実装コストは少し高めだなーと感じたので、その辺は相談、という感じでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ParseとAngularJSでユーザー毎にデータ同期してみる]]></title>
    <link href="http://yaakaito.github.com/blog/2012/08/09/parse-angular-sync-app/"/>
    <updated>2012-08-09T02:29:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/08/09/parse-angular-sync-app</id>
    <content type="html"><![CDATA[<p>こんにちは！
最近<a href="http://parse.com">Parse</a>というバックエンドを肩代わりしてくれるサービスを知ったので、
ちょっとAngularJSと組み合わせてユーザー毎の情報を同期する程度のアプリを作ってみました。
どうやら小規模なサービスでユーザー情報の同期とかに使うといいよ、みたいな感じらしいので、
利用用途としても今作っているものにあっていそうだったので、とりあえずテストで作ってみた感じです。</p>

<h2>Parseに登録する</h2>

<p><a href="http://parse.com">Parse</a>にいって、「Try it for free」します。
無料版だとAPI利用回数制限とかが結構厳しそうに見えますが、個人で作るくらいなら全然余裕なくらいはありますね。
ログインするとDashboradにいけるので適当な名前で新しいアプリを作ります。
QuickStart的な画面になると思うので、JavaScript用のSDKで、「New Project」を選択します。
そうすると、ここからSDKをダウンロードしてね！という画面が下の方に出ているので、SDKをダウンロードしましょう。
SDKをダウンロードしたら、このキーを使ってね、というのが出ているはずなので、<code>index.html</code>を弄ってキーを書き換えて、開いてみましょう。
失敗すると「おい違うぞ」みたいな分かりやすい感じになるので、そうならなければ成功です。ついでにQuickStartにある「Test the SDK」も試してみましょう。
これでとりあえずセットアップは終わりです。</p>

<h2>チュートリアルを見ながらちょっと書いてみよう</h2>

<p><a href="https://www.parse.com/tutorials/todo-app-with-javascript">JavaScriptのチュートリアル</a>をみてみましょう。
ありがたいことに、まさにやりたいことが書いてありそうなチュートリアル準備されているので、とりあえずこれをみてみます。
<a href="https://www.parse.com/docs/js_guide">JavaScriptのガイド</a>も一緒にみると良さげなので、これも見てみることにします。
どうもSDKは<a href="http://documentcloud.github.com/backbone/">Backbonejs</a>ベースみたいです。正確にはbackboneライクという感じですが。
これってjQueryとprototype同居の悪夢じゃね的な感じがありますね。わかんないですけど。どうしましょうかね。
普通に<a href="https://parse.com/docs/rest">REST API</a>もあるので素直にAngularResouce使った方がいいんじゃないですかね。感出てきました。</p>

<p>まあ今回はどんなものか試してみるだけのものなので失敗込みで、ともかく進めていきましょう。
方針としてはbackboneライクのモデルだけ使ってその他はAngularJSに持ってもらうイメージでいきます。
チュートリアルのコードを追っているのでチュートリアルからの転載です。
チュートリアルはどうやら<a href="http://addyosmani.github.com/todomvc/">TODOMVC</a>のbackbonejs版を拡張しているみたいです。
<a href="https://github.com/ParsePlatform/Todo">コードはGithub</a>にあるようです。テンプレートとかは放っておいてコアっぽいところを見ていきます。
まずログインしてるかしてないか、みたいなところは<code>Parse.User.current()</code>で判定できるみたいです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">Parse</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">current</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">new</span> <span class="nx">ManageTodosView</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">new</span> <span class="nx">LogInView</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、ログインしてなかったらLogInView表示してユーザー作れよってことっぽい。
ユーザー作るあたりを見てみると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Parse</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">signUp</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span><span class="p">,</span> <span class="p">{</span> <span class="nx">ACL</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Parse</span><span class="p">.</span><span class="nx">ACL</span><span class="p">()</span> <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">ManageTodosView</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">undelegateEvents</span><span class="p">();</span>
</span><span class='line'>    <span class="k">delete</span> <span class="nx">self</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.signup-form .error&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.signup-form button&quot;</span><span class="p">).</span><span class="nx">removeAttr</span><span class="p">(</span><span class="s2">&quot;disabled&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>ほほう、ACLってどういうオプションだろ、と見てみると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">This</span> <span class="nx">creates</span> <span class="nx">the</span> <span class="nx">account</span> <span class="kd">with</span> <span class="nx">the</span> <span class="nx">given</span> <span class="nx">username</span> <span class="nx">and</span> <span class="nx">password</span> <span class="nx">from</span> <span class="nx">the</span> <span class="nx">fields</span> <span class="nx">and</span> <span class="nx">also</span> <span class="nx">applies</span> <span class="nx">a</span> <span class="nx">blank</span> <span class="nx">ACL</span> <span class="nx">on</span> <span class="nx">the</span> <span class="nx">user</span><span class="p">.</span> <span class="nx">This</span> <span class="nx">prevents</span> <span class="nx">anyone</span> <span class="nx">from</span> <span class="nx">reading</span> <span class="nx">data</span> <span class="nx">from</span> <span class="nx">the</span> <span class="nx">User</span> <span class="kr">class</span> <span class="nx">unless</span> <span class="nx">they</span> <span class="nx">are</span> <span class="nx">the</span> <span class="nx">user</span> <span class="nx">who</span> <span class="nx">is</span> <span class="nx">logged</span> <span class="k">in</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書いてあるので、このユーザーから登録したデータはほかのユーザーからは取得できないものだよ、ということですかね。
つづいてログインはこんなん</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Parse</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">logIn</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">ManageTodosView</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">undelegateEvents</span><span class="p">();</span>
</span><span class='line'>    <span class="k">delete</span> <span class="nx">self</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.login-form .error&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;Invalid username or password. Please try again.&quot;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.login-form button&quot;</span><span class="p">).</span><span class="nx">removeAttr</span><span class="p">(</span><span class="s2">&quot;disabled&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>ほほう、で、モデルの管理はBackboneライクなわけですね！やりましたね！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Todo</span> <span class="o">=</span> <span class="nx">Parse</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&quot;Todo&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">TodoList</span> <span class="o">=</span> <span class="nx">Parse</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じでbackboneライクにモデルを作って<code>save</code>を呼ぶとサーバーへ遅れる感じですね。
取得は</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Create our collection of Todos</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">todos</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TodoList</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Setup the query for the collection to look for todos from the current user</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">todos</span><span class="p">.</span><span class="nx">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Parse</span><span class="p">.</span><span class="nx">Query</span><span class="p">(</span><span class="nx">Todo</span><span class="p">);</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">todos</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">equalTo</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="nx">Parse</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">current</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Fetch all the todo items for this user from Parse</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">todos</span><span class="p">.</span><span class="nx">fetch</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>という感じっぽいです。</p>

<h2>Angularで書いてみよう</h2>

<p>使い方も分かってきたのでAngularで書いてみましょう。どきどきですね。＞＜</p>

<h3>とりあえず簡単なビューをつくる</h3>

<p>コントローラーやイベントハンドリングとかの基本的な部分はすべてAngularで面倒をみるので、
まずは普通にそれっぽいビューを作っていきます。ライブラリを読み込んで、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://code.angularjs.org/angular-1.0.1.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://www.parsecdn.com/js/parse-1.0.14.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;./javascripts/app.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>適当な感じにビューを作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;AppCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h2&gt;</span>account<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">ng-model=</span><span class="s">&quot;naccount&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">ng-model=</span><span class="s">&quot;npass&quot;</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;createAccount()&quot;</span><span class="nt">&gt;</span>create<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">ng-model=</span><span class="s">&quot;laccount&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">ng-model=</span><span class="s">&quot;lpass&quot;</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;login()&quot;</span><span class="nt">&gt;</span>login<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h2&gt;</span>Objects<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;syncItems()&quot;</span><span class="nt">&gt;</span>sync<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">ng-model=</span><span class="s">&quot;itemName&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">ng-model=</span><span class="s">&quot;itemDescription&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;addItem()&quot;</span><span class="nt">&gt;</span>add<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;item in items&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>       {{ item.name }} / {{ item.description }}
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/section&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>コントローラーはとりあえずこんな感じで。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">AppCtrl</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">createAccount</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">login</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">addItem</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">syncItems</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Parseを使ってみる</h3>

<p>準備が整ったので、まずはParseを初期化します。
コントローラーが読み込まれたあとに、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Parse</span><span class="p">.</span><span class="nx">initialize</span><span class="p">(</span><span class="s2">&quot;hoge&quot;</span><span class="p">,</span> <span class="s2">&quot;hoge&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>とします。そうしたらモデルとそのコレクションを定義します、こんな感じかな。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">SyncAppObject</span> <span class="o">=</span> <span class="nx">Parse</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s2">&quot;SyncAppObject&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">description</span><span class="o">:</span> <span class="s2">&quot;description&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">SyncAppObjectList</span> <span class="o">=</span> <span class="nx">Parse</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="nx">SyncAppObject</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">comparator</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>モデルの準備ができたので、addItemでオブジェクトを作ってみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">objectList</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SyncAppObjectList</span><span class="p">();</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="nx">objectList</span><span class="p">.</span><span class="nx">models</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">addItem</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SyncAppObject</span><span class="p">({</span> <span class="nx">name</span> <span class="o">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">itemName</span>
</span><span class='line'>                                 <span class="p">,</span> <span class="nx">description</span> <span class="o">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">itemDescription</span><span class="p">});</span>
</span><span class='line'>  <span class="nx">objectList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="nx">objectList</span><span class="p">.</span><span class="nx">models</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>コレクションのインスタンスを作って、<code>$scope.items</code>へ<code>models</code>を関連づけます。
あとは<code>addItem</code>で新しいオブジェクトを作って追加してあげるだけです。
が、Backbone的にはプロパティへのアクセスは<code>get()</code>を使ってね、ということなので、テンプレートの方も少し修正します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">repeat</span><span class="o">=</span><span class="s2">&quot;item in items&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{{</span> <span class="nx">item</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span> <span class="p">}}</span> <span class="o">/</span> <span class="p">{{</span> <span class="nx">item</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;description&quot;</span><span class="p">)</span> <span class="p">}}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、addを押すと、BackboneライクなオブジェクトをAngularで表示できているはずです。予想に反して問題なさそうですね。
次にこのモデルをParseへ送りつけましょう。<code>save</code>を呼ぶだけでokです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">item</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>うまくいけばParseのアプリケーションのマネージメニューから、「Data Browse」をすると、ちゃんとデータが追加されているはずです。</p>

<h3>ユーザー作成とログイン</h3>

<p>まずはユーザーを作りますしょう。<code>createAccount</code>でチュートリアルでもでてきたsignupするコードを書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">createAccount</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Parse</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">signUp</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">naccount</span>
</span><span class='line'>                    <span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">npass</span>
</span><span class='line'>                    <span class="p">,</span> <span class="p">{</span> <span class="nx">ACL</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Parse</span><span class="p">.</span><span class="nx">ACL</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>                    <span class="p">,</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;ユーザー登録に成功したよ。 o(*^▽^*)o&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;ユーザー登録に失敗しちゃったよ。 (ﾉ_･｡)&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>フォームからアカウントを作ってみましょう。成功したメッセージが出たら、「Data Browse」から確認してみましょう。
Userというテーブルが増えているはずです。やりましね！
ユーザーを作ったらそれに関連するデータとして登録するようにしましょう。
ユーザーに関連づけるには<code>user</code>と<code>ACL</code>を設定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">addItem</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">Parse</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">current</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;ログインするかユーザーつくってね。ヾ(@~▽~@)ノ&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SyncAppObject</span><span class="p">({</span><span class="nx">name</span> <span class="o">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">itemName</span>
</span><span class='line'>                                <span class="p">,</span> <span class="nx">description</span> <span class="o">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">itemDescription</span>
</span><span class='line'>                                <span class="p">,</span> <span class="nx">user</span> <span class="o">:</span> <span class="nx">Parse</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">current</span><span class="p">()</span>
</span><span class='line'>                                <span class="p">,</span> <span class="nx">ACL</span> <span class="o">:</span> <span class="k">new</span> <span class="nx">Parse</span><span class="p">.</span><span class="nx">ACL</span><span class="p">(</span><span class="nx">Parse</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">current</span><span class="p">())});</span>
</span><span class='line'>  <span class="nx">objectList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">item</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="nx">objectList</span><span class="p">.</span><span class="nx">models</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでデータを追加してみて、「Data Browse」から確認します。するとユーザーのobjectIdと関連づけられているはずです。
カラムも自動で拡張されるみたいです。便利ですね。
ところでここで作ったユーザーとか後でやるログインした状態とかはSDK側でローカルへキャッシュしてくれるみたいです。
だいたいできてきました！(だんだん顔文字がうざくなってきましたね)次はログインを作りましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">login</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Parse</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">logIn</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">laccount</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">lpass</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;ログインに成功したよ。 o(*^▽^*)o&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;ログインに失敗しちゃったよ。 (ﾉ_･｡)&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じにして、作ったユーザーでログインできるか試してみましょう。
ログインできたらユーザーを切り替えたりしてみて、「Data Browse」から確認してみましょう！どうですか？成功しましたか？やりましたね！
ついでなのでユーザー名を表示するようにしておきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;p&gt;</span>Login User : {{ loginUser }}<span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じにかいて、初期化時に、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">Parse</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">current</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">loginUser</span> <span class="o">=</span> <span class="nx">Parse</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">current</span><span class="p">().</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">loginUser</span> <span class="o">=</span> <span class="s2">&quot;not login&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>とかして初期の表示を作ってあげて、さらにユーザー作成やログインにフックしてビューを更新してあげます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">loginUser</span> <span class="o">=</span> <span class="nx">Parse</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">current</span><span class="p">().</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;ログインに成功したよ。 o(*^▽^*)o&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<h3>同期を実装する</h3>

<p>コレクションに対して<code>fetch</code>することで取得できるはずだったので、マージとか考えなければ案外楽にいけそうです。
今回はマージとかは何も考えてなくて、とにかくサーバーからデータを拾ってくるだけです。
条件なんかをちょこちょこ書いてビューへ反映しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">syncItems</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">objectList</span><span class="p">.</span><span class="nx">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Parse</span><span class="p">.</span><span class="nx">Query</span><span class="p">(</span><span class="nx">SyncAppObject</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">objectList</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">equalTo</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="nx">Parse</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">current</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">objectList</span><span class="p">.</span><span class="nx">fetch</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="nx">objectList</span><span class="p">.</span><span class="nx">models</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでsyncを押せばサーバーからログインしているユーザーにあわせたデータを拾ってこれま・・・したが、
AngularJSのビューの更新との相性が悪いのか、1回目のsyncだとビューに反映されないですねっていう。
このへんはちゃんと調べてないので分かんないですが、あんまりよくないですねー。が、今回はParseがどんなもんか試すだけなのでまあおけおけ。
とりあえずこんな感じで実装はおしまいです。</p>

<h2>コードとか</h2>

<p>コードはgithubにあります。</p>

<p><a href="https://github.com/yaakaito/sync-app">yaakaito/sync-app</a></p>

<p>またサンプルをgh-pagesへデプロイしてあるので、どんな感じかなーと気になる人がいれば見てみるとなにかよいかもしれません。</p>

<p><a href="http://yaakaito.github.com/sync-app/">yaakaito.github.com/sync-app/</a></p>

<p>関係ないですが、簡単なJavaScriptアプリケーションならgh-pagesへデプロイしてしまって使うの、割とありかなーという感じが最近しています。</p>

<h2>デバッガの話</h2>

<p>AngularJSを結構書くうちにデバッガがほしくなってきたんですが、(AngularJSのテンプレートのデバッグがむずい)メーリングリストとかみてみたら、
<a href="https://github.com/btford/angularjs-batarang">Batarang</a>というChrome拡張があったので僕はこれを使っています。
これ単体の記事もそのうち書くと思います。</p>

<h2>まとめ</h2>

<p>思いの他うまくいった。けどやっぱりプレーンなObject返すSDKを自分で作る方がよいような気がする・・・。
Parse自体は使った感じそんなに悪くなくて、データビュアーとかもちゃんとあるので、個人で運用するようなサービスなら全然いけそうだなーという感じでした。
割とサーバーサイド用意するのがだるくて作る気が起きなかったものとか結構あるので、これを気にいろいろ作ってみるかもしれません。
とにかくクライアントサイド書いてるのがすきーな人にはかなり便利なサービスでした、おすすめです。</p>

<h2>教訓</h2>

<p>ずっとスティーブ・Objective-C・ジョブズしててJavaScript界隈についていけていないので遅れ取り戻さないとやばいですねー。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OctopressでAngularJSを使う]]></title>
    <link href="http://yaakaito.github.com/blog/2012/08/01/octopress-angular/"/>
    <updated>2012-08-01T02:54:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/08/01/octopress-angular</id>
    <content type="html"><![CDATA[<p>こんにちは！<a href="http://octopress.org">Octopress</a>、カスタマイズしてますか？
えっ、テンプレートを変えただけ？？？自分で書きましょう！！！！</p>

<h2>AngularJS使えば夢が広がるんじゃね？</h2>

<p>というわけでOctopressで<a href="http://angularjs.org">AngularJS</a>使ってみよう的な話です。
まあ別にjQueryでもいいんですけど、Octopressは静的ページですし、
検索なんかもデフォルトはgoogleに飛ぶだけとか、結構貧相じゃないですか。
結局のところ単純に使いたかったのが大きいんですが、
データさえ埋め込んでおけば楽にいろいろ作れる感じがしたので、AngularJS使ってみることにしました。</p>

<h2>そもそもシンタックスがぶつかるんですけど</h2>

<p><a href="http://handlebarsjs.com/">Handlebars.js</a>なんかでもそうですが <code>{{ hoge }}</code> というシンタックスがぶつかりますね。
これは<a href="http://jekyllrb.com/">Jekyll</a>のプラグインにrawプラグインというのがあるのでそれを使うと解決できます。
ただ、よくみたらOctopressには最初からrawプラグインがついていたので、ありがたくこれを使わせてもらいましょう。
AngularJSの対象になるところは、(ネストできなくて外側でお茶を濁してるので\は外してくださいね)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{\% raw %}
</span><span class='line'>  {{ hoge.fuga }}
</span><span class='line'>{\% endraw %}</span></code></pre></td></tr></table></div></figure>


<p>とか書けばよいです。簡単ですね。</p>

<h2>AngularJSを読みこむ</h2>

<p>問題も解決できましたし、とりあえずAngularJSを読み込みましょうか。
<code>source/custom/head.html</code> をいじります。
適当な場所で</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.angularjs.org/angular-1.0.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>とかいて、AngularJSを読み込みます、あとはhtmlにng-appを付けましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--[if IEMobile 7 ]&gt;&lt;html class=&quot;no-js iem7&quot; ng-app&gt;&lt;![endif]--&gt;</span>
</span><span class='line'><span class="c">&lt;!--[if lt IE 9]&gt;&lt;html class=&quot;no-js lte-ie8&quot; ng-app&gt;&lt;![endif]--&gt;</span>
</span><span class='line'><span class="c">&lt;!--[if (gt IE 8)|(gt IEMobile 7)|!(IEMobile)|!(IE)]&gt;&lt;!--&gt;</span><span class="nt">&lt;html</span> <span class="na">class=</span><span class="s">&quot;no-js&quot;</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span> <span class="na">ng-app</span><span class="nt">&gt;</span><span class="c">&lt;!--&lt;![endif]--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでAngularJSを使う準備ができました！めっちゃ簡単ですね！: )</p>

<h2>Githubのリポジトリを取ってみる</h2>

<p>今作っているテンプレート(このテンプレートですね)では下の方にgithubのリポジトリが何個かでるので、これを作ってみましょう 。<code>_include/asides/github.html</code> をこんな感じにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;githubCtlr&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;repositories&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    {\% raw %}
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;repo in repos&quot;</span> <span class="na">data-lang=</span><span class="s">&quot;{{ repo.language | lowercase }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ repo.html_url }}&quot;</span><span class="nt">&gt;</span>{{ repo.full_name }}<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    {\% endraw %}
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これにあわせたJSを書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">githubCtlr</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">repos</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="nx">$http</span><span class="p">.</span><span class="nx">jsonp</span><span class="p">(</span><span class="s2">&quot;https://api.github.com/users/{{ site.github_user }}/repos?page=1&amp;per_page=20&amp;sort=pushed&amp;callback=JSON_CALLBACK&quot;</span><span class="p">).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span><span class="nx">status</span><span class="p">,</span><span class="nx">header</span><span class="p">,</span><span class="nx">config</span><span class="p">){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="p">{</span><span class="err">\</span><span class="p">{</span> <span class="nx">site</span><span class="p">.</span><span class="nx">github_repo_count</span> <span class="p">}}</span> <span class="o">||</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">count</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">repos</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>_config.yml</code> はちゃんと生かしたいのでちょっと面倒くさい感じになってますね。
まあ20件くらい取ってこれば大丈夫やろ、的なザツい感じになってます。
ともかくこれでリポジトリを取ってくることができました！やりましたね！</p>

<p>デモはページの下の方をみてください！</p>

<h2>エントリ本文もAngularされちゃう！</h2>

<p>で、ここまではいいんです。
けどAngularJS弄ってみたりしたらまあそれをブログに書くのは当然だよねーみたいなところで少し困ったことになります。
なんとブログ本文もAngularJSの実行対象になってしまいました！やりましたね！！！</p>

<p>raw使って生の <code>{{ hoge }}</code> にしても、
Angularでその表示はなかったことにされるので、何が起こったのか一瞬分からなくなります。
これは困るので解決しましょう、AngularJSを使う場所をそもそも絞ってしまうのがよいですが、
面倒なので <code>ng-non-bindable</code> を使いましょう。 <code>ng-non-bindable</code> で囲まれた中はAngularJSの対象外になるので、何が起こったのか分かるようになります。</p>

<p><code>_include/article.html</code> なんかで <code>{{ content }}</code> の周りをガッツリ囲んでしまうのが楽です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section&gt;&lt;div</span> <span class="na">ng-non-bindable</span><span class="nt">&gt;</span>{{ content }}<span class="nt">&lt;/div&gt;&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでブログが書けるようになりました！やりましたね！
Octopress自体のことを書くときも同じことなので気をつけましょう。</p>

<p>デモはこのエントリです。</p>

<h2>できた！</h2>

<p>これで夢が広がりましたね！！！！</p>

<h2>全然関係ないですが</h2>

<p>githubAPIでリポジトリ引いてくるみたいなコードよく見ますけど、
クエリーなしだと30件しか帰ってこなくて全部みれないし、ソートが単なる名前順で微妙なので、
<code>page</code> + <code>per_page</code> と <code>sort</code> くらいは指定した方がいいと思いますよ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular.jsでcoderwallのバッチ取得してみる]]></title>
    <link href="http://yaakaito.github.com/blog/2012/07/30/angular-coderwall/"/>
    <updated>2012-07-30T00:53:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/07/30/angular-coderwall</id>
    <content type="html"><![CDATA[<h2>Coderwallのバッチ取得するのはよくみるけど</h2>

<p><a href="http://angularjs.org/">Angular</a>でやってみた的なのはみないなーと思ったのでやってみた。
といってもjQueryなんかでやるのとそんなに変わらないです。</p>

<h2>バッチを表示させるHTMLを書く</h2>

<p>とりあえずリストにイメージを突っ込んでいく感じにすることにしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;coderwallController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;badge in badges&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;img</span> <span class="na">ng-src=</span><span class="s">&quot;{{badge.badge}}&quot;</span> <span class="na">alt=</span><span class="s">&quot;{{badge.description}}&quot;</span> <span class="na">title=</span><span class="s">&quot;{{badge.name}}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じでデータをバインディングします。</p>

<h2>データを取得する</h2>

<p>jQueryなんかでgetJSONとかするのとそんなに変わらないです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">coderwallController</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">badges</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="nx">$http</span><span class="p">.</span><span class="nx">jsonp</span><span class="p">(</span><span class="s2">&quot;http://coderwall.com/yaakaito.json?callback=JSON_CALLBACK&quot;</span><span class="p">).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span><span class="nx">status</span><span class="p">,</span><span class="nx">header</span><span class="p">,</span><span class="nx">config</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">badges</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">badges</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">badges</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、取得できました！やりましたね！</p>

<p>全文はgistにあります。</p>

<div><script src='https://gist.github.com/3199870.js?file='></script>
<noscript><pre><code>&lt;!doctype html&gt;
&lt;html ng-app&gt; 
  &lt;head&gt;
    &lt;script src=&quot;http://code.angularjs.org/angular-1.0.1.min.js&quot;&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div ng-controller=&quot;coderwallController&quot;&gt;
      &lt;ul&gt;
        &lt;li ng-repeat=&quot;badge in badges&quot;&gt;
          &lt;img ng-src=&quot;{{badge.badge}}&quot; alt=&quot;{{badge.description}}&quot; title=&quot;{{badge.name}}&quot; /&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/body&gt;

  &lt;script&gt;
    function coderwallController($scope, $http) {
    
      $scope.badges = [];   
      $http.jsonp(&quot;http://coderwall.com/yaakaito.json?callback=JSON_CALLBACK&quot;).success(function(data,status,header,config){
        $scope.badges = data.data.badges;
        console.log($scope.badges);
});
    }
    
  &lt;/script&gt;
&lt;/html&gt;</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-CからgithubAPI叩く]]></title>
    <link href="http://yaakaito.github.com/blog/2012/07/16/objective-c-github-api/"/>
    <updated>2012-07-16T12:07:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/07/16/objective-c-github-api</id>
    <content type="html"><![CDATA[<p>Objective-CからgithubAPI叩く用があったので試してみた。</p>

<h1>UAGithubEngine</h1>

<p>公式でもおすすめされてるライブラリですけど、結論からいうと駄目でした
GitAppっていうアプリがそうなんですけど、リクエストパラメーター付けずにgithubがデフォルトで返してくるレスポンスしか受け取れない感じになってしまっている・・・
特によくわかるのがリポジトリ取得で、githubがデフォルトで返してくるのが30件っぽいんだけど(ソート順はよくわからない)、それしか受け取れないので、リポジトリが31個以上ある人の分は全部表示できない。
pageオプションとかあったので試してみたけどどうも聞いてない様子なのでウゴゴゴゴ・・・という具合。
per_pageとかをちゃんと付ければとれるので、まあ自分で叩けってことですかね・・・。</p>

<h1>他のgithubアプリとか</h1>

<h2>iOctocat</h2>

<p>自前でちゃんとリクエストパラメーター付けて取ってる、エラい</p>
]]></content>
  </entry>
  
</feed>

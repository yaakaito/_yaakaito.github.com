<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Memo | yaakaito.org]]></title>
  <link href="http://yaakaito.org/blog/categories/memo/atom.xml" rel="self"/>
  <link href="http://yaakaito.org/"/>
  <updated>2013-08-15T04:07:53+09:00</updated>
  <id>http://yaakaito.org/</id>
  <author>
    <name><![CDATA[yaakaito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TypeScriptでライブラリ書くときのあれこれメモ]]></title>
    <link href="http://yaakaito.org/blog/2013/08/15/typescript-library-development/"/>
    <updated>2013-08-15T03:49:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/08/15/typescript-library-development</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！ほぼ自分用のメモなのであとでまともに書くかもしれません。
TypeScriptでライブラリ作って公開したいときのあれこれです。</p>

<h2>配布方法</h2>

<p>bowerでの配布を想定。一旦registryには置かずに、URLを直で指定する。
いつも通りgithubから配布</p>

<h2>配布するもの</h2>

<ul>
<li>本体.js</li>
<li>本体.min.js</li>
<li>本体.d.ts</li>
</ul>


<p>あとは必要ならREADMEとかLICENCEあたり。</p>

<p>d.tsはDefinitelyTypedという手もあるが、せっかくTypeScriptで書いてあるんだから、入っている分には問題ないだろう。</p>

<h2>d.ts</h2>

<p><a href="https://github.com/borisyankov/DefinitelyTyped">DefinitelyTyped</a>に準拠するように作った方がよさげ。
依存ライブラリなにもないなら深く考えなくていい。</p>

<p>依存ライブラリがある場合、DefinitelyTypedは以下のような構成をとっているので</p>

<p><code>
// ....
├── jake
│   ├── jake-tests.ts
│   └── jake.d.ts
├── jasmine
│   ├── jasmine-tests.ts
│   └── jasmine.d.ts
├── jasmine-matchers
│   ├── jasmine-matchers-tests.ts
│   └── jasmine-matchers.d.ts
├── jqrangeslider
│   ├── jqrangeslider-tests.ts
│   └── jqrangeslider.d.ts
├── jquery
│   ├── jquery-tests.ts
│   └── jquery.d.ts
├── jquery.autosize
│   └── jquery.autosize.d.ts
├── jquery.bbq
│   ├── jquery.bbq-tests.ts
│   └── jquery.bbq.d.ts
├── jquery.bootstrap.wizard
│   └── jquery.bootstrap.wizard.d.ts
├── jquery.clientSideLogging
│   ├── jquery.clientSideLogging-tests.ts
│   └── jquery.clientSideLogging.d.ts
├── jquery.colorbox
│   ├── jquery.colorbox-tests.ts
│   └── jquery.colorbox.d.ts
// ....
</code></p>

<p>たとえばjQueryに依存するライブラリ <code>hogefuga</code> を書くなら、<code>hogefuga/hogefuga.d.ts</code>は<code>&lt;reference path="../jquery/jquery.d.ts"&gt;</code>と読むようにしなければいけない。</p>

<p>で、最初からTypeScriptで書くとおそらくこういう構成にはならない。(<code>src</code>以下に外部ライブラリがたくさん並んでたらいやですよね？)
なんで面倒なのであとでくっつける。具体的に言えば<code>grunt concat</code>で、コンパイルされたd.tsの頭にreferenceだけ書いたd.tsくっつける。</p>

<h2>本体のビルド</h2>

<p>JavaScriptとそんな変わらん。コンパイルしてminifyしてライセンスくっつけて終わり。</p>

<h2>moduleが分裂する</h2>

<p>複数ファイルになった時に同じような<code>module</code>が複数定義される場合がある。(というかほとんどそうなる)
言語の仕様上正攻法では回避できないので、諦める or 原始的な解決。</p>

<p>原始的に解決する場合は、そもそも<code>module</code>を書かずに、コンパイル前に<code>module</code>の部分を結合、コンパイル、という方式。
どこぞのMakefileみたいで懐かしい、退化してる気分だ。</p>

<p><code>module</code>はないけど、あると思って書かないと<code>export</code>とかで死ぬので気をつけましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[世の中のサンプルがTODOアプリなのは案外理にかなってる気がした]]></title>
    <link href="http://yaakaito.org/blog/2013/04/04/todo-is-good-app/"/>
    <updated>2013-04-04T10:02:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/04/todo-is-good-app</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
最近いろいろJavaScriptフレームワークのサンプルを見るんですが、Todoアプリだらけで飽きてきました！！！！
というかTodoMVCがそもそもTodoだし、世の中にはTodoアプリがあふれすぎている、もっと面白いの、例えば御坂美琴サーチとかはよ！と思ってたんですが、
風呂にはいって考えてみたら、結構Todoアプリは理にかなってる気がしたので、メモる。</p>

<p>わりとどうでもいいことしか書いてないです。</p>

<h2>大抵のTodoアプリの仕様</h2>

<ul>
<li>タスクを入力する</li>
<li>タスクがリストに追加される</li>
<li>チェックをトグルできる</li>
<li>リストにはいったタスクを編集できる</li>
</ul>


<p>こんな感じか</p>

<h2>実にただしい・・・</h2>

<p>まず</p>

<h3>タスクを入力する</h3>

<p>ユーザー入力のハンドリングと、モデル化のフロー、生成イベントの発行、保存あたりを表現する。</p>

<p>イベントの受け取り方はUIを書くなら付きまとうし、最初に知らなきゃいけないところと言っても良い。
そして大抵の場合、空だった場合はタスクとして認識しないというバリデーションを挟んでいる。
大体合わせて5~10行くらいのコードだと思うんだけど、この10行は強い・・・。</p>

<p>そのあと、そのデータをアプリケーション内でどう扱うか、というところを提示する。
生で扱っちゃ駄目よ、とクラスにラップするような処理があったりする場合も多いし、作法が読み取れる、すごい。</p>

<p>さらにそれを生成した、というイベントをリスナーに通知する、この辺のパターンはUI書くならキモになってくる部分だし、すごい、簡潔に表現されている・・・。</p>

<p>そして保存する。JavaScriptだとLocalStorageが多いけど、サーバーに送ったりとか、iOSならCoreDataに保存する見たいなサンプルにちゃんとなってる・・・。</p>

<h3>タスクがリストに追加される</h3>

<p>リストビューあたりを表現する。</p>

<p>リストビューみたいなのはよく使うパターンだし、それをちゃんとやってる、すごい。
コレクション的なものの使い方も分かってくるし、おそらく一番使うUIパターンだし、シンプルなのでわかりやすい。</p>

<p>あとはここで簡単なフィルター機能とかがつくと、ちょっとロジカルなコードも表現される。TodoMVCもたしかにそれがあった。</p>

<h3>チェックをトグルできる</h3>

<p>モデルに対するアップデートと、それに付随するUIのアップデート、その通知の仕組み。</p>

<p>ただの一個のboolですべてを表現したぞ、すごい！</p>

<h3>リストにはいったタスクを編集できる</h3>

<p>リストビューの中にある、個々のコンポーネントに対してどのようにハンドリングを行うかが分かる。(まあ上のやつもそれをちょっと含んでいるんだけど)</p>

<p>この辺ってわりと面倒くさいところで、それをどういう風に解決しているのか見れる。なるほど。
ここが気に入るか気に入らないかは結構大切だなーと思うので、一発で把握できてよい。</p>

<h2>まだまだ要素はありそう</h2>

<p>というわけでTodoアプリはすごかった！飽きたとか言ってすまんかった！！！！
このあたりの要素を、この規模で、綺麗に表現しきれるアプリが他に思いつかないのは事実としてある。(せいぜいメモアプリに名称変更するくらい)</p>

<p>「サンプルアプリ作りましょう、Todoとか」じゃなくて、「Todo相当のサンプルアプリを作りましょう」だった。</p>

<h2>まとめ</h2>

<p><a href="http://www.project-railgun.net/">Sはよ</a></p>
]]></content>
  </entry>
  
</feed>

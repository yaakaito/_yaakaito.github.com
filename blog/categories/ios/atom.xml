<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | yaakaito.org]]></title>
  <link href="http://yaakaito.org/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://yaakaito.org/"/>
  <updated>2013-08-16T04:42:56+09:00</updated>
  <id>http://yaakaito.org/</id>
  <author>
    <name><![CDATA[yaakaito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[いい感じのViewControllerのテストの書き方を考えてみる]]></title>
    <link href="http://yaakaito.org/blog/2013/07/30/view-controller-testing-practice/"/>
    <updated>2013-07-30T02:57:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/07/30/view-controller-testing-practice</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
いろいろあって落ち着いてなかったのでブログ全然書けてなかった！</p>

<p>すごい昔の話しだけど、TwitterみてたらViewControllerのテストがあーだこーだあったので自分の考えを書いてみるよ。
<a href="http://yaakaito.org/blog/2013/05/03/view-controller-testing/">前回は手法的な話</a>だけをしたから、今回は実際どう書くのがいいの的な話。
モックとかの使い方は分かってる前提＆一旦非同期はないものとして考えて書いてみる。</p>

<h3>ViewControllerの実装はほぼプライベートなんだけど的な話</h3>

<p>あってると思う。それで正しい。
ただViewControllerの利用者はフレームワークなので、例えばボタンをタップしたときにどれを呼び出すかというポインタをフレームワークは知っている。
なのでテストがプライベートにアクセスしたりするのは結構正しくて、テストはフレームワークのフリをして書けばよいと思う。</p>

<h3>自作自演っぽくなる</h3>

<p>これに関しては多分テストする単位が小さいんじゃないだろうかと思う。
シナリオ単位でテストするのがよいと思っている。
単純にメソッドが動いてるーはあんまり意味がない感じがする。</p>

<h3>いわゆる単体テストではないのでは説</h3>

<p>あってそう、テストの性質が異なっているのは確か。
そういう場合はテストフレームワークを分けるといいとかって話もあるし、KIFとか使って書くのでもいいんじゃないかな。
ただ、ViewControllerのテスト、というと感覚的にこの2つの中間くらいの話なのかなって気もするので、そこまで大げさにしなくてもいいのかなと思う。
モデルのテストはSenTestingKitだけど、ViewControllerのテストはSpecta、みたいなのもわりとありかなと思ってる。</p>

<h2>というわけで例</h2>

<p>ログイン画面とかで考えてみる。</p>

<h3>ありそうな流れ</h3>

<ul>
<li>ログインが必要になると、ログイン画面が表示される</li>
<li>ユーザーがidとパスワードを入力</li>
<li>サーバーに問い合わせる</li>
<li>成功したら「ログインした」とか出して、画面を戻す</li>
<li>失敗したら「ログインに失敗した」とか出して、もう一度入力させる

<ul>
<li>この時にパスワードはクリアされるとユーザーに優しそう</li>
<li>パスワードが間違っていますとか、赤字で残ってるとユーザーに優しそう</li>
</ul>
</li>
</ul>


<p>みたいな感じですかね。</p>

<h3>テストのシナリオ</h3>

<p>画面だすところは別のViewControllerのテストかと思うので、そこは省く。</p>

<p>こんな感じだろうか。この辺を書いておけばいい感じになるような気がする。</p>

<h4>成功</h4>

<ol>
<li>idとパスワードを入力</li>
<li>サーバーに問い合わせる(フリをする)</li>
<li>ログインに成功する</li>
<li>「ログインした」と表示される</li>
<li>画面を戻す</li>
</ol>


<h4>失敗 => 成功</h4>

<ol>
<li>idとパスワードを入力</li>
<li>サーバーに問い合わせる(フリをする)</li>
<li>ログインに失敗する</li>
<li>「ログイン失敗した」と表示される</li>
<li>エラー画面になる</li>
<li>再度パスワードを入力</li>
<li>サーバーに問い合わせる(フリをする)</li>
<li>ログインに成功する</li>
<li>「ログインした」と表示される</li>
<li>画面を戻す</li>
</ol>


<h4>失敗 => 失敗 => ...</h4>

<ol>
<li>idとパスワードを入力</li>
<li>サーバーに問い合わせる(フリをする)</li>
<li>ログインに失敗する</li>
<li>「ログイン失敗した」と表示される</li>
<li>エラー画面になる</li>
<li>再度パスワードを入力</li>
<li>サーバーに問い合わせる(フリをする)</li>
<li>ログインに失敗する</li>
<li>「ログイン失敗した」と表示される</li>
<li>エラー画面になる</li>
</ol>


<h3>いい感じに見せる方法を考えてみる</h3>

<h4>ヘルパーメソッドを作ってそれっぽく見せる</h4>

<p>スタブに毎回ユーザー入力のフリを直接いれていくのも芸がない(というか意図が伝わり難い)ので、</p>

<p><code>objective-c
[self inputId:@"yaakaito" andPassword:@"hogefuga"];
</code></p>

<p>こういう感じにするとよいんじゃないかな。</p>

<h4>画面が変わる単位でまとめる</h4>

<p>今回の場合はエラー画面なんだけど、毎回エラーと表示された、パスワードがクリアされた、とかアサーションするのはだるい。
こういうことをしたときに、エラー画面になるよ、という風にかけるといいんじゃないかと思う。</p>

<p>```objective-c
[self shouldSeeErrorIf:<sup>{</sup></p>

<pre><code>[self inputId:@"yaakaito" andPassword:@"invalid"];
[self confirm];
</code></pre>

<p>}];
```</p>

<p>こんな感じ。</p>

<h4>状況によってはカテゴリでファサードみたいなのするとよさそう</h4>

<p>上と似たような感じだけど、状況によってはViewControllerをテスト用に拡張するとよいかもしれない。
今回はこっちは考えずに一旦は上の2つでやってみる。</p>

<h3>XUnitと仮定してざっと書いてみる</h3>

<p>```objective-c
- (void)testLoginSuccess {</p>

<pre><code>[self shouldSeeSuccess:^{
    [self inputId:@"yaakaito" andPassword:@"valid-password"];
    [self confirm];
}];
</code></pre>

<p>}</p>

<ul>
<li><p>(void)testLoginFailureAndSuccessOnRetry {</p>

<p>  [self shouldSeeError:<sup>{</sup></p>

<pre><code>  [self userInputId:@"yaakaito" andPassword:@"invalid-password"];
  [self userConfirm];
</code></pre>

<p>  }];</p>

<p>  [self shouldSeeSuccess:<sup>{</sup></p>

<pre><code>  [self inputId:@"yaakaito" andPassword:@"valid-password"];
  [self confirm];
</code></pre>

<p>  }];
}</p></li>
<li><p>(void)testLoginFailureAndFailureOnRetry {</p>

<p>  [self shouldSeeError:<sup>{</sup></p>

<pre><code>  [self userInputId:@"yaakaito" andPassword:@"invalid-password"];
  [self userConfirm];
</code></pre>

<p>  }];</p>

<p>  [self shouldSeeError:<sup>{</sup></p>

<pre><code>  [self inputId:@"yaakaito" andPassword:@"valid-password-2"];
  [self confirm];
</code></pre>

<p>  }];
}</p></li>
</ul>


<p>```</p>

<p>それっぽい！</p>

<h3>XSpecだと仮定してざっと書いてみる</h3>

<p>KiwiやSpectaだと<code>self</code>がないので、テスト用のオブジェクトとか作ればいいんだろうか？
今回は雰囲気がみたいので、コンパイルできないけど<code>self</code>で書いてみる。</p>

<p>```objective-c</p>

<p>describe(@"Login Controller", ^{</p>

<pre><code>describe(@"Login", ^{
    context(@"When login succeed", ^{
        it(@"should display Success message", ^{
            [self shouldSeeSuccess:^{
                [self inputId:@"yaakaito" andPassword:@"valid-password"];
                [self confirm];
            }];
        });
    });

    context(@"When login failed", ^{
        it(@"should display Failure message", ^{
            [self shouldSeeError:^{
                [self userInputId:@"yaakaito" andPassword:@"invalid-password"];
                [self userConfirm];
            }];
        });

        context(@"But, retry it and succeed", ^{
            it(@"should display Success message", ^{
                [self shouldSeeError:^{
                    [self userInputId:@"yaakaito" andPassword:@"invalid-password"];
                    [self userConfirm];
                }];
            });
        });

        context(@"But, retry it and failed", ^{
            it(@"should display Failure message", ^{
                [self shouldSeeError:^{
                    [self userInputId:@"yaakaito" andPassword:@"invalid-password"];
                    [self userConfirm];
                }];
            });
        });
    });
});
</code></pre>

<p>});
```</p>

<p>英語があっているかすごく微妙だけど、なかなかよいんじゃないか？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS部で話したViewControllerのテストとかのまとめ]]></title>
    <link href="http://yaakaito.org/blog/2013/05/03/view-controller-testing/"/>
    <updated>2013-05-03T20:20:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/05/03/view-controller-testing</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
この前iOS部というイベントでiOSテストの話をしたんですが、ViewControllerのテストで反応が結構あったのと、
ちゃんと説明できてない部分があったなーということで、文章としてまとめようと思います。</p>

<p>iOS部でやったものからコードが変わってますが、やりたいことは一緒なので、iOS部に参加されていた方は適宜変換して読んでもらえればと思います。</p>

<h2>ツールとか</h2>

<p>SenTestingKit + OCMockです。
OCMockの解説はiOS部では初めての方が居たので軽く説明しましたが、これを読んでる方はオンラインかと思いますので、分からなければググってください。
<a href="http://yaakaito.hatenablog.com/entry/2012/06/26/013813">僕が古い方のブログで書いたもの</a>もあるので、そちらを読まれるとよいかもしれません。</p>

<h2>ViewControllerの役割</h2>

<p>最初にぶっちゃけておくとViewControllerのテストはしんどいです。できれば書きたくない。
なのでViewControllerが何なのか、きちんと整理しておきましょう。</p>

<p>僕はViewControllerって、</p>

<ul>
<li>ビューからやってきたユーザー操作の実際の処理</li>
<li>モデルへの操作、モデルからのイベントなんかの受け取り、ビューへの反映</li>
</ul>


<p>この2つ(3つ？)にフォーカスしてるべきだと思ってます。
なのでViewControllerって基本的にはステートとかをもっちゃ駄目で、そういうのはロジックとしてモデルで管理されるべきだと思います。</p>

<p>ここをちゃんと意識して書いていくとViewControllerのテストが結構楽になります。
モデルのテストはViewControllerと比較して圧倒的に楽なので、そちらでやりましょう。</p>

<h2>モックを使いまくります</h2>

<p>OCMockなんかのモックライブラリは便利でよく使いますが、僕はほとんどViewControllerのテストの為に使います。
ある程度モデルが完成した段階であれば、モックを使わずに記述していくこともまあ出来るんですが、
例えば「サーバーとの通信に失敗したときの動作」、みたいなのをテストするときに大抵めんどくさいことになります。
モックを使っておけばここは一行でサッパリと書いてしまったり出来るので、基本的には全部モックを差し込みます。</p>

<p>モデル自体が単純なバリューを表すものであればわざわざモックする必要もないかなーとは思うので、まあそのあたりは好みでいいかなと思います。</p>

<p>あとはUILabelとかUITextFieldとか、Storyboardとか使ってるとコードから生成されないものですね。
別にこのオブジェクト自体を作って自分でセットしてあげるようにしてもいいんですが、
さっきと同じような理由で、「ユーザーがHelloWorldと入力したときの動作」、みたいなのをテストするときに大抵めんd（ry</p>

<p>というわけで僕はViewControllerは基本的にモックを使って書いています。</p>

<h2>プライベートとかreadonlyなプロパティに対するモックの差し込み</h2>

<p>テストを始める前に、予備知識として知っている必要のある項目です。
これはViewController以外のテストでも応用できると思うので、わけで書きます。
正しいけどきわどいので、似たようなことをアプリ側でやるのはやめたほうがいいと思います。</p>

<p>これは無名カテゴリを使って、プロパティの宣言を上書きすることで実現します。</p>

<p>例えば</p>

<p>```objective-c</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>@interface MIViewController : UIViewController</p>

<p>@end
```</p>

<p>```objective-c</p>

<h1>import "MIViewController.h"</h1>

<p>@interface MIViewController ()
@property (weak, nonatomic) IBOutlet UILabel *hogeLabel; // &lt;- Stroyboardから作られる
@end</p>

<p>@implementation MIViewController</p>

<p>@end
```</p>

<p>という感じに<code>.m</code>の方でプライベートなプロパティとして宣言するとかよくあると思います。
この無名カテゴリをテストの方にも持ってきます。</p>

<p>```objective-c
@interface MIViewController ()
@property (weak, nonatomic) IBOutlet UILabel *hogeLabel;
@end</p>

<p>@implementation MIViewControllerTests</p>

<ul>
<li>(void)testExample
{
  MIViewController *viewController = [[MIViewController alloc] init];
  viewController.hogeLabel = nil; // &lt;- 通る
}</li>
</ul>


<p>@end
```</p>

<p>こうするとパブリックのようにメッセージを送ることが出来るので、モックに差し替えたりできるわけです。きわどい感じがしますね。</p>

<p>これは完全に雑感ですけど、標準ライブラリでもまあ、よく見ると <code>@property(nonatomic, readonly, retain)</code> みたいな宣言をしてあるものがあって、内部的に<code>property(nonatomic, retain)</code>になってたりするんじゃないかなーと思えるものもあるので、まあまあまあ。</p>

<h2>というわけでテストを書きましょう</h2>

<p>前置きが長くなりましたが、そろそろViewControllerのテストの話をしましょう。</p>

<p>サンプルとしてこんな感じの画面を使います。</p>

<p><img src="/images/viewcontroller-testing-sample.png" width="240"></p>

<p>この画面はモーダルとして呼び出されて、メモを作成&amp;編集できる画面です。
以下のような要件で作られています。</p>

<ul>
<li>タイトルと本文を入力できる</li>
<li>「Done」を押したら、入力したタイトルと本文からメモオブジェクトを作って、delegateへ渡す。</li>
<li>すでに生成されているメモが渡されたら、それを初期値として表示する。</li>
</ul>


<p>実際の実装としては、</p>

<ul>
<li>新規と編集の処理を同じにするために、このViewControllerはメモオブジェクトを作成せずに、外から渡されたメモオブジェクトを更新するようになっています。</li>
<li>ユーザーの入力に影響せず、viewWillDissapearでdelegateを呼び出すようになっています。</li>
</ul>


<p>メモオブジェクトは<code>title</code>と<code>body</code>を持っています。</p>

<p>```objective-c
@interface TBMemo : NSObject
@property (strong, nonatomic) NSString <em>titile;
@property (strong, nonatomic) NSString </em>body;</p>

<ul>
<li>(id)initWithTitle:(NSString <em>)title body:(NSString </em>)body;
@end
```</li>
</ul>


<p>このViewControllerはこんな感じのインターフェイスを持っています。ここではあえて実装は出さないことにします。</p>

<p>```objective-c
@protocol TBMemoEditDelegate
- (void)editViewController:(TBMemoEditViewController <em>)viewController didFinishEditMemo:(TBMemo </em>)memo;
@end</p>

<p>@interface TBMemoEditViewController : UIViewController
@property (weak, nonatomic) NSObject<TBMemoEditDelegate> <em>delegate;
@property (weak, nonatomic) TBMemo </em>editingMemo;
@end
```</p>

<p><code>editingMemo</code>はこのViewControllerが更新するメモオブジェクトでこのViewControllerを呼び出す際に外からセットされます。
またプライベートとして、<code>.m</code>の方でStoryboardから生成される2つのUIを持っています。</p>

<p><code>objective-c
@interface TBMemoEditViewController ()
@property (weak, nonatomic) IBOutlet UITextField *titleTextField;
@property (weak, nonatomic) IBOutlet UITextView *bodyTextView;
@end
</code></p>

<p>今回テストした方がよさそうなのは、</p>

<ul>
<li>viewWillDisappearで、入力したタイトルと本文からメモオブジェクトを更新して、delegateへ渡す。</li>
<li>viewWillAppearで、渡したメモの内容を初期値として設定する。</li>
</ul>


<p>の2つです。</p>

<p>「done」を押した時にどうこうというのは、これは単純に「モーダルを閉じる」とだけの実装であるべきなので、テストする価値が薄いですし、
アプリを調整していく仮定で変更される可能性の高いものなので(やっぱりpushがいいとか)、安全に変更を加えるためのテストが、逆に足を引っ張ってしまいます。</p>

<p>ではテストを書いていきましょう。</p>

<h3>setup</h3>

<p>まずは<code>setup</code>で<code>UITextField</code>なんかをモックに差し替えていきます。</p>

<p>```objective-c</p>

<h1>import "TBMemoEditViewController.h"</h1>

<h1>import "OCMock.h"</h1>

<p>@interface TBMemoEditViewController ()
@property (weak, nonatomic) IBOutlet UITextField <em>titleTextField;
@property (weak, nonatomic) IBOutlet UITextView </em>bodyTextView;
@end</p>

<p>@implementation TBMemoEditViewControllerTests {</p>

<pre><code>TBMemoEditViewController *viewController;
id mockTitleTextField;
id mockBodyTextView;
</code></pre>

<p>}</p>

<ul>
<li><p>(void)setUp {
  [super setUp];</p>

<p>  viewController = [[TBMemoEditViewController alloc] init];</p>

<p>  // UITextFieldを差し替える
  mockTitleTextField = [OCMockObject mockForClass:[UITextField class]];
  viewController.titleTextField = mockTitleTextField;</p>

<p>  // UITextViewを差し替える
  mockBodyTextView = [OCMockObject mockForClass:[UITextView class]];
  viewController.bodyTextView = mockBodyTextView;</p></li>
</ul>


<p>}
@end
```</p>

<p>こんな感じ、これで準備が整いました。</p>

<h3>viewWillAppearで渡したメモの内容を初期値として設定する</h3>

<p>まずはこっちを書いてみましょう。
<code>editingMemo</code>が呼び出し元からセットされますが、この場合はテストケースが呼び出し元になるので、これをセットします。</p>

<p>```objective-c</p>

<ul>
<li>(void)testUpdateViewWithEditingMemoObjectInViewWillAppear {
  TBMemo *editingMemo = [[TBMemo alloc] initWithTitle:@"TITLE" body:@"BODY"];
  viewController.editingMemo = editingMemo;
}
```</li>
</ul>


<p>次にこのメモオブジェクトの値が<code>titleTextField</code>と<code>bodyTextView</code>にそれぞれ、<code>text</code>経由でセットされるはずなので、これをOCMockで<code>expect</code>します。</p>

<p>```objective-c
- (void)testUpdateViewWithEditingMemoObjectInViewWillAppear {</p>

<pre><code>TBMemo *editingMemo = [[TBMemo alloc] initWithTitle:@"TITLE" body:@"BODY"];
viewController.editingMemo = editingMemo;

[[mockTitleTextField expect] setText:@"TITLE"];
[[mockBodyTextView expect] setText:@"BODY"];
</code></pre>

<p>}
```</p>

<p><code>viewWillAppear</code>を呼び出して、</p>

<p>```objective-c
- (void)testUpdateViewWithEditingMemoObjectInViewWillAppear {</p>

<pre><code>TBMemo *editingMemo = [[TBMemo alloc] initWithTitle:@"TITLE" body:@"BODY"];
viewController.editingMemo = editingMemo;

[[mockTitleTextField expect] setText:@"TITLE"];
[[mockBodyTextView expect] setText:@"BODY"];

[viewController viewWillAppear:NO];
</code></pre>

<p>}
```</p>

<p><code>titleTextField</code>と<code>bodyTextView</code>に<code>text</code>を経由して値がセットされたかを<code>verify</code>します。</p>

<p>```objective-c
- (void)testUpdateViewWithEditingMemoObjectInViewWillAppear {</p>

<pre><code>TBMemo *editingMemo = [[TBMemo alloc] initWithTitle:@"TITLE" body:@"BODY"];
viewController.editingMemo = editingMemo;

[[mockTitleTextField expect] setText:@"TITLE"];
[[mockBodyTextView expect] setText:@"BODY"];

[viewController viewWillAppear:NO];

[mockTitleTextField verify];
[mockBodyTextView verify];
</code></pre>

<p>}
```</p>

<p>これでよさそうです。案外、簡単でしたね。</p>

<h3>viewWillDisappearで、入力したタイトルと本文からメモオブジェクトを更新して、delegateへ渡す</h3>

<p>次はこっちです。これはdelegateの扱い方で、大きく分けて2つ方法があります。</p>

<p>1つめはdelegateのモックオブジェクトを使うパターン、そしてテストケース自身がdelegateになるパターンです。
これは結構好みだと思うので、好きな方を採用すればよいかと思います。</p>

<h4>共通部分</h4>

<p>まずは共通なところ、<code>titleTextField</code>と<code>bodyTextView</code>をスタブして、<code>TITLE</code>と<code>BODY</code>が入力された状態を再現します。</p>

<p>```objective-c
- (void)testFinishDelegateWithUpdatedMemoObjectInViewWillDisappear{</p>

<pre><code>// ユーザー入力を再現
[[[mockTitleTextField stub] andReturn:@"TITLE"] text];
[[[mockBodyTextView stub] andReturn:@"BODY"] text];
</code></pre>

<p>}
```</p>

<p>こうすると、<code>titleTextField.text</code>は<code>TITLE</code>が入っている状態になりますね。</p>

<h4>delegateのモックオブジェクトを使うパターン</h4>

<p>OCMockでプロトコルからモックのdelegateを作り、セットします。</p>

<p><code>objective-c
id mockDelegate = [OCMockObject mockForProtocol:@protocol(TBMemoEditDelegate)];
viewController.delegate = mockDelegate;
</code></p>

<p>このモックの<code>editViewController:didFinishEditMemo:</code>が、更新されたメモオブジェクトを持って呼び出される事を期待します。
これには<code>[OCMArg checkWithBlock:]</code>を利用します。</p>

<p>```objective-c
[[mockDelegate expect] editViewController:viewController didFinishEditMemo:[OCMArg checkWithBlock:<sup>BOOL(id</sup> obj) {</p>

<pre><code>TBMemo *memo = (TBMemo *)obj;
return [memo.titile isEqualToString:@"TITLE"] &amp;&amp; [memo.body isEqualToString:@"BODY"];
</code></pre>

<p>}]];
```</p>

<p>そして、メモオブジェクトをセットして、<code>viewWillDisappear</code>を呼び、<code>verify</code>します。</p>

<p>```objective-c
TBMemo *edtingMemo = [[TBMemo alloc] init];
viewController.editingMemo = edtingMemo;</p>

<p>[viewController viewWillDisappear:NO];</p>

<p>[mockDelegate verify];
```</p>

<p>全体としてこんなテストになります。</p>

<p>```objective-c
- (void)testFinishDelegateWithUpdatedMemoObjectInViewWillDisappear{</p>

<pre><code>[[[mockTitleTextField stub] andReturn:@"TITLE"] text];
[[[mockBodyTextView stub] andReturn:@"BODY"] text];

id mockDelegate = [OCMockObject mockForProtocol:@protocol(TBMemoEditDelegate)];
[[mockDelegate expect] editViewController:viewController didFinishEditMemo:[OCMArg checkWithBlock:^BOOL(id obj) {
    TBMemo *memo = (TBMemo *)obj;
    return [memo.titile isEqualToString:@"TITLE"] &amp;&amp; [memo.body isEqualToString:@"BODY"];
}]];
viewController.delegate = mockDelegate;

TBMemo *editingMemo = [[TBMemo alloc] init];
viewController.editingMemo = editingMemo;

[viewController viewWillDisappear:NO];

[mockDelegate verify];
</code></pre>

<p>}
```</p>

<h4>テストケース自身がdelegateになるパターン</h4>

<p>こっちはiOS部では説明してなかったです。(すればよかった)</p>

<p>まずは、テストケースがDelegateを実装することを宣言します。</p>

<p><code>objective-c
@interface TBMemoEditViewControllerTests () &lt;TBMemoEditDelegate&gt;
@end
</code></p>

<p>テストケースにdelegateを実装します。渡ってきたメモオブジェクトを<code>editedMemo</code>にとっておきます。</p>

<p>```objective-c
- (void)editViewController:(TBMemoEditViewController <em>)viewController didFinishEditMemo:(TBMemo </em>)memo {</p>

<pre><code>editedMemo = memo;
</code></pre>

<p>}
```</p>

<p>自身をdelegateにして、<code>viewWillDisappear</code>を呼びます。</p>

<p>```objective-c
viewController.delegate = self;</p>

<p>TBMemo *edtingMemo = [[TBMemo alloc] init];
viewController.editingMemo = edtingMemo;</p>

<p>[viewController viewWillDisappear:NO];
```</p>

<p><code>editedMemo</code>に更新されたメモオブジェクトがあるはずなので、これをアサートします。</p>

<p><code>objective-c
STAssertEqualObjects(editedMemo.titile, @"TITLE", nil);
STAssertEqualObjects(editedMemo.body, @"BODY", nil);
</code></p>

<p>これでよさそうです。全体としてはこんな感じ。</p>

<p>```objective-c
- (void)testFinishDelegateWithUpdatedMemoObjectInViewWillDisappearWithSelfDelegate {</p>

<pre><code>[[[mockTitleTextField stub] andReturn:@"TITLE"] text];
[[[mockBodyTextView stub] andReturn:@"BODY"] text];

viewController.delegate = self;

TBMemo *editingMemo = [[TBMemo alloc] init];
viewController.editingMemo = editingMemo;

[viewController viewWillDisappear:NO];

STAssertEqualObjects(editedMemo.titile, @"TITLE", nil);
STAssertEqualObjects(editedMemo.body, @"BODY", nil);
</code></pre>

<p>}</p>

<ul>
<li>(void)editViewController:(TBMemoEditViewController <em>)viewController didFinishEditMemo:(TBMemo </em>)memo {
  editedMemo = memo;
}
```</li>
</ul>


<p>どうでしょう、僕は前者の方が好みですが、分かりやすいのは多分後者ですかね。</p>

<h2>まとめ</h2>

<p>こんな感じのことを解説しました。
ちゃんと分割していけば、複雑になるかもしれないですが、大抵はこのパータンで事足りるかなーと思います。</p>

<p>非同期の終了をまってからBlocksでほげほげ、とかはOCMockの<code>andDo:</code>とかでうまい感じに表現できますし、<code>NSNotification</code>とか使う場合にも結構素直に書けます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Storyboardで横にずれるメニュー作る]]></title>
    <link href="http://yaakaito.org/blog/2013/04/25/sliding-view-with-stroyboard/"/>
    <updated>2013-04-25T02:22:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/25/sliding-view-with-stroyboard</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
Storyboardって、FaceBookとかがやってる横にずれるメニューを作るのがめちゃくちゃめんどくさそう、というかそこだけコードで書くんじゃないの？という印象だったんですが、
<a href="https://github.com/edgecase/ECSlidingViewController">ESSlidingViewController</a>というのがStroyboardに対応しているらしく、綺麗にいけそうなので試してみた。</p>

<p><a href="https://github.com/yaakaito/StoryBoard-Sliding">コードはGithubで</a></p>

<h2>プロジェクトつくってセットアップ</h2>

<p>とりあえずSingle View Applicationを選んで適当に</p>

<p>作ったらCocoapodsで</p>

<p>```
platform :ios</p>

<p>pod 'ECSlidingViewController'
```</p>

<p><code>
$ pod install
</code></p>

<h2>ECSlidingViewControllerを設定する</h2>

<p>Storyboardに最初に出てくるViewControllerのクラスを<code>ECSlidingViewController</code>にする。</p>

<p><img src="/images/storyboard-sliding-base.png"></p>

<p>MenuViewControllerみたいなのをUITableViewControllerで作って、Storyboardで関連付ける。
Menuというidentifierを与えておく。</p>

<p><img src="/images/storyboard-sliding-menu.png"></p>

<p>これでAppDelegateをいじるのかなーと思ったんだけど、ついてくるサンプルを読んだら、
InitialSlidingViewControllerみたいなを作って、これで初期化してた、こっちの方が綺麗な感じがするのでこっちでやることにする。
最初に表示されるViewControllerを設定しているので、それを作つくるんだけど、ついでなので2つ追加して全体でこんなStoryboardにした。
それぞれにFirstViewとSecondViewでidentifiterを与えている。</p>

<p><img src="/images/storyboard-sliding.png"></p>

<p><code>topViewController</code>というのが生えているので、ここへFirstViewControllerみたいなのを入れる。</p>

<p>```objective-c
@implementation SSInitialViewController</p>

<ul>
<li><p>(void)viewDidLoad
{
  [super viewDidLoad];</p>

<p>  UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"MainStoryboard" bundle:nil];
  self.topViewController = [storyboard instantiateViewControllerWithIdentifier:@"FirstView"];
}</p></li>
</ul>


<p>@end
```</p>

<p>ここまでやったらFirstViewControllerの方でメニューなんかを追加する。
グローバルな感じで設定するんじゃなくて、ViewController単位に指定できるっぽい、便利。</p>

<p>```objective-c
@implementation SSFirstViewController</p>

<ul>
<li><p>(void)viewWillAppear:(BOOL)animated
{
  [super viewWillAppear:animated];</p>

<p>  self.view.layer.shadowOpacity = 0.75f;
  self.view.layer.shadowRadius = 4.0f;
  self.view.layer.shadowColor = [UIColor blackColor].CGColor;</p>

<p>  if (![self.slidingViewController.underLeftViewController isKindOfClass:[SSMenuViewController class]]) {</p>

<pre><code>  UIViewController *menu =  [self.storyboard instantiateViewControllerWithIdentifier:@"Menu"];
  self.slidingViewController.underLeftViewController = menu;
</code></pre>

<p>  }</p>

<p>  [self.view addGestureRecognizer:self.slidingViewController.panGesture];
  [self.slidingViewController setAnchorRightRevealAmount:280.0f];
}</p></li>
</ul>


<p>@end
<code>``
ところでここで一回ハマってて、</code>[self.slidingViewController setAnchorRightRevealAmount:280.0f]`はデフォルトとかがあるわけじゃなくて、かならず設定しないと駄目っぽい。</p>

<p>こんなかんじ！</p>

<p><img src="/images/storyboard-sliding-sample.png" width="320"></p>

<h2>メニューの実装してみる</h2>

<p>適当に、面倒なのでメニュー名からidentifier作るようにしてる。</p>

<p>```objective-c
@interface SSMenuViewController ()
@property (strong, nonatomic) NSArray *items;
@end</p>

<p>@implementation SSMenuViewController</p>

<ul>
<li><p>(void)viewDidLoad
{
  [super viewDidLoad];</p>

<p>  self.items = @[@"First", @"Second"];
}</p></li>
<li><p>(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
  return 1;
}</p></li>
<li><p>(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
  return self.items.count;
}</p></li>
<li><p>(UITableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath <em>)indexPath
{
  static NSString </em>CellIdentifier = @"MenuCell";
  UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier forIndexPath:indexPath];</p>

<p>  cell.textLabel.text = self.items[indexPath.row];</p>

<p>  return cell;
}</p></li>
<li><p>(void)tableView:(UITableView <em>)tableView didSelectRowAtIndexPath:(NSIndexPath </em>)indexPath
{
  NSString <em>identifier = [NSString stringWithFormat:@"%@View", self.items[indexPath.row]];
  UIViewController </em>newTopViewController = [self.storyboard instantiateViewControllerWithIdentifier:identifier];</p>

<p>  [self.slidingViewController anchorTopViewOffScreenTo:ECRight animations:nil onComplete:<sup>{</sup></p>

<pre><code>  CGRect frame = self.slidingViewController.topViewController.view.frame;
  self.slidingViewController.topViewController = newTopViewController;
  self.slidingViewController.topViewController.view.frame = frame;
  [self.slidingViewController resetTopView];
</code></pre>

<p>  }];
}</p></li>
</ul>


<p>@end
```</p>

<p>画面の切り替えは<code>tableView:didSelectRowAtIndexPath:</code>でやってるあたり。</p>

<p>```objective-c
- (void)tableView:(UITableView <em>)tableView didSelectRowAtIndexPath:(NSIndexPath </em>)indexPath
{</p>

<pre><code>NSString *identifier = [NSString stringWithFormat:@"%@View", self.items[indexPath.row]];
UIViewController *newTopViewController = [self.storyboard instantiateViewControllerWithIdentifier:identifier];

[self.slidingViewController anchorTopViewOffScreenTo:ECRight animations:nil onComplete:^{
    CGRect frame = self.slidingViewController.topViewController.view.frame;
    self.slidingViewController.topViewController = newTopViewController;
    self.slidingViewController.topViewController.view.frame = frame;
    [self.slidingViewController resetTopView];
}];
</code></pre>

<p>}
```</p>

<p>storyboardからidentifierで引いてきて、それを<code>topViewConttoller</code>に設定するだけの親切構造。
僕がいままで使ってきたライブラリだと、この辺は自由にやってね、が多かったので、こうするとよいよがあると助かる。</p>

<p>ほとんどサンプルのまま持ってきたんだけど、このままだとメニューをタップしたあとのアニメーションがちょっとうざい。(一番右まで行ってから戻るやつ)
これは<code>anchorTopViewOffScreenTo:animations:onComplete:</code>がそういうアニメーションっぽいので、<code>resetTopView</code>だけにする。こっちは元の位置に戻すやつ。</p>

<p>```objective-c
- (void)tableView:(UITableView <em>)tableView didSelectRowAtIndexPath:(NSIndexPath </em>)indexPath
{</p>

<pre><code>NSString *identifier = [NSString stringWithFormat:@"%@View", self.items[indexPath.row]];
UIViewController *newTopViewController = [self.storyboard instantiateViewControllerWithIdentifier:identifier];

CGRect frame = self.slidingViewController.topViewController.view.frame;
self.slidingViewController.topViewController = newTopViewController;
self.slidingViewController.topViewController.view.frame = frame;
[self.slidingViewController resetTopView];
</code></pre>

<p>}
```</p>

<p>あとはStoryboardでよしなにビュー作ったりしていけばよい、Storyboardすごいなー。</p>

<h2>まとめ</h2>

<p>思ってたより綺麗にできたし、Storyboard毛嫌いなおりそうでよかったです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Segueでのオブジェクトのやりとりとか]]></title>
    <link href="http://yaakaito.org/blog/2013/04/24/segue-with-object/"/>
    <updated>2013-04-24T03:34:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/24/segue-with-object</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
UIのコード書くのがだるいので今更感満載でStoryboardを始めました！
Storyboard出来がよくて、iOSっぽいUIを作る分にはぽちぽちしていけば作れて便利だなーという感じです。</p>

<p>で、ViewController間でのオブジェクトのやりとりにはやっぱコードが必要なので、そこのメモ。
大体よく使うのは<code>pushViewController</code>、<code>Modal</code>、<code>TableView</code>あたりだと思うので、その3つあたりを書く。</p>

<p>別にそれぞれで大きく変わる訳でもないと思うので、最初に貼っておくととりあえずこんな感じのStoryboard作った。</p>

<p><img src="/images/sample-story-board.png"></p>

<p>めんどくさいので最初のVCをSSViewController、遷移先をSSSecondViewControllerにしてある。</p>

<h2>基本</h2>

<p><code>prepareForSegue:sender:</code>というのを使うらしい、これは遷移元の方に書く。
遷移先から戻すときは<code>delegate</code>、両方<code>prepareForSegue:sender:</code>でいけんのかなーとか思ったけどそうではないらしい。</p>

<h2>PushVC</h2>

<p><a href="https://github.com/yaakaito/SegueSample/tree/navigation">コードはここ</a></p>

<p>遷移元の方で<code>prepareForSegue:sender:</code>を定義してあげる。Segueには<code>TopToSecond</code>って名前が付けてある。</p>

<p>```objective-c
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {</p>

<pre><code>if ([segue.identifier isEqualToString:@"TopToSecond"]) {
    NSLog(@"%@", segue.destinationViewController);
}
</code></pre>

<p>}
```</p>

<p>こうすると遷移するときに、ここが呼ばれるので、Segue名で分岐する。
<code>segue.destinationViewController</code>に遷移先のViewControllerのインスタンスが入っているので、ここでよしなにする。
別にそんなにめんどくさくなさそう。</p>

<p>次、戻る時。普通に<code>delegate</code>でやる。</p>

<p><code>objective-c
@protocol SSSecondViewControllerDelegate
- (void)willBack:(id)obj;
@end
</code></p>

<p>適当にプロトコルつくって、さっきのところで関連付ける。</p>

<p>```objective-c
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {</p>

<pre><code>((SSSecondViewController *)segue.destinationViewController).delegate = self;
</code></pre>

<p>}
```</p>

<p>で、戻ってくるときにこれを呼べばいいんだけど、そういう感じのイベントがあるのかと思ったら別になかった。
軽く調べてみた感じだけど、<code>viewWillDisappear</code>でやればよさげ。</p>

<p>```objective-c
- (void)viewWillDisappear:(BOOL)animated {</p>

<pre><code>[super viewWillDisappear:animated];
[self.delegate willBack:@{@"A" : @"HOGE"}];
</code></pre>

<p>}
```</p>

<h2>Modal</h2>

<p><a href="https://github.com/yaakaito/SegueSample/tree/modal">コードはここ</a></p>

<p>pushVCと大差ない。使ってないけど、いままで<code>self.presentedViewController</code>だったのが<code>self.presentingViewController</code>に変わるらしい、紛らわしい。</p>

<p>モーダル閉じるところまでStoryboardで面倒みてほしい気分なんだけど、やりかたがよくわからなかった。</p>

<p>```
- (IBAction)touchDismiss:(id)sender {</p>

<pre><code>[self dismissViewControllerAnimated:YES completion:nil];
</code></pre>

<p>}
```</p>

<h2>TableView</h2>

<p><a href="https://github.com/yaakaito/SegueSample/tree/table">コードはここ</a></p>

<p>戻すところは一緒だけど、indexPathを知る必要があるので一手間増える。
試してみたら、<code>prepareForSegue:sender:</code> -> <code>tableView:didSelectRowAtIndexPath:</code> という順になってて、それはどうなんだろうという気持ちになった。</p>

<p>```objective-c
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {</p>

<pre><code>if ([segue.identifier isEqualToString:@"TopToSecond"]) {
    NSLog(@"%@", segue.destinationViewController);
    NSLog(@"%@", self.tableView.indexPathForSelectedRow);
}
</code></pre>

<p>}
```</p>

<p>こんな感じで、あとはよしなに。</p>

<h2>まとめ</h2>

<p>別に<code>prepareForSegue:sender:</code>じゃなくともよいのではという気がしたりしたけど、
そう書けと言われてるっぽいし長い物に巻かれてそう書く事にした。
いろいろ書けてしまいそうなので、早めにルール作っちゃうのがいいのかなーという感じ。</p>

<p>あとこれどういう名前付ければいいのかよくわからん、<code>Segue</code>ってサフィックスは付けた気がいい気がする。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS用テスティングサーバー NLTHTTPStubServer 0.4 を公開しました]]></title>
    <link href="http://yaakaito.org/blog/2013/04/22/release-nlt-http-stub-server-0-4-0/"/>
    <updated>2013-04-22T00:51:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/22/release-nlt-http-stub-server-0-4-0</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
<a href="https://github.com/yaakaito/NLTHTTPStubServer">NLTHTTPStubServer</a> を0.4にアップデートしました。</p>

<p>最初にごめんなさいしておかなければいけないことがあります。</p>

<h2>0.2.x 系との互換性がありません</h2>

<p>ごめんなさい。0.1.x 0.2.x 系でのバグフィックスなどは、半年くらいは受け付けようと思っていますので、気軽にご連絡ください。</p>

<h2>NLTHTTPStubServerって何</h2>

<p>簡単に言えば、レスポンス登録を動的にできるHTTPサーバー for iOSです。
HTTP通信をするiOSアプリはたくさんあると思うのですが、これのテストを書く為に開発されました。</p>

<p>仕組みとしては結構単純で、ローカルにHTTPサーバーを立てて、そこにレスポンスを登録し、アプリ(HTTPClient)でそこへアクセスする、という感じです。
例えば <code>/api/v1/fake</code> は <code>fake.json</code> を返してほしい、というケースであれば、</p>

<p><code>objective-c
[[[server expect] forPath:@"/api/v1/fake"] andJSONResponseResource:@"fake" ofType:@"json"];
</code></p>

<p>という風に記述すると、クライアントからここにアクセスしたときに、<code>fake.json</code>が返されます。
NSURLConnectionを使って書くと、</p>

<p>```objective-c
NSURL *api = [NSURL URLWithString:@"http://localhost:12345/api/v1/fake"];
[NSURLConnection sendAsynchronousRequest:[NSURLRequest requestWithURL:api]</p>

<pre><code>                               queue:[[NSOperationQueue alloc] init]
                   completionHandler:^(NSURLResponse *res, NSData *data, NSError *err) {
                     // dataに fake.json が返ってくる
                   }];
</code></pre>

<p>```</p>

<p>このように<code>http://localhost:12345/api/v1/fake</code>へアクセスすると、<code>fake.json</code>が返ってきます。</p>

<p>カテゴリを使ってレスポンスを入れ替えたりするライブラリなんかもありますが、それと比べて、副作用が起こりにくいのが特徴です。
またモックを差し込む、という行為を必要とせず、APIのエンドポイントを入れ替えるだけでよいので、実装自体に手をいれる必要もほとんどありません。</p>

<h2>セットアップ</h2>

<p>Cocoapodsでのセットアップが簡単です。</p>

<p><code>
pod 'NLTHTTPStubServer'
</code></p>

<p><code>NLTHTTPStubServer.h</code>をインポートして使います。</p>

<p>```objective-c</p>

<h1>import "NLTHTTPStubServer"</h1>

<p>```</p>

<h2>機能</h2>

<h3>サーバーの取得</h3>

<p>テスト用サーバーは <code>sharedServer</code> でインスタンスを取得することができます。</p>

<p><code>objective-c
NLTHTTPStubServer *server = [NLTHTTPStubServer sharedServer];
</code></p>

<p><code>clear</code>で登録されているレスポンスをすべて削除し、綺麗な状態にすることができます。</p>

<p><code>objective-c
[server clear];
</code></p>

<p><code>tearDown</code>などでお使いください。</p>

<h3>expect / stub /verify</h3>

<p>0.2.x まででサポートされていた<code>stub</code>が廃止されました。<code>stub</code>というAPIは存在しますが、動作が異なっています。</p>

<h4>expect</h4>

<p><code>expect</code>はレスポンスを登録する一般的な方法です。</p>

<p><code>objective-c
[[server expect] forPath:@"/path"];
</code></p>

<p>このように記述すると、<code>/path</code>へレスポンスが登録されます。
これに対して、メソッドチェインの形式で、必要なものを付加していきます。</p>

<p><code>objective-c
[[[server expect] forPath:@"/api/v1/fake"] andJSONResponseResource:@"fake" ofType:@"json"];
</code></p>

<p><code>expect</code>で登録されたレスポンスは、一度アクセスを受けてそれが返されると、自動的に消化さた状態になります。
<code>/path</code>へ二度アクセスしても、レスポンスは返されません。(例外が投げられます。)</p>

<h4>verify</h4>

<p><code>expect</code>されたものは、<code>verify</code>によって、それが利用されたかを検証することができます。</p>

<p>```objective-c
[[server expect] forPath:@"/path"];</p>

<p>// http://localhost:12345/path へアクセスするコード</p>

<p>[server verify]; // /path へきちんとアクセスされているかを検証
```</p>

<h4>stub</h4>

<p><code>stub</code>は<code>expect</code>と同じインターフェイスを持ちますが、永続的に登録されるレスポンスです。</p>

<p><code>objective-c
[[server stub] forPath:@"/path"];
</code></p>

<p>これは <code>http://localhost:12345/path</code> へアクセスを受けそれが返されても、<strong>消化された状態になりません</strong>。
また、<code>verify</code>による検証では、<code>stub</code>で登録されたものは<strong>無視されます</strong>。</p>

<h3>NLTPath</h3>

<p><code>NLTPath</code>は複雑なURLを表現するために使われる物で、現状では特にGETパラメーターに対応するための機能です。</p>

<p>```objective-c
[[server expect] forPath:[NLTPath pathWithPathString:@"/fake" andParameters:@{</p>

<pre><code>    @"k1" : @"v1",
    @"k2" : @"v2",
</code></pre>

<p>}]];
```</p>

<p>このような記述をした場合、このレスポンスは <code>/fake?k1=v1&amp;k2=v2</code> または <code>/fake?k2=v2&amp;k1=v1</code> にマッチします。</p>

<h4>anyValue</h4>

<p><code>[NLTPath anyValue]</code>を使う事で、値部分をワイルドカードにすることができます。</p>

<p>```objective-c
[[server expect] forPath:[NLTPath pathWithPathString:@"/fake" andParameters:@{</p>

<pre><code>    @"k1" : [NLTPAth anyValue]
</code></pre>

<p>}]];
```</p>

<p>これは、<code>/fake?k1=hogeeeeeeee</code> や <code>/fake?k1=fugaaaaaaaaaa</code> にマッチします。</p>

<h3>付加可能な項目</h3>

<p>メソッドチェインにより付加できる事ができる項目は以下です。</p>

<h4>HTTP Method</h4>

<p><code>objective-c
[[server stub] forPath:@"/fake" HTTPMethod:@"Post"];
</code></p>

<h4>Status code</h4>

<p><code>objective-c
[[[server stub] forPath:@"/fake"] andStatusCode:200];
</code></p>

<h4>Simulate waiting</h4>

<p>タイムアウトなどを再現することができます。</p>

<p><code>objective-c
[[[server stub] forPath:@"/fake"] andProcessingTime:10.0f];
</code></p>

<h4>Checking POST body</h4>

<p>POSTされた内容を調べる事が出来ます。</p>

<p>```objective-c
[[[server expect] forPath:@"/fake" HTTPMethod:@"POST"] andCheckPostBody:<sup>(NSData</sup> *postBody) {</p>

<pre><code>    NSString *postBodyString = [that toString:postBody];
    GHAssertEqualStrings(postBodyString, @"POST_BODY", nil);
}];
</code></pre>

<p>```</p>

<h4>Supporting Content-Types</h4>

<p>自動的にContentTypeを付加してくれるものは以下です。</p>

<p><code>objective-c
[[[server expect] forPath:@"/fake"] and{ContentType}Response...]
</code></p>

<ul>
<li>JSON</li>
<li>HTML</li>
<li>XML</li>
<li>Plain Text</li>
<li>Binary

<ul>
<li>application/octet-stream</li>
</ul>
</li>
</ul>


<p>カスタムのContent-Typeは、<code>andContentTypeHeader</code>によって付加することができます。</p>

<h2>バグなどの報告</h2>

<p><a href="https://github.com/yaakaito/NLTHTTPStubServer/issues">Github Issue</a>で受け付けています。(日本語可)</p>
]]></content>
  </entry>
  
</feed>

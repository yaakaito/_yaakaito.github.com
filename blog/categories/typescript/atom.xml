<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TypeScript | yaakaito.org]]></title>
  <link href="http://yaakaito.org/blog/categories/typescript/atom.xml" rel="self"/>
  <link href="http://yaakaito.org/"/>
  <updated>2013-04-26T05:22:19+09:00</updated>
  <id>http://yaakaito.org/</id>
  <author>
    <name><![CDATA[yaakaito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[最近TypeScript書くときに使うGrunt+Testem+αのテンプレ]]></title>
    <link href="http://yaakaito.org/blog/2013/04/26/typescript-proj-template/"/>
    <updated>2013-04-26T03:50:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/26/typescript-proj-template</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
TypeScript0.9のpreviewがリリースされましたね！最近はもうJavaScriptもCoffeeScriptも自発的には書ていないです。
仕事とかでも結構TypeScriptでプロト作っては捨て、みたいなことをやってるんですが、
そうしてるうちにプロジェクトのテンプレ大体決まってきたなーという感じがしたのでまとめた。</p>

<p><a href="https://github.com/yaakaito/typescript-proj">typescript-proj</a></p>

<h2>搭載しているもの</h2>

<ul>
<li>Gruntのカスタムタスク</li>
<li>Testem Mocha+chai でのテスト環境</li>
<li>jQuery.d.ts 1.9</li>
<li>.gitignoreとか.gitattributes</li>
<li>package.jsonとcomponents.json入り</li>
</ul>


<p>中核はGrunt+Testem+Bowerな感じ。yoでよくね感すごい。</p>

<h2>使い方</h2>

<p>完全に個人用にまとめてるだけなので、cloneして<code>.git</code>消して使ってる。</p>

<p><code>
$ git clone https://github.com/yaakaito/typescript-proj.git proj
$ rm -rf proj/.git
</code></p>

<p>npmとbowerを使ってるので、とりあえずテンプレ分を取ってくる</p>

<p><code>
$ npm install
$ bower install
</code></p>

<h2>プロジェクト構成</h2>

<p>セットアップしてから、とりあえず <code>grunt generate</code> するとこんな感じになる。</p>

<p><code>
tree -L 2 --dirsfirst
.
├── build
│   ├── index.js
│   └── index.min.js
├── compiled
│   ├── src
│   └── test
├── components
│   └── jquery
├── d.ts
│   ├── chai.d.ts
│   ├── jquery.d.ts
│   └── mocha.d.ts
├── node_modules
│   ├── grunt
│   ├── grunt-contrib-clean
│   ├── grunt-contrib-concat
│   ├── grunt-contrib-connect
│   ├── grunt-contrib-copy
│   ├── grunt-contrib-uglify
│   ├── grunt-regarde
│   └── grunt-typescript
├── public
│   ├── javascript
│   └── index.html
├── res
│   └── index.html
├── src
│   └── index.ts
├── test
│   └── index.ts
├── Gruntfile.coffee
├── README.md
├── component.json
├── package.json
└── testem.json
</code></p>

<p>上から説明していくと</p>

<h3>build</h3>

<p>連結済み + minify済みのJSが置かれるところ。
これはリリースの配布にも使うことを前提にしているので、gitignoreはされてない。</p>

<h3>compiled</h3>

<p>単純にコンパイルした状態のJSが置かれるところ。
中間ファイルみたいなものなので、gitignoreの対象。</p>

<h3>components</h3>

<p>bowerで入るモジュール。gitginore。</p>

<h3>d.ts</h3>

<p>TypeScript用の<code>d.ts</code>を置くところ。コードとほぼ同じ扱い。
微妙に違うけど、vendorみたいなもの。ドットは好みだと思うのでご自由に。</p>

<p>デフォルトでは jQueryと mocha、chaiを入れてある。
jQueryはまあなんだかんだで使う(使わされる)のでデフォで入れてある感じ。
mochaとchaiはテスト用、testemはそこまでは面倒みてくれないので自分で置く。</p>

<p><code>d.ts</code>の追加は僕は<a href="http://www.tsdpm.com/">tsdpm</a>から探して<code>tsd</code>で取ってきて適当に配置してる。</p>

<h3>node_modules</h3>

<p>npm。主にgrunt系がインストールされる。特に書く事ない。</p>

<h3>public</h3>

<p>プレビューモードでルートにするところ。gh-pagesとか作りたいときはここに入るように作るんだけど、<code>index.html</code>の元ファイルとかは<code>res</code>にある。</p>

<h3>res</h3>

<p>TypeScript以外のものを置くところ。上の<code>index.html</code>とか、cssとか置いたりする。
compassとかをデフォルトで入れてないんだけど、作るならここに入れる事になると思う。</p>

<h3>src</h3>

<p>TypeScript、特に言う事ない。</p>

<h3>test</h3>

<p>テスト、特に言う事ない。</p>

<h3>Gruntfile.coffee</h3>

<p>Gruntの設定ファイル。詳しくは後で。</p>

<h3>README.md</h3>

<p>とりあえずデフォルトでテンプレートのREADME入れてる。</p>

<h3>component.json package.json</h3>

<p>bowerとnpm。特に言う事ない。</p>

<h3>testem.json</h3>

<p>Testemの設定ファイル。詳しくは後で。</p>

<h2>Gruntのタスク</h2>

<p>ビルド系は微妙に分かり難いんだけど、基本的に<code>compile</code> <code>build</code> <code>generate</code>の3種類を定義して使ってる。
それにプラスして<code>preview</code>というのを作っていて、配信サーバーを立てて、ファイル更新されたらビルドしなおす感じ。
LiveReloadとかはなくともよいかなーと思ってるので作ってない。</p>

<h3>compile</h3>

<p>単純にTypeScriptをコンパイルするだけ。<code>src</code> <code>test</code> 共にコンパイルして <code>compiled</code> へ。
TypeScriptだと<code>index.ts</code>だけコンパイルするようにして、<code>index.ts</code>で全部referenceでもいいと思うので使い分ける。</p>

<p>```coffeescript
typescript:</p>

<pre><code>compile:
    src: ['src/**/*.ts']
    dest: 'compiled'
    # src: ['src/index.ts']
    # dest: 'compiled/src/index.ts'
    options:
        module: 'commonjs'
        target: 'es5'
        # sourcemap: true
        # declaration: true
test:
    src: ['test/**/*.ts']
    dest: 'compiled'
    options:
        module: 'commonjs'
        target: 'es5'
</code></pre>

<p>grunt.registerTask 'compile', ['typescript']
```</p>

<h3>build</h3>

<p>concat + uglifyでminify作ったりする。作ったのは <code>build</code> に入る。</p>

<p>```coffeescript
concat:</p>

<pre><code>dist:
    src: ['compiled/src/**/*.js']
    dest: 'build/index.js'
options:
    separator: ';'
</code></pre>

<p>uglify:</p>

<pre><code>min:
    files:
        'build/index.min.js': ['build/index.js']
###
options:
    mangle:
        expect: ['jQuery']
    sourceMap: 'build/source-map.js'
###
</code></pre>

<p>grunt.registerTask 'build', ['concat', 'uglify']
```</p>

<h3>generete</h3>

<p><code>public</code>を作る為のコマンド、用途に合わせて書き足していく。(インデントきもい)</p>

<p>```coffeescript
copy:</p>

<pre><code>public:
    files: [
            expand: true
            cwd: 'build'
            src: '**'
            dest: 'public/javascript'
        ,
            expand: true
            cwd: 'res'
            src: '**'
            dest: 'public/'
    ]
</code></pre>

<p>grunt.registerTask 'generate', ['compile', 'build', 'copy:public']
```</p>

<h3>preview</h3>

<p>connect + regarde。regardeでgenerateするようにしてる。</p>

<p>```coffeescript
connect:</p>

<pre><code>preview:
    options:
        port: 9000
        base: 'public'
</code></pre>

<p>regarde:</p>

<pre><code>src:
    files: ['src/**/*.*']
    tasks: ['generate']
</code></pre>

<p>grunt.registerTask 'preview', ['generate', 'connect:preview', 'regarde']
```</p>

<p>Gruntfileは状況に合わせて柔軟に変えていく感じにしたいので、デフォルトは<code>*</code>指定が多め。</p>

<h2>Testem</h2>

<p>テストは最近は全部Testemでやってる。BusterJS派だったけど、BusterJSはちょっとトロい感じがする・・・。</p>

<p>```javascript
{</p>

<pre><code>"framework" : "mocha+chai",
"before_tests" : "grunt compile",
"src_files" : [
    "src/**/*.ts",
    "test/**/*.ts"
],
"serve_files" : [
    "compiled/src/**/*.js",
    "compiled/test/**/*.js"
]
</code></pre>

<p>}
```</p>

<p>基本は <code>src</code> <code>test</code> を監視して、あとはGruntに任せてる。</p>

<h2>その他</h2>

<p>適当に<code>index.ts</code>を<code>src</code> <code>test</code> 共に吐いているので、忘れかけたら参考にするなどして書く。
<code>.js</code>は最初からバイナリ扱いしているので安心してください！！！</p>

<h2>まとめ</h2>

<p>CoffeeScriptとかも大体同じ感じで出来ると思うので、それなりに汎用性ある感じだと思う。(やろうとしたけど書かない事に気づいてやってない)
<a href="https://github.com/yaakaito/Gruntfile">Gruntfileだけ個別</a>にまとめたりもしてるので、適当に組み合わせるとよいのでは。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TypeScriptの紹介的なプレゼンした]]></title>
    <link href="http://yaakaito.org/blog/2013/03/30/typescript-introduction/"/>
    <updated>2013-03-30T01:26:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/30/typescript-introduction</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
勉強会っぽいものがあったので、せっかくなのでTypeScriptどうよ的な話した。
スライドはあくまで紹介程度に留めてて、どっちかと言えば後半のどうよ、どうよ的なやりとりが本体だったんですが、せっかくなのでSpeaker Deckにあげた。</p>

<script async class="speakerdeck-embed" data-id="f9ddb2607a740130222e12313809347f" data-ratio="1.33333333333333" src="http://yaakaito.org//speakerdeck.com/assets/embed.js"></script>


<h2>話した事</h2>

<ul>
<li>JavaScriptで書いてたのもをTypeScriptで書くとこんな感じですかね、的な流れです</li>
<li>みなさんJavaScriptを殴りたくなることがあると思います、僕もそうです</li>
<li>というわけでC#を作ったMicrosoft製のTypeScriptはどうなのか試しています</li>
<li>簡単なJavaScriptがあります</li>
<li>これをTypeScriptで書き直すとこうです、すてきですね！！！！</li>
<li>というわけでTypeScriptはJavaScriptのスーパーセットです</li>
<li>スーパーセットなので残念ながら、JavaScriptのトラップなどを解決することはできません</li>
<li>その代わりにコンパイル時に型チェックを付ける事ができます</li>
<li>ただし出てくるJavaScriptまではチェックできないので、注意しましょう</li>
<li>書くのであれば全部tsで書くのが理想です</li>
<li>型を工夫して書いていたいままでよりも、大分見やすく書けるのが多分一番のメリットです(closure compilerとか)</li>
<li>他にもクラス、モジュール、インターフェイスみたいなものはあるので、一個ずつみていきます</li>
<li>まずクラス、JavaScriptで書くとこんな感じですね、結構分かりにくいです</li>
<li>TypeScriptで書くとこうです、全体としての見通しがよくなりました</li>
<li>コンパイルするとでてくるJavaScriptも綺麗です</li>
<li>次はモジュール、JavaScriptでもこういう感じに実装することはできますが・・・</li>
<li>これがもっと書きやすくなります</li>
<li>JavaScriptも綺麗です</li>
<li>最後にインターフェイス、JavaやC#のインターフェイスとやれることは似ていますが、ものが違います</li>
<li>公式のドキュメントから引用すると、あるオブジェクトに別名を与える、という機能です</li>
<li><code>Programmer Interface</code>はこんな感じ、これはそのままオブジェクトの型としても使えますし、<code>implement</code>することもできます</li>
<li>コンパイル時に必要な定義なので、JavaScriptになった段階では消えます</li>
<li><code>Function</code>もオブジェクトなので、それを表すこともできます</li>
<li>これはそれを利用してオーバーロードを実装してみた例です</li>
<li>ただし残念ながら、定義上のオーバーロードなので、実装自体はJavaScriptと変わりません</li>
<li>他にも機能はありますが・・・</li>
<li>JavaScriptだけでも工夫すれば大体似たような感じで実装することはできますし、型チェックもコンパイラを使えば行う事が出来ます</li>
<li>そしてJavaScriptのトラップを回避できるわけでもありません</li>
<li>なので残念ながら、ソリューションというわけではなく</li>
<li>いままでJavaScriptを書いていた人が、見通しよく、安全なコードを書きやすくなる言語という認識でよいと思います</li>
<li>JavaScriptをしっかりと書けることが前提になる言語です</li>
<li>いままで似たような事を、ちゃんとやっていたJavaScripterな方にはかなりおすすめです</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TypeScript + SourceMap でデバッグしてみる]]></title>
    <link href="http://yaakaito.org/blog/2013/03/28/typescript-with-sorucemap/"/>
    <updated>2013-03-28T03:43:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/28/typescript-with-sorucemap</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
SourceMap便利ですよね！TypeScriptでも使ってみましょう。</p>

<p>といってもそんなにやることないです。
<code>tsc</code>でコンパイルするときに <code>--sourcemap</code> オプションをつけてあげれば生成されます。</p>

<p><code>
$ tsc &lt;file&gt; --sourcemap
</code></p>

<p>単体で吐いてもいいですが、<a href="https://github.com/yaakaito/typebone">前から使ってこのリポジトリ</a>みたいに、<code>reference</code>だけしてるファイルをコンパイルしているような場合でも、ちゃんと吐いてくれます。</p>

<p><code>
$ tsc --out backbone.test.js test/bootstrap.ts --sourcemap
</code></p>

<p>こんな感じにすると、<code>backbone.test.js.map</code>が出てくるので、Chormeで使ってみましょう。</p>

<p><img src="/images/ts-sourcemap-setting.png"></p>

<p><code>Enable source maps</code>をonにして、</p>

<p><img src="/images/ts-sourcemap-show.png"></p>

<p>読み込めばこんな感じに<code>.ts</code>が出てくるので、</p>

<p><img src="/images/ts-sourcemap-debug.png"></p>

<p>BP打つなりして使います、便利ですね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【解決した】TypeScriptで複数ファイルに渡って同一moduleを定義したくてハマってる]]></title>
    <link href="http://yaakaito.org/blog/2013/03/25/typescript-module-division-files/"/>
    <updated>2013-03-25T08:42:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/25/typescript-module-division-files</id>
    <content type="html"><![CDATA[<h2>解決した</h2>

<p>どうも俺が0.8.3だと思っていた<code>tsc</code>は0.8.0だった。
バージョンが古いなんて生易しいもんじゃねぇ、気がついたらnode環境がぶっ壊れていた、何を言っているかわからねーと思うが(ry
npm listで出てくるtscと、パスが通ってるtscが違った。とりあえず直した、お騒がせしました。</p>

<p>本来下に書いてある</p>

<p>```javascript
module A {
  class Hoge {</p>

<pre><code>// ...
</code></pre>

<p>  }
  export var hoge = new Hoge();
}
```</p>

<p>というのは、0.8.3時点でコンパイルでエラーになるようになっています、<code>Hoge</code>をexportしろ、とのことです。
で、Hogeの中でさらにインナークラスとか呼んでると、それもexportしなくちゃいけなくてヤダーなので、ほしいメソッドだけ<code>interface</code>にしました。</p>

<p>あと、<code>reference</code>を反対にするとなんかおかしい問題は健在っぽいです。
いろいろ邪推してみましたが、それにあんまり意味はないので、issueにしてこようと思います。</p>

<hr />

<p>　</p>

<p>こんにちは！うきょーです！分からないので誰か教えてください。
TypeScriptに<code>module</code>って機能があるんですが、こいつでハマってる。</p>

<p>というのもこれって、</p>

<p>```javascript
module A {
  class Hoge {</p>

<pre><code>// ...
</code></pre>

<p>  }
}
```</p>

<p>みたいにしておくと、</p>

<p>```javascript
var A;
(function (A) {</p>

<pre><code>var Hoge = (function () {
    function Hoge() { }
    return Hoge;
})();  
</code></pre>

<p>})(A || (A = {}));
```</p>

<p>こうなるわけ。
で、<code>module</code>は複数のファイルに渡って同一のものを定義できるらしい。
実際そういう感じになっているし、そうなんだろう、分かる。</p>

<p>問題はこのモジュール内で変数定義しようとしたときに起こった。
例えばシングルトン的な感じでオブジェクトを外に出したいときに、</p>

<p>```javascript
module A {
  class Hoge {</p>

<pre><code>// ...
</code></pre>

<p>  }
  export var hoge = new Hoge();
}
```</p>

<p>とすれば、</p>

<p>```javascript
var A;
(function (A) {</p>

<pre><code>var Hoge = (function () {
    function Hoge() { }
    return Hoge;
})(); 
A.hoge = new Hoge(); 
</code></pre>

<p>})(A || (A = {}));
```</p>

<p>となる、ここまではよい。
もう一個同じ<code>module</code>を実装しているファイルがあるとする、</p>

<p>```javascript
module A {
  class Fuga {</p>

<pre><code>// ...
</code></pre>

<p>  }
}
```</p>

<p>で、この二つを個別にコンパイルする分には何も起こらないし、普通に実行できてるっぽいんだけど、</p>

<p>```javascript
/// <reference path="Fugaの方.ts" /></p>

<p>module A {
  class Hoge {</p>

<pre><code>// ...
</code></pre>

<p>  }
  export var hoge = new Hoge();
}
```</p>

<p>という風にreferenceすると <code>export var hoge = new Hoge();</code> でHogeが見つからなくなる。真上にあるが・・・。</p>

<p>例えばこういう感じにしてビルドしてみても駄目。</p>

<p><code>javascript
/// &lt;reference path="Fugaの方.ts" /&gt;
/// &lt;reference path="Hogeの方.ts" /&gt;
</code></p>

<p>なんだけど、順番を入れ替えると・・・</p>

<p><code>javascript
/// &lt;reference path="Hogeの方.ts" /&gt;
/// &lt;reference path="Fugaの方.ts" /&gt;
</code></p>

<p>なんか知らんが通る。そんな参照で大丈夫か？</p>

<p>要するに、コンパイルするときに</p>

<p>```javascript
module A {
  // ...
}</p>

<p>module A {
  // ...
}
```</p>

<p>という状態になると、二番目以降の<code>module</code>内で参照が死ぬ。
けど<code>class</code>とかでプロパティに持つ分には大丈夫という謎状況。</p>

<p>バグなのかな、バグならバグでよいんだけど。</p>

<p>で、ここまで説明してきたんだけど、これエラーは出るけど、コンパイルはちゃんと通った跡がある、どっちやねん。</p>

<p>一番いい解説を頼む。</p>

<p>(誰も知らなさそうなら公式に投げてみようと思います。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[テスト書きながらTypeScript書ける環境作る]]></title>
    <link href="http://yaakaito.org/blog/2013/03/24/test-driven-typescript/"/>
    <updated>2013-03-24T19:33:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/24/test-driven-typescript</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！TypeScriptを書いています。
というのもBackbone、というかJavaScriptでのMVCにガッツリと関わるような状況になってしまったので、
触ってるだけでもわからんとこ多いし、勉強がてらTypeScriptでクローンつくってみるかーという感じです。</p>

<p>そこで、テストを書きたいわけなんですが、TypeScriptのテスト環境の情報が少ないので、手探りでやったところまで記録しておきます。</p>

<p><a href="http://yaakaito.org/blog/2013/03/23/testing-mocha-testem-htmlcov/">前回、Mocha + Testem + HTMLCov</a> で基礎的な部分を作ったので、これをベースにします。
なのでこれにTypeScriptのコンパイルやらを乗せていく感じです。</p>

<p><a href="https://github.com/yaakaito/typebone">リポジトリはgithubにある</a>ので、見ながら読むと分かりやすいかもしれません。</p>

<h2>TypeScriptのコンパイル</h2>

<p>TypeScriptのコンパイルには <code>tsc</code> を使うので、npmで入れます。</p>

<p><code>
$ npm install -g tsc
</code></p>

<p><code>tsc</code> でコンパイルする時に、<code>--out</code> オプションを付けると <code>refrence</code> を解決しながらビルドしてくれます。
で、これは流儀的にどうなのかは分からないんですが、これを利用して、コンパイル対象は <code>reference</code> するだけにしました。</p>

<p><code>javascript
// src/backbone.ts
/// &lt;reference path="events.ts" /&gt;
/// &lt;reference path="model.ts" /&gt;
</code></p>

<p>とりあえず<code>Backbone.Events</code>と<code>Backbone.Model</code>だけ用意します。</p>

<p>```javascript
// src/events.ts
/// <reference path="../vendor/underscore.d.ts" /></p>

<p>module Backbone {
  export class Events {
  // ....
  }
}
```</p>

<p><code>javascript
// src/model.ts
module Backbone {
  export class Model {
  // ....
  }
}
</code></p>

<p>こういう感じにしておいて、以下のコマンドでビルドします。</p>

<p><code>
$ tsc --out backbone.js src/backbone.ts
</code></p>

<p>すると、<code>backbone.js</code>に <code>events.ts</code> と <code>models.ts</code> をコンパイルして、依存を解決したものが吐き出されます。
これには <code>underscore</code> は含まれません。</p>

<h2>テスト用のビルドとTestem</h2>

<p>テストもTypeScriptで書きます。といっても、Mochaを使うので、ほとんどJavaScriptになります。</p>

<h3>【追記】d.tsファイルについて</h3>

<p>TypeScriptからMocha(JavaScript)を利用する為に、<code>d.ts</code>というファイルが必要になります。
これは安全に既存のJavaScriptをTypeScriptから利用する為の仕組みです。</p>

<p><code>d.ts</code> ファイル自体はただのテキストで、コードと対して変わらないです。</p>

<p>入手方法としては自分で書く(ある程度自動生成できるっぽい？)、他の人が作ったものを使う、<a href="http://www.tsdpm.com/">tsd</a>を利用するの3つがあります。
tsdは<code>d.ts</code>のパッケージマネージャみたいなものなんですが、僕はそこまで大げさなものじゃないよなーと思っているので、適当に拾ってきて突っ込んでいます。(あんまりツール的なの増やしたくないのもある。)</p>

<p><a href="https://github.com/borisyankov/DefinitelyTyped">DefinitelyTyped</a> を見ると有名どころは大体揃ってるので、ほとんどの場合はここから取得すれば済むと思います。
mochaとchaiはこの中になかったので、僕は下のを使ってます。</p>

<p><a href="https://gist.github.com/muratg/4163650">mocha.d.ts</a> | <a href="https://github.com/TobiaszCudnik/asyncmachine/blob/master/headers/chai.d.ts">chai.d.ts</a></p>

<h3>テストを書く</h3>

<p>```javascript
// test/events-test.ts
/// <reference path="../src/events.ts" />
/// <reference path="../vendor/mocha.d.ts" />
/// <reference path="../vendor/chai.d.ts" /></p>

<p>describe('Backbone.Events', function(){
  it('test name', function(){</p>

<pre><code>// ....
</code></pre>

<p>  });
});
```</p>

<p><code>test/bootstrap.ts</code> みたいなのを作って、こっちも <code>reference</code> だけにします。(<code>expect</code>のexportだけ書いてます。)</p>

<p>```javascript
/// <reference path="events-tests.ts" />
/// <reference path="../vender/chai.d.ts" /></p>

<p>var expect = chai.expect;
```</p>

<p>これをビルドします。</p>

<p><code>javascript
$ tsc --out backbone.test.js test/bootstrap.ts
</code></p>

<p>これで、全部の<code>reference</code>が解決されると、さっきの<code>backbone.js</code>の下にテストが丸々ついたようなファイルが生成されます。
これをTestemに食わせます。</p>

<p>```javascript
// testem.json
{
  "framework" : "mocha",
  "src_files" : [</p>

<pre><code>"vendor/chai.js",
"vendor/underscore.js",
"backbone.test.js"
</code></pre>

<p>  ]
}
```</p>

<p>これでTestemでテストできるようになりました、<code>tsc</code> には <code>watch</code> があるので、これを使って 変更監視 -> 自動コンパイル -> テスト自動実行 というすてき環境を作ります。</p>

<p><code>
$ tsc --watch -out backbone.test.js test/bootstrap.js
</code></p>

<p>やったー！これでいける！
・・・と思ったんですが、どうもちゃんと <code>watch</code> が動いていなくて、うまくコンパイルできません。
なので<a href="https://github.com/yaakaito/typebone/blob/master/Guardfile">Guardで代用</a>しました。</p>

<p>ちょっと面倒ですが、すてき環境ができましたね！</p>

<h2>カバレッジ</h2>

<p>カバレッジをとるときは、<code>backbone.js</code>側に<code>jscoverage</code>をかける必要があるので、別々にコンパイルが必要です。
となると、さっきの <code>test/bootstrap.js</code> なんかで依存関係を解決しながらコンパイルできないので、個別にコンパイルします。
個別にコンパイルしたテストを全部 <code>cat</code>で繋げて、<code>all-tests.js</code> みたいなのを作ります。あとは前回を参考にしてください。</p>

<p>Makefileにするとこんな感じ</p>

<p>```
compile:
  tsc --out backbone.js src/backbone.ts</p>

<p>compile-test:
  tsc test/<em>.ts
  cat test/</em>.js > all-tests.js
  rm test/*.js</p>

<p>cover: compile compile-test
  jscoverage backbone.js backbone.cover.js
  mocha-phantomjs -R json-cov cover-runner.html | json2htmlcov > cover.html
```</p>

<h2>とりあえず</h2>

<p>こんな感じで一旦は不満なく開発できる環境ができました。</p>

<p>TypeScriptまだ勝手がよく分かってないので、コードはあんまり見ないでーーー＾ー＾</p>

<p>あと、Backboneの移植をやってるからか、テスト側がどうしてもほとんどJavaScriptっぽい感じになるんですが、
無駄にコンパイラに怒られてだるいなーと思う事も。(まあ当然なのだが)
なんでこういう場合は、テスト側は生のJavaScriptでも十分なのかなーと思った。</p>
]]></content>
  </entry>
  
</feed>

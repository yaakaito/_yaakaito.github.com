<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TypeScript | yaakaito.org]]></title>
  <link href="http://yaakaito.org/blog/categories/typescript/atom.xml" rel="self"/>
  <link href="http://yaakaito.org/"/>
  <updated>2013-03-25T00:32:43+09:00</updated>
  <id>http://yaakaito.org/</id>
  <author>
    <name><![CDATA[yaakaito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[テスト書きながらTypeScript書ける環境作る]]></title>
    <link href="http://yaakaito.org/blog/2013/03/24/test-driven-typescript/"/>
    <updated>2013-03-24T19:33:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/24/test-driven-typescript</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！TypeScriptを書いています。
というのもBackbone、というかJavaScriptでのMVCにガッツリと関わるような状況になってしまったので、
触ってるだけでもわからんとこ多いし、勉強がてらTypeScriptでクローンつくってみるかーという感じです。</p>

<p>そこで、テストを書きたいわけなんですが、TypeScriptのテスト環境の情報が少ないので、手探りでやったところまで記録しておきます。</p>

<p><a href="http://yaakaito.org/blog/2013/03/23/testing-mocha-testem-htmlcov/">前回、Mocha + Testem + HTMLCov</a> で基礎的な部分を作ったので、これをベースにします。
なのでこれにTypeScriptのコンパイルやらを乗せていく感じです。</p>

<p><a href="https://github.com/yaakaito/typebone">リポジトリはgithubにある</a>ので、見ながら読むと分かりやすいかもしれません。</p>

<h2>TypeScriptのコンパイル</h2>

<p>TypeScriptのコンパイルには <code>tsc</code> を使うので、npmで入れます。</p>

<p><code>
$ npm install -g tsc
</code></p>

<p><code>tsc</code> でコンパイルする時に、<code>--out</code> オプションを付けると <code>refrence</code> を解決しながらビルドしてくれます。
で、これは流儀的にどうなのかは分からないんですが、これを利用して、コンパイル対象は <code>reference</code> するだけにしました。</p>

<p><code>javascript
// src/backbone.ts
/// &lt;reference path="events.ts" /&gt;
/// &lt;reference path="model.ts" /&gt;
</code></p>

<p>とりあえず<code>Backbone.Events</code>と<code>Backbone.Model</code>だけ用意します。</p>

<p>```javascript
// src/events.ts
/// <reference path="../vendor/underscore.d.ts" /></p>

<p>module Backbone {
  export class Events {
  // ....
  }
}
```</p>

<p><code>javascript
// src/model.ts
module Backbone {
  export class Model {
  // ....
  }
}
</code></p>

<p>こういう感じにしておいて、以下のコマンドでビルドします。</p>

<p><code>
$ tsc --out backbone.js src/backbone.ts
</code></p>

<p>すると、<code>backbone.js</code>に <code>events.ts</code> と <code>models.ts</code> をコンパイルして、依存を解決したものが吐き出されます。
これには <code>underscore</code> は含まれません。</p>

<h2>テスト用のビルドとTestem</h2>

<p>テストもTypeScriptで書きます。といっても、Mochaを使うので、ほとんどJavaScriptになります。</p>

<h3>【追記】d.tsファイルについて</h3>

<p>TypeScriptからMocha(JavaScript)を利用する為に、<code>d.ts</code>というファイルが必要になります。
これは安全に既存のJavaScriptをTypeScriptから利用する為の仕組みです。</p>

<p><code>d.ts</code> ファイル自体はただのテキストで、コードと対して変わらないです。</p>

<p>入手方法としては自分で書く(ある程度自動生成できるっぽい？)、他の人が作ったものを使う、<a href="http://www.tsdpm.com/">tsd</a>を利用するの3つがあります。
tsdは<code>d.ts</code>のパッケージマネージャみたいなものなんですが、僕はそこまで大げさなものじゃないよなーと思っているので、適当に拾ってきて突っ込んでいます。(あんまりツール的なの増やしたくないのもある。)</p>

<p><a href="https://github.com/borisyankov/DefinitelyTyped">DefinitelyTyped</a> を見ると大体のものは揃ってるので、ほとんどの場合はここから取得すれば済むと思います。
mochaとchaiはこの中になかったので、僕は下のを使ってます。</p>

<p><a href="https://gist.github.com/muratg/4163650">mocha.d.ts</a> | <a href="https://github.com/TobiaszCudnik/asyncmachine/blob/master/headers/chai.d.ts">chai.d.ts</a></p>

<h3>テストを書く</h3>

<p>```javascript
// test/events-test.ts
/// <reference path="../src/events.ts" />
/// <reference path="../vendor/mocha.d.ts" />
/// <reference path="../vendor/chai.d.ts" /></p>

<p>describe('Backbone.Events', function(){
  it('test name', function(){</p>

<pre><code>// ....
</code></pre>

<p>  });
});
```</p>

<p><code>test/bootstrap.ts</code> みたいなのを作って、こっちも <code>reference</code> だけにします。(<code>expect</code>のexportだけ書いてます。)</p>

<p>```javascript
/// <reference path="events-tests.ts" />
/// <reference path="../vender/chai.d.ts" /></p>

<p>var expect = chai.expect;
```</p>

<p>これをビルドします。</p>

<p><code>javascript
$ tsc --out backbone.test.js test/bootstrap.ts
</code></p>

<p>これで、全部の<code>reference</code>が解決されると、さっきの<code>backbone.js</code>の下にテストが丸々ついたようなファイルが生成されます。
これをTestemに食わせます。</p>

<p>```javascript
// testem.json
{
  "framework" : "mocha",
  "src_files" : [</p>

<pre><code>"vendor/chai.js",
"vendor/underscore.js",
"backbone.test.js"
</code></pre>

<p>  ]
}
```</p>

<p>これでTestemでテストできるようになりました、<code>tsc</code> には <code>watch</code> があるので、これを使って 変更監視 -> 自動コンパイル -> テスト自動実行 というすてき環境を作ります。</p>

<p><code>
$ tsc --watch -out backbone.test.js test/bootstrap.js
</code></p>

<p>やったー！これでいける！
・・・と思ったんですが、どうもちゃんと <code>watch</code> が動いていなくて、うまくコンパイルできません。
なので<a href="https://github.com/yaakaito/typebone/blob/master/Guardfile">Guardで代用</a>しました。</p>

<p>ちょっと面倒ですが、すてき環境ができましたね！</p>

<h2>カバレッジ</h2>

<p>カバレッジをとるときは、<code>backbone.js</code>側に<code>jscoverage</code>をかける必要があるので、別々にコンパイルが必要です。
となると、さっきの <code>test/bootstrap.js</code> なんかで依存関係を解決しながらコンパイルできないので、個別にコンパイルします。
個別にコンパイルしたテストを全部 <code>cat</code>で繋げて、<code>all-tests.js</code> みたいなのを作ります。あとは前回を参考にしてください。</p>

<p>Makefileにするとこんな感じ</p>

<p>```
compile:
  tsc --out backbone.js src/backbone.ts</p>

<p>compile-test:
  tsc test/<em>.ts
  cat test/</em>.js > all-tests.js
  rm test/*.js</p>

<p>cover: compile compile-test
  jscoverage backbone.js backbone.cover.js
  mocha-phantomjs -R json-cov cover-runner.html | json2htmlcov > cover.html
```</p>

<h2>とりあえず</h2>

<p>こんな感じで一旦は不満なく開発できる環境ができました。</p>

<p>TypeScriptまだ勝手がよく分かってないので、コードはあんまり見ないでーーー＾ー＾</p>

<p>あと、Backboneの移植をやってるからか、テスト側がどうしてもほとんどJavaScriptっぽい感じになるんですが、
無駄にコンパイラに怒られてだるいなーと思う事も。(まあ当然なのだが)
なんでこういう場合は、テスト側は生のJavaScriptでも十分なのかなーと思った。</p>
]]></content>
  </entry>
  
</feed>

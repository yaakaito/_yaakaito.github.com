<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | yaakaito.org]]></title>
  <link href="http://yaakaito.github.com/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://yaakaito.github.com/"/>
  <updated>2013-03-06T02:18:34+09:00</updated>
  <id>http://yaakaito.github.com/</id>
  <author>
    <name><![CDATA[yaakaito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[buster-html-docとあとcoffee]]></title>
    <link href="http://yaakaito.github.com/blog/2013/03/02/buster-html-doc-and-coffee/"/>
    <updated>2013-03-02T14:40:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/03/02/buster-html-doc-and-coffee</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。
<a href="http://yaakaito.github.com/blog/2013/03/01/buster-testbed-and-boot/">前回BusterJSのtestbedの話</a>を書いたのですが、</p>

<p><blockquote><p>@yaakaito HTMLを用意するまでもない場合は buster-html-doc とかも良いと思いますがどうでしょう！</p><footer><strong>@y_imaya</strong> <cite><a href='https://twitter.com/y_imaya/status/307347977712848896'>twitter.com/y_imaya/status/&hellip;</a></cite></footer></blockquote></p>

<p>という意見をもらったので、こっちのことも書いておこうと思いました。</p>

<h2>そもそもbuster-html-docって何</h2>

<p>BusterJSはJSTestDriver形式で書かれたテストケースの実行をサポートしているのですが、JSTestDriverに<a href="http://code.google.com/p/js-test-driver/wiki/HtmlDoc">HTML Doc</a>という昨日があります。
この部分だけをBusterJS用に切り出したのがbuster-html-docで、前回のようにHTMLを用意するまでもない場合に</p>

<p><code>javascript
/*:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;*/
assert.equals(this.hoge.innerHTML, 'aaaa');
</code></p>

<p>という風にテスト毎にエレメントを生成することができます。</p>

<h2>使い方</h2>

<p><code>buster-html-doc</code>をnpmからインストールします。</p>

<p><code>
$ npm install buster-html-doc
</code></p>

<p><code>buster.js</code>でbuster-html-docを読み込むようにします。</p>

<p>```javascript
var config = module.exports;</p>

<p>config["browser test"] = {
  env : "browser",
  tests : [</p>

<pre><code>"test.js"
</code></pre>

<p>  ],
  extensions: [require("buster-html-doc")] // これ
}
```</p>

<p>こういう感じにテストを書きます。</p>

<p>```javascript
buster.testCase('hoge', {</p>

<pre><code>'test html doc' : function() {
    /*:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;*/
    assert.equals(this.hoge.innerHTML, 'aaaa');
}
</code></pre>

<p>})
```</p>

<p>これでテストを実行すると、テスト時に<code>/*:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;*/</code>の部分が、</p>

<p>```javascript
this.hoge = (function () {</p>

<pre><code>var element = document.createElement("div");
element.innerHTML = "&lt;p&gt;aaaa&lt;/p&gt;";if (element.childNodes.length &gt; 1) {
    throw new Error("HTML doc expected to only contain one root node, found " + element.childNodes.length); 
}
return element.firstChild; 
</code></pre>

<p>}());
```</p>

<p>という感じに変換されます。
あとはこのエレメントを使ってアサーションするなりできます。</p>

<p>上の例では<code>this.hoge</code>に対してエレメントを生成していますが、
そうではなく<code>body</code>とかに突っ込んでほしい場合は、<code>+=</code>を使って書く事もできます。</p>

<p><code>javascript
/*:DOC += &lt;p id="hoge"&gt;aaaa&lt;/p&gt;*/
assert.equals(document.getElementById('hoge').innerHTML, 'aaaa');
</code></p>

<p>という感じなのがbuster-html-docプラグインです。</p>

<h2>buster-coffee</h2>

<p>続いてbuster-coffeeなのですが、名前の通りテスト実行時にCoffeeScriptをコンパイルしてくれるので、コードをCoffeeScriptで書けるよ、というものです。
これ自体は特にめんどくさくなくて、npmでインストールして、</p>

<p><code>
$ npm install buster-coffee
</code></p>

<p>```javascript
var runner = module.exports;</p>

<p>runner["browser test"] = {
  env : "browser",
  tests : [</p>

<pre><code>"test.coffee" // coffee
</code></pre>

<p>  ],
  extensions: [require("buster-coffee")]
}
```</p>

<p>という風に使えばよいのですが、buster-html-docと少し相性の問題があるみたいで、</p>

<p><code>javascript
extensions: [require("buster-coffee"), require("buster-html-doc")]
</code></p>

<p>こういう感じにして、</p>

<p>```coffeescript
buster.testCase 'hoge',</p>

<pre><code>'test html doc' : -&gt;
    ###:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;###
    assert.equals(this.hoge.innerHTML, 'aaaa');
</code></pre>

<p>```</p>

<p>こう書いても、</p>

<blockquote><p>TypeError: Cannot read property 'innerHTML' of undefined</p></blockquote>

<p>となります。</p>

<p>コンパイルされるとHTML Docの部分は</p>

<p><code>javascript
/*:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;
*/
</code></p>

<p>こうなるはずなので、一見大丈夫そうに思えるんですが、うまくいきません。
というか自分でコンパイルするとちゃんと動くので、プラグインの実行順か、それぞれの実行タイミングが悪いのかみたいな話だと思います。</p>

<p>ハマりやすいので気をつけましょう。</p>

<p>回避策としてはプラグインのところ見直してプルリクエストが一番早そうなんですが、
僕は他の理由もあって先にcoffeeを別にコンパイルするようにしてしまいました。</p>

<h2>おまけ</h2>

<p>HTML Doc形式の書式が結構便利で、最近関わっているプロダクトだと</p>

<p>```coffeescript</p>

<h3>:XHR /hoge = {</h3>

<pre><code>fuga : 'fuga',
piyo : 'piyo'
</code></pre>

<p>}</p>

<h2>#</h2>

<h1>/hoge にアクセスしたらこのレスポンスが返ってくる (XHR部分のラッパー有)</h1>

<p>```</p>

<p>みたいにして通信部分をモックできるようしてみた、便利。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BusterJSでテストに使うHTMLの設定と手動実行]]></title>
    <link href="http://yaakaito.github.com/blog/2013/03/01/buster-testbed-and-boot/"/>
    <updated>2013-03-01T02:35:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/03/01/buster-testbed-and-boot</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
みなさんJavaScriptのテスト書いてますか？当然書いてますよね？？？</p>

<p>JSでテスト書く時に、こういうHTMLを使いたいんだけど的なことってあると思います。
BusterJSはデフォルトでいい感じのHTMLを作って使ってくれるので楽にテストをはじめられるんですが、まあ差し替えたいよねーってことで差し替えます。</p>

<p>BusterJSではこれをtestbedと呼んでいて、設定ファイル(だいたいの場合は<code>buster.js</code>)で設定することができます。
設定の仕方は<a href="http://docs.busterjs.org/en/latest/overview/#custom-test-beds">こんな感じ</a>なんだけど、いまんところ<code>testbed</code>ってプロパティは設定できないので、<code>resources</code>から設定します。</p>

<p>```javascript
var config = module.exports;</p>

<p>config["test"] = {</p>

<pre><code>sources: ["lib/*.js"],
tests: ["test/*-test.js"],
resources : {
    path : "/",
    file : "hoge.html"
}
</code></pre>

<p>};
```</p>

<p>というわけでこんな感じに設定を追加します。こうすると<code>hoge.html</code>を使ってテストを走らせてくれます。
で、テスト用のファイルを読み込まなきゃいけないわけで(sourcesとかtestsに設定してるやつ)、それがどこに埋め込まれるのかなーというと、コードを見てみた感じ、</p>

<ol>
<li><code>{{scripts}}</code> という文字列を探して、あったらそこを置き換える</li>
<li><code>&lt;/body&gt;</code> を探して、あったらその直前に置く</li>
<li><code>&lt;/html&gt;</code> を探して、あったらその直前に置く</li>
<li>何も見つからなかったら、一番最後に連結する</li>
</ol>


<p>という順番になってた。(<code>resource-middleware</code>とか読めば分かる)
なので、例えばテストの時だけ <code>initialize</code> みたいな関数を、セットアップスクリプト走らせる前に置き換えたいんだけど的なときは、(↓みたいな感じの場合)</p>

<p>```html</p>

<script src="hoge.js"></script>


<!-- この中に initialize って関数があるとする -->


<script>
// この時点までにテストのときだけinitializeを置き換えてほしい ＞＜
initialize({
    hoge : fuga
});
</script>


<p>```</p>

<p><code>{{scripts}}</code> を使って、</p>

<p>```html</p>

<script src="hoge.js"></script>


<p>{{scripts}}</p>

<script>
initialize({
    hoge : fuga
});
</script>


<p>```</p>

<p>こういう感じにする。で、<code>bootstrap.js</code>みたいなのを用意してあげて、
<code>javascript
// bootstrap.js
initialize = function() { } // 何もしないでーーー＾ー＾
</code></p>

<p>これを<code>sources</code>に追加する。</p>

<p>```javascript
var config = module.exports;</p>

<p>config["test"] = {</p>

<pre><code>sources: ["lib/*.js", "bootstrap.js"],
tests: ["test/*-test.js"],
resources : {
    path : "/",
    file : "hoge.html"
}
</code></pre>

<p>};
```</p>

<p>とすると、実際にテストで使われるファイルは、</p>

<p>```html</p>

<script src="hoge.js"></script>


<script src="bootstrap.js"></script>


<script src="テストとか"></script>


<script>
initialize({ // なにも・・・なかった・・・
    hoge : fuga
});
</script>


<p>```</p>

<p>こんな感じになる。便利！</p>

<p>で、次にテストの実行開始タイミングをコントロールしたいと思うんだけど、割と簡単んで、<a href="http://docs.busterjs.org/en/latest/starting-testrun-manually/#starting-testrun-manually">この辺</a>にも書いてあるように、</p>

<p>```javascript
var config = module.exports;</p>

<p>config["test"] = {</p>

<pre><code>autoRun: false,
sources: ["lib/*.js"],
tests: ["test/*-test.js"],
resources : {
    path : "/",
    file : "hoge.html"
}
</code></pre>

<p>};
```</p>

<p><code>autoRun</code>を<code>false</code>にして、さっきの例だと、<code>initialize</code>まで呼ばれたら実行してほしい！とかなら、</p>

<p>```javascript
// bootstrap.js
initialize = function() {</p>

<pre><code>buster.run();
</code></pre>

<p>}
```</p>

<p>みたいな感じ</p>

<p>というわけでテストに使うHTMLも設定できましたし、ガンガンテストできますね！</p>

<p>そういや別にもう一個なんか書こうと思ってたんですが、忘れたので知ってる人いたら教えてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stubbilinoというスタブライブラリがよさげです]]></title>
    <link href="http://yaakaito.github.com/blog/2013/02/12/stubbilino/"/>
    <updated>2013-02-12T04:28:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/02/12/stubbilino</id>
    <content type="html"><![CDATA[<p>こんにちは、うきょーです。
<a href="https://github.com/robb/Stubbilino">Stubbilino</a> というスタブライブラリをみけたのですが、結構良さげです。</p>

<p>```objective-c
SEHoge <em>hoge = [[SEHoge alloc] init];
NSObject<SBStub> </em>stub = [Stubbilino stubObject:hoge];
[stub stubMethod:@selector(intMethod) withBlock:^ {</p>

<pre><code>return 10;
</code></pre>

<p>}];</p>

<p>NSLog(@"%d", [hoge intMethod]);
```</p>

<p>みたいにselectorとBlocksを使って書きます。
このBlocksはオブジェクトとか気にせず返せるみたいで、</p>

<p>```objective-c
[stub stubMethod:@selector(stringMethod) withBlock:<sup>(){</sup></p>

<pre><code>return @"string";
</code></pre>

<p>}];
```</p>

<p>こういうのもいける、超便利。
OCMockとかだと<code>OCValue</code>がどうたらとか出てくるので、非常に楽チンに書ける。
Blocks使ってるので、ちょっと生成がめんどいオブジェクトとかも、押し込んでおけるのでよい。</p>

<p>あとはクラスメソッドのスタブも出来るみたいです。
こっちはまだ使ってないのでREADMEからの引用ですが、</p>

<p>```objective-c
// https://github.com/robb/Stubbilino/blob/master/README.md
Class<SBClassStub> uiimage = [Stubbilino stubClass:UIImage.class];</p>

<p>[uiimage stubMethod:@selector(imageNamed:)</p>

<pre><code>      withBlock:^(NSString *name) { return myImage; }];
</code></pre>

<p>```</p>

<p>こういう感じで書けるみたいです。
クラスメソッドのスタブは往々にしてだるいという感じだったので、良い。</p>

<p>OCMockなんかは<code>NSProxy</code>を使った実装ですが、こっちは<code>objc/runtime.h</code>使っています。
なのでちょっとコード追うのはしんどいですが、読んでみるとよいと思います。</p>

<p>　</p>

<h2>宣伝:2/23に東京でiOSカンファレンスを開催します！</h2>

<p>「conferenceWithDevelopers」というタイトルです。</p>

<p><a href="http://conference-with-developers.info/">公式サイト</a></p>

<p><a href="http://peatix.com/event/9727">チケットをゲットはこちらから</a></p>

<p>無料です！</p>

<p>豪華スピーカーでお送りしますので、みなさん是非ご参加ください！LT発表者も募集してますよ！</p>

<iframe frameborder="0" width="400" height="460" src="http://peatix.com/event/9727/share/widget?z=1&c=dark&t=1&a=1"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AppCodeで華麗にテストをキメる！]]></title>
    <link href="http://yaakaito.github.com/blog/2012/12/09/adv-appcode-splendid-testing/"/>
    <updated>2012-12-09T00:02:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/12/09/adv-appcode-splendid-testing</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！！
<a href="http://qiita.com/advent-calendar/2012/objective-c">Objective-Cアドベントカレンダー2012</a> 8日目の記事です。
みなさんiOSアプリを開発するときに当然テストを書くと思うんですが、このテストメソッドだけ試したいなーってときに、
XcodeだとManageShemesからチェックを外して・・・とか、できるんですが、非常に面倒ですよね！！！
そんなあなたにAppCodeがおすすめです！</p>

<h2>テストメソッド単位で実行をキメよう！</h2>

<p>とりあえずキメてみましょう！テストフレームワークはSenTestingKitです。</p>

<p>普通にテストを書いていって・・・</p>

<p><img src="/images/adv-testing-test-case.png" width="420"></p>

<p>この<code>testMappedArrayUsingBlock</code>だけを実行して確かめてみたいなーと思っずたら、
キーバインドを弄っていない場合は<code>Command + Option + R</code>(多分あってるはず)なんかで、Run > Run... を呼び出します。
そうするとこんな感じのメニューが現れて・・・</p>

<p><img src="/images/adv-testing-select.png" width="420"></p>

<p><code>2</code>を押すと、このコンテキストのみを実行してくれます。
すると・・・</p>

<p><img src="/images/adv-testing-result.png" width="420"></p>

<p>こういう感じに<code>testMappedArrayUsingBlock</code>だけ実行してくれます！便利ですね！！！</p>

<p>あとはガンガンテストをかいてガンガン実行してカイラクを得ましょう！！！</p>

<h2>ちなみにこれをXcodeで開いてみると・・・</h2>

<p><img src="/images/adv-testing-xcode.png" width="320"></p>

<p>こんな感じになっています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリのテストを１週してみて思ったこと]]></title>
    <link href="http://yaakaito.github.com/blog/2012/11/12/ios-testing-cycle-1/"/>
    <updated>2012-11-12T21:57:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/11/12/ios-testing-cycle-1</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
iOSアプリのテストのことをそろそろ１年くらい考えていて、１周した感じもするので、
ここら辺で一旦の区切りの意味でもなんとなく考えをまとめてみる。
ちなみにテストというのは主に単体テストにフォーカスした内容です。</p>

<p>こういう系のエントリを書くと、僕はわりと誤解を生みやすい書き方をしてしまうので先に断っておくと、</p>

<ul>
<li>なんらかのアプリ開発手法や、テスト手法をDisっているわけではないです。</li>
<li>フレームワークがいろいろ登場したりしますが、それらをDisっている訳ではないですし、それぞれ素晴らしいものだと思っています。</li>
<li>同じくそのフレームワークを使っているプロジェクトも登場しますが、それらをDisっている訳でもありません。</li>
<li>もちろん特定個人をDisる内容でもありません。</li>
</ul>


<p>という感じで、何かをDisってる記事ではないので、ご了承ください。</p>

<p>長めです。結局何がよかったの、っていう人は下の方から見てください。</p>

<h2>テストフレームワークの変遷</h2>

<h3>はじめの一歩</h3>

<p>皆さんご存知SenTestingKitです。
ほかにどんなフレームワークあるのか知らんし、とりあえずこれで書けなきゃどっちにしろ無理だろ、という感じでした。セットでOCMockも使っていました。
記憶が正しければ、Xcodeは4.1で、iOS4.x~を対象にしたアプリを作っていた記憶です。
ぶっちゃけこのころはSenTestingKitがどうしようもない感じで、状況によっては <code>STAssertTrue(YES)</code> が落ちたりしていました。
それでもある程度のテストを書くことはできました。モデルのテストは十分に書ける感じ。ビュー関連に関しては完全に諦めモードでしたが・・・。
この頃はアプリ全体をテストしていたのと、あんまり慣れていないところもあって、テストケースが冗長だったり、テストが思ったのと違う動きをしたり、いろいろありました。</p>

<h3>安定を求めてGHUnitへ</h3>

<p>まじなんとかならんの、とか思っていたときに良さげだなーとなったのがGHUnit。
GHUnitはそれ自体がアプリとして動いて、その上でテストコードを実行するというもの。
SenTestingKitと比較して圧倒的に安定しているのと、SenTestingKitと互換性があるのがプラス点。
さらには<code>GHVerifyView</code>というビューを画像の一致率でテストできるものもあったり、非同期テスト標準であったりと、盛りだくさん。
この時期に作っていたもので公開しているものでは、NLTHTTPStubServerはテストがGHUnitで書かれています。
アプリ開発をしつつも、アプリのコア部分をフレームワーク化する、ということもやっていたし、
特にフレームワーク側はちゃんとテスト固めないとなぁという意味でも、安定しているGHUnitを選択しました。
アサーションもSenTestingKitよりも断然豊富で、iOSのテストに慣れてきたのもあって、
テストケースはわりと綺麗に書けるようになっていった気がします。(どうしようもないところもありますが。)</p>

<p>使いはじめの時点ではほとんど問題なく、これでいいや、という感じでしたが、GHUnitは使い続けるうちに問題がでてきました。
GHUnitの問題点は、GHUnit自体がiOSアプリとして動くものなので、ターゲットを切り替えたりでどうしてもテスト実行とかがスムーズにできないところ。
GHUnitを2つのチームで使ってみましたが、保守できたのは片方だけだったので、思いの他このコストは高かったみたいです。
実行されないテストに価値はないし、実行時に障害があるのは問題外。同じアプリで動くタイプでBDDスタイルなCedarもこの段階で却下。
あとはテストログの表示がイケてないなーと思うところもありました。この辺りはちょっと弄ってあげればすむ話ではありますが、それでもコストが高め。</p>

<h3>BDD系への転向</h3>

<p>次に触ってみたのはObjective-C版RspecことKiwiです。
GHUnitの時と同じくこの時期に作っていたNLTQuickCheckにはテストにKiwiが使われています。
これはこの段階ではアプリのテストにはまったく利用していなくて、NLTQuickCheckみたいなObjective-C製のライブラリ開発に利用していました。
ライブラリを書いている分にはKiwiはめちゃくちゃいいです。QuickCheckみたいに、ビューが絡まない中で一旦非同期処理などもあまり考えずに済むというのは、テストを書いていく上では快適でした。
ただKiwiはすぐに問題にぶちあたることになります。単純にGHUnitの<code>GHVerifyView</code>がアプリ開発で便利すぎたので、
どうしてもアプリを作ろうと考えるとGHUnitの方が良さそうに思えました。</p>

<h3>ビューテストをするためにGHUnitへ戻る</h3>

<p>そしてGHUnitへ戻ることになります。
結構複雑なビューをもつアプリを作っていたこともあって、ビューをコンポーネント単位で視覚的に動作確認できるのは、ものすごく便利でした。
ただやっぱりXUnit形式で書くのがもはやしんどい感じになっていて、ダルぽよ〜〜〜という状態でした。</p>

<h3>もう一度BDD系へ戻る</h3>

<p>Kiwiに戻ってきました。このあたりできれいなBDD、に対する回答を求めてTheRSpecBookなんかを読み始めました。
TheRSpecBookは非常によい本で、BDDってなんじゃ、みたいなところから実際にこんな感じで進めるといいよ、ということが書いてあって参考になりました。
ただ、じゃあそれiOSアプリ開発でObjective-C使って実践できんの、といわれるとそういう訳ではなく。
最初の方はとにかくSpecを全部書ききってから実装する、みたいなことも試してみましたが、あんまりしっくりこない。(ノッてるとうまくいっていると錯覚はする。)
BDDやるならビヘイビアにドリブンなデベロップしないと意味ないよねー、後付けのBDDとか何の意味があるんや！！！ってことで、OH！やっぱり今回も駄目だったよ。状態に。</p>

<h3>さらにBDD系を突き詰めてみる</h3>

<p>けどここで引き下がるのも勿体ないので、注目度があがってきたSpectaに乗り換えてもう一度チャレンジしてみることに。
<code>theValue</code>を書かなくともよくなった分、やりやすさはあがった気がします。ヤッホーイ！
だいたいモデル層はめちゃくちゃ綺麗にいけるようになってきたんですが・・・・え？View・・・？・・・
とりあえずビューはFrankでカバーするかーという感じになったのですが、結局のところ作ってみてだいたいこんな感じやろ、
という調整が多くなるビューでいちいちテストとか書いてられるか！！！という感じになった。</p>

<h3>原点回帰</h3>

<p>という訳でSenTestingKitまで戻ってきました。KiwiやSpectaが普段の開発で困らない分には動くってことは生でも動くってことです。
僕はあんまり思ってなかったんですが、Blocks使うとスタックトレースが追いにくくなるとかも、ちょいちょい聞くので素直にSenTestingKitがよくね？ということに。
それでもアサーションとかは不足しているので、OCHamcrestとかで補いつつ、非同期テストケースとかもサンプルがたくさんあるし、Githubなんかで拾ってこれば十分かなぁと。
普段はTDDで開発して、ビューは先に動きのプロトタイプを作ってしまって、あとからそれを補強していく、というので全然問題ないと思う。
GHUnitはやっぱり実行コストが高いし、SenTestingKitでいけるならそれでいいじゃない。Cmd+Uがないとテスト書く気起きないっていうか・・・。</p>

<h3>変遷まとめ</h3>

<p>とりあえずまとめておくと僕はこんな感じで使ってきました。
SenTestingKit -> GHUnit -> Kiwi -> GHUnit -> Kiwi -> Specta -> SenTestingKit</p>

<h2>iOS開発でよくあることを踏まえたい</h2>

<p>ここから割とエンジニアリングとは逆方向な内容になります。
ただ僕もエンジニアなので、ディレクターとかデザイナー目線でみると違うかもしれません。</p>

<h3>ビューを優先して組み立てるべき</h3>

<p>お客さんがみたいのはビューですし、ディレクターがみたいのもビューなら、みなさんがアプリ作りたいと思ったとき最初に頭に浮かぶのもビューです。
iOSアプリ作ってていつも思うのが、いくらモデル層をきれいに分離して、きれいなAPIを設計で綺麗なテストができたとしても、
アプリのファーストビューを表示するためにAPIを3つも4つも呼んでその上計算までしなきゃいけない、
とかだとハイパフォーマンスなアプリとは到底言えないですよね。ということ。
「本当の気持ちなんて伝えられるわけないのよ、だって私は、綺麗な世界とは違う世界をいきているんだもの！！！RESTfullとかしらないわよ！！！全部まとめて返してよ！！！」
という感じです。別にiOS限った話ではないですが、クライアントはだいたいそんな感じだと思ってます。(しつこいですがDisったりしてる意図ないです)</p>

<h3>やっぱさ、新しい機能とか試してみたいじゃん？</h3>

<p>ですよね、僕もそう思います。そういうのってスピードが大事じゃないですか。
テスト書いてる暇とかないわ、というのは嘘かサボりだと思いますが、プロトにいちいちテスト書いててもキリがないというのはあると思います。
OS自体のアップデートも早いし、界隈の流行り廃りもまだまだ早いので、保守にあまりにもコストを掛けすぎるのはあまりチャレンジングではないと思います。</p>

<h3>なんか思ってたのと違うんだけど</h3>

<p>よくあることです。諦めてください。
テスト書きまくって苦労しました、みたいなアホな状態になってたら悪いのはちゃんとプロト見せたりしなかった開発者です。</p>

<h3>テストってさ？コストかかるんでしょ？</h3>

<p>開発をサポートするテストは書いても書かなくても開発速度にそこまで差はないと思います。
長期的にみたらテストは書いた方がいいですが。</p>

<h3>人海戦術でなんとかなるっしょ？</h3>

<p>アホか。</p>

<p>と言いたいところですが、そういう場面があることは確かです。</p>

<h3>よくあることまとめ</h3>

<p>まあ、iOS開発に限ったことじゃないですが(2回目ですね)、巻き戻しとか、もっといいの目指そう！とかそういうのはあるし、
それが正しい場面もあるので、あんまり過剰にやりすぎないようにしないとトータルとしてのパフォーマンスが下がるので、それでは意味がない。</p>

<h2>とりあえず１週目の結論として</h2>

<p>普通にアプリ作る分には単体テストはSenTestingKit+拡張マッチャでモデル中心に大丈夫と思えるところまで書け。ということになりました。割と普通です。
カバレッジを100%にあげるとかはかなりしんどいですし、多分リターンは思ったより少ないです。iOSアプリ、試作とかでわりと中変えたりすること多いし。
なのであるリリースラインに向けて、開発者（とディレクター）がよし行ける！と思える分のテストが書ければそれでよいと思います。
もちろん高いことに超したことはないです。例えば何かのSDK作るとかって場面ではカバレッジは意識した方が良いに決まっています。
けれど、無理にカバレッジをあげるよりも、大丈夫！というラインで意識する方が、いろいろ進めやすいと思います。
勘違いのないように言っておきますが、テスト書かなくともいいやろ、という事ではありません。
テストを書くのが目的にならないように、ということです。本質はそこではありません。
設計上テストが楽になるライブラリとかもあればガンガン使えばいいと思います。(CoreDataで言えばMagicalRecodeとか)</p>

<p>そして、いわゆる単体テストでビュー全体の遷移とかをカバーしようとすると相当しんどいです。
このあたりにはFrankやKIFなどのドライバー系のツールをうまく使うとよいと思います。
TheRSpecBookなんかにも出てくる二重のテストイテレーションを真似ましょう。
ただFrankやKIFについてはまだなんか話せるほど知識がないので２週目にご期待くださいということで。</p>

<p>普通に、と言ったのにはちょっと意味があって、テストフレームワークに関して言えば、アプリによって変えるべきです。
ここでいう普通のアプリは例えばユーティリティアプリだったり、何かのサービスのクライアントだったり、という感じです。
iOSでガッツリ動くゲームとか、もっと大規模なものを作りたいなら、いまのところはまだGHUnitの方がよいと思います。
逆にビューの存在しないライブラリを書くのであればBDD系のフレームワークでBDDしても全然OKだと思います。</p>

<h2>まとめ</h2>

<p>こんなこと書いてて僕が言うのもあれなんですが、テスト書くの目的にしちゃうと絶対に終わらないです。
ここのテストしんどそうだなーと思ったら、それはしんどいんだと思います。
時には人海戦術でパターン入れてみる、というのも必要だと思いますし、
結局のところ人が触らないと分からないところも多いですが、それもテストです。</p>
]]></content>
  </entry>
  
</feed>

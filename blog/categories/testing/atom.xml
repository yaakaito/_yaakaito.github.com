<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | yaakaito.org]]></title>
  <link href="http://yaakaito.org/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://yaakaito.org/"/>
  <updated>2013-08-15T04:07:53+09:00</updated>
  <id>http://yaakaito.org/</id>
  <author>
    <name><![CDATA[yaakaito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[いい感じのViewControllerのテストの書き方を考えてみる]]></title>
    <link href="http://yaakaito.org/blog/2013/07/30/view-controller-testing-practice/"/>
    <updated>2013-07-30T02:57:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/07/30/view-controller-testing-practice</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
いろいろあって落ち着いてなかったのでブログ全然書けてなかった！</p>

<p>すごい昔の話しだけど、TwitterみてたらViewControllerのテストがあーだこーだあったので自分の考えを書いてみるよ。
<a href="http://yaakaito.org/blog/2013/05/03/view-controller-testing/">前回は手法的な話</a>だけをしたから、今回は実際どう書くのがいいの的な話。
モックとかの使い方は分かってる前提＆一旦非同期はないものとして考えて書いてみる。</p>

<h3>ViewControllerの実装はほぼプライベートなんだけど的な話</h3>

<p>あってると思う。それで正しい。
ただViewControllerの利用者はフレームワークなので、例えばボタンをタップしたときにどれを呼び出すかというポインタをフレームワークは知っている。
なのでテストがプライベートにアクセスしたりするのは結構正しくて、テストはフレームワークのフリをして書けばよいと思う。</p>

<h3>自作自演っぽくなる</h3>

<p>これに関しては多分テストする単位が小さいんじゃないだろうかと思う。
シナリオ単位でテストするのがよいと思っている。
単純にメソッドが動いてるーはあんまり意味がない感じがする。</p>

<h3>いわゆる単体テストではないのでは説</h3>

<p>あってそう、テストの性質が異なっているのは確か。
そういう場合はテストフレームワークを分けるといいとかって話もあるし、KIFとか使って書くのでもいいんじゃないかな。
ただ、ViewControllerのテスト、というと感覚的にこの2つの中間くらいの話なのかなって気もするので、そこまで大げさにしなくてもいいのかなと思う。
モデルのテストはSenTestingKitだけど、ViewControllerのテストはSpecta、みたいなのもわりとありかなと思ってる。</p>

<h2>というわけで例</h2>

<p>ログイン画面とかで考えてみる。</p>

<h3>ありそうな流れ</h3>

<ul>
<li>ログインが必要になると、ログイン画面が表示される</li>
<li>ユーザーがidとパスワードを入力</li>
<li>サーバーに問い合わせる</li>
<li>成功したら「ログインした」とか出して、画面を戻す</li>
<li>失敗したら「ログインに失敗した」とか出して、もう一度入力させる

<ul>
<li>この時にパスワードはクリアされるとユーザーに優しそう</li>
<li>パスワードが間違っていますとか、赤字で残ってるとユーザーに優しそう</li>
</ul>
</li>
</ul>


<p>みたいな感じですかね。</p>

<h3>テストのシナリオ</h3>

<p>画面だすところは別のViewControllerのテストかと思うので、そこは省く。</p>

<p>こんな感じだろうか。この辺を書いておけばいい感じになるような気がする。</p>

<h4>成功</h4>

<ol>
<li>idとパスワードを入力</li>
<li>サーバーに問い合わせる(フリをする)</li>
<li>ログインに成功する</li>
<li>「ログインした」と表示される</li>
<li>画面を戻す</li>
</ol>


<h4>失敗 => 成功</h4>

<ol>
<li>idとパスワードを入力</li>
<li>サーバーに問い合わせる(フリをする)</li>
<li>ログインに失敗する</li>
<li>「ログイン失敗した」と表示される</li>
<li>エラー画面になる</li>
<li>再度パスワードを入力</li>
<li>サーバーに問い合わせる(フリをする)</li>
<li>ログインに成功する</li>
<li>「ログインした」と表示される</li>
<li>画面を戻す</li>
</ol>


<h4>失敗 => 失敗 => ...</h4>

<ol>
<li>idとパスワードを入力</li>
<li>サーバーに問い合わせる(フリをする)</li>
<li>ログインに失敗する</li>
<li>「ログイン失敗した」と表示される</li>
<li>エラー画面になる</li>
<li>再度パスワードを入力</li>
<li>サーバーに問い合わせる(フリをする)</li>
<li>ログインに失敗する</li>
<li>「ログイン失敗した」と表示される</li>
<li>エラー画面になる</li>
</ol>


<h3>いい感じに見せる方法を考えてみる</h3>

<h4>ヘルパーメソッドを作ってそれっぽく見せる</h4>

<p>スタブに毎回ユーザー入力のフリを直接いれていくのも芸がない(というか意図が伝わり難い)ので、</p>

<p><code>objective-c
[self inputId:@"yaakaito" andPassword:@"hogefuga"];
</code></p>

<p>こういう感じにするとよいんじゃないかな。</p>

<h4>画面が変わる単位でまとめる</h4>

<p>今回の場合はエラー画面なんだけど、毎回エラーと表示された、パスワードがクリアされた、とかアサーションするのはだるい。
こういうことをしたときに、エラー画面になるよ、という風にかけるといいんじゃないかと思う。</p>

<p>```objective-c
[self shouldSeeErrorIf:<sup>{</sup></p>

<pre><code>[self inputId:@"yaakaito" andPassword:@"invalid"];
[self confirm];
</code></pre>

<p>}];
```</p>

<p>こんな感じ。</p>

<h4>状況によってはカテゴリでファサードみたいなのするとよさそう</h4>

<p>上と似たような感じだけど、状況によってはViewControllerをテスト用に拡張するとよいかもしれない。
今回はこっちは考えずに一旦は上の2つでやってみる。</p>

<h3>XUnitと仮定してざっと書いてみる</h3>

<p>```objective-c
- (void)testLoginSuccess {</p>

<pre><code>[self shouldSeeSuccess:^{
    [self inputId:@"yaakaito" andPassword:@"valid-password"];
    [self confirm];
}];
</code></pre>

<p>}</p>

<ul>
<li><p>(void)testLoginFailureAndSuccessOnRetry {</p>

<p>  [self shouldSeeError:<sup>{</sup></p>

<pre><code>  [self userInputId:@"yaakaito" andPassword:@"invalid-password"];
  [self userConfirm];
</code></pre>

<p>  }];</p>

<p>  [self shouldSeeSuccess:<sup>{</sup></p>

<pre><code>  [self inputId:@"yaakaito" andPassword:@"valid-password"];
  [self confirm];
</code></pre>

<p>  }];
}</p></li>
<li><p>(void)testLoginFailureAndFailureOnRetry {</p>

<p>  [self shouldSeeError:<sup>{</sup></p>

<pre><code>  [self userInputId:@"yaakaito" andPassword:@"invalid-password"];
  [self userConfirm];
</code></pre>

<p>  }];</p>

<p>  [self shouldSeeError:<sup>{</sup></p>

<pre><code>  [self inputId:@"yaakaito" andPassword:@"valid-password-2"];
  [self confirm];
</code></pre>

<p>  }];
}</p></li>
</ul>


<p>```</p>

<p>それっぽい！</p>

<h3>XSpecだと仮定してざっと書いてみる</h3>

<p>KiwiやSpectaだと<code>self</code>がないので、テスト用のオブジェクトとか作ればいいんだろうか？
今回は雰囲気がみたいので、コンパイルできないけど<code>self</code>で書いてみる。</p>

<p>```objective-c</p>

<p>describe(@"Login Controller", ^{</p>

<pre><code>describe(@"Login", ^{
    context(@"When login succeed", ^{
        it(@"should display Success message", ^{
            [self shouldSeeSuccess:^{
                [self inputId:@"yaakaito" andPassword:@"valid-password"];
                [self confirm];
            }];
        });
    });

    context(@"When login failed", ^{
        it(@"should display Failure message", ^{
            [self shouldSeeError:^{
                [self userInputId:@"yaakaito" andPassword:@"invalid-password"];
                [self userConfirm];
            }];
        });

        context(@"But, retry it and succeed", ^{
            it(@"should display Success message", ^{
                [self shouldSeeError:^{
                    [self userInputId:@"yaakaito" andPassword:@"invalid-password"];
                    [self userConfirm];
                }];
            });
        });

        context(@"But, retry it and failed", ^{
            it(@"should display Failure message", ^{
                [self shouldSeeError:^{
                    [self userInputId:@"yaakaito" andPassword:@"invalid-password"];
                    [self userConfirm];
                }];
            });
        });
    });
});
</code></pre>

<p>});
```</p>

<p>英語があっているかすごく微妙だけど、なかなかよいんじゃないか？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TestemをJenkinsで動かしてみる]]></title>
    <link href="http://yaakaito.org/blog/2013/05/29/testem-on-jenkins/"/>
    <updated>2013-05-29T03:24:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/05/29/testem-on-jenkins</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
Testem使ってますか？便利ですよね！便利なのはいいんですが、
CIモードやばい！はよくみるけど、CIモードを実際にJenkinsに乗せました、みたいなのを見ないので乗せてみました。</p>

<h2>環境</h2>

<p>残念ながら僕はマシンを余らせてないのでローカルのMacです。</p>

<p>プロジェクトは、昨日から書き始めた <a href="https://github.com/yaakaito/Katana">Katana</a> というのを使います。
TypeScript0.9を使っているので、Typescriptなんかも用意してあげる必要があります。</p>

<h2>導入の仕方</h2>

<p>ちゃんと公式にドキュメントがあります。</p>

<ul>
<li>https://github.com/airportyh/testem/blob/master/docs/use_with_jenkins.md</li>
</ul>


<p>英語読むのがめんどくさい人の為に要約すると、</p>

<ul>
<li>TAPプラグイン入れる</li>
<li><code>testem ci</code>の結果を適当なファイルに書く(<code>tests.tap</code>)</li>
<li>これをTAPプラグインに喰わせる</li>
<li>べんりーーーーーー＾ー＾</li>
</ul>


<p>ってことです。</p>

<h2>準備</h2>

<h3>Jenkinsをインストールします</h3>

<p>適当にやってください。</p>

<h3>ビルド環境を整えます</h3>

<p>とりあえずTestemを動かす為に、まずはnodeが必要です。nvm経由でインストールします。
Macの場合<code>/User/Shared/Jenkins</code>が作られるので、Jenkins氏にユーザーを切り替えて、node環境を構築してTestemをいれます。</p>

<p><code>
$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh
$ source .nvm/nvm.sh
$ nvm install 0.8
$ nvm use 0.8
$ npm install -g testem
</code></p>

<p><code>testem launchers</code>してみます。</p>

<p>```
$ testem launchers
Have 5 launchers available; auto-launch info displayed on the right.</p>

<p>Launcher      Type          CI  Dev</p>

<hr />

<p>Chrome        browser       ✔         <br/>
Firefox       browser       ✔         <br/>
Safari        browser       ✔         <br/>
Opera         browser       ✔         <br/>
PhantomJS     browser       ✔         <br/>
```</p>

<p>とりあえずこんな感じになればOkです。</p>

<p>他にも必要なものを入れていきます。
gruntとか使ってるなら</p>

<p><code>
$ npm install -g grunt-cli
</code></p>

<p>とかやっておきます。</p>

<h3>Jenkinsにプラグインをそろえる</h3>

<p>今回は Tapプラグインとgitプラグインを準備します。</p>

<p>この辺です。</p>

<p><img src="/images/jenkins-plugins.png"></p>

<h3>Gitの設定をする</h3>

<p>適当にJenkinsのgitをセットアップします。</p>

<p><code>
$ git config --global user.email yaakaito+jenkins@yaakaito.org
$ git config --global user.name yaakaito+jenkins
</code></p>

<h2>ジョブの構築</h2>

<p>準備も整ったの、ジョブを作ります。<code>Build a free-style software project</code> です。</p>

<p><img src="/images/jenkins-setting-testem.png"></p>

<h3>コード管理</h3>

<p>githubから取ってくるようにします</p>

<h3>ビルド</h3>

<p>ここで<code>testem ci</code>するようにします。npmを使っているので、それらも実行します。</p>

<p><code>
source ~/.nvm/nvm.sh
nvm use 0.8
npm install
testem ci -p 12333 &gt; tests.tap
</code></p>

<h3>ビルド後の処理</h3>

<p>TAPプラグインで、出力した<code>tests.tap</code>を喰います</p>

<h2>ビルドしてみる</h2>

<p>やったーーー</p>

<p><img src="/images/testem-tap-result.png"></p>

<h2>うまくいかないとき</h2>

<p>workspaceで<code>testem ci</code>してみたり、ログ見てなんとかする。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS部で話したViewControllerのテストとかのまとめ]]></title>
    <link href="http://yaakaito.org/blog/2013/05/03/view-controller-testing/"/>
    <updated>2013-05-03T20:20:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/05/03/view-controller-testing</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
この前iOS部というイベントでiOSテストの話をしたんですが、ViewControllerのテストで反応が結構あったのと、
ちゃんと説明できてない部分があったなーということで、文章としてまとめようと思います。</p>

<p>iOS部でやったものからコードが変わってますが、やりたいことは一緒なので、iOS部に参加されていた方は適宜変換して読んでもらえればと思います。</p>

<h2>ツールとか</h2>

<p>SenTestingKit + OCMockです。
OCMockの解説はiOS部では初めての方が居たので軽く説明しましたが、これを読んでる方はオンラインかと思いますので、分からなければググってください。
<a href="http://yaakaito.hatenablog.com/entry/2012/06/26/013813">僕が古い方のブログで書いたもの</a>もあるので、そちらを読まれるとよいかもしれません。</p>

<h2>ViewControllerの役割</h2>

<p>最初にぶっちゃけておくとViewControllerのテストはしんどいです。できれば書きたくない。
なのでViewControllerが何なのか、きちんと整理しておきましょう。</p>

<p>僕はViewControllerって、</p>

<ul>
<li>ビューからやってきたユーザー操作の実際の処理</li>
<li>モデルへの操作、モデルからのイベントなんかの受け取り、ビューへの反映</li>
</ul>


<p>この2つ(3つ？)にフォーカスしてるべきだと思ってます。
なのでViewControllerって基本的にはステートとかをもっちゃ駄目で、そういうのはロジックとしてモデルで管理されるべきだと思います。</p>

<p>ここをちゃんと意識して書いていくとViewControllerのテストが結構楽になります。
モデルのテストはViewControllerと比較して圧倒的に楽なので、そちらでやりましょう。</p>

<h2>モックを使いまくります</h2>

<p>OCMockなんかのモックライブラリは便利でよく使いますが、僕はほとんどViewControllerのテストの為に使います。
ある程度モデルが完成した段階であれば、モックを使わずに記述していくこともまあ出来るんですが、
例えば「サーバーとの通信に失敗したときの動作」、みたいなのをテストするときに大抵めんどくさいことになります。
モックを使っておけばここは一行でサッパリと書いてしまったり出来るので、基本的には全部モックを差し込みます。</p>

<p>モデル自体が単純なバリューを表すものであればわざわざモックする必要もないかなーとは思うので、まあそのあたりは好みでいいかなと思います。</p>

<p>あとはUILabelとかUITextFieldとか、Storyboardとか使ってるとコードから生成されないものですね。
別にこのオブジェクト自体を作って自分でセットしてあげるようにしてもいいんですが、
さっきと同じような理由で、「ユーザーがHelloWorldと入力したときの動作」、みたいなのをテストするときに大抵めんd（ry</p>

<p>というわけで僕はViewControllerは基本的にモックを使って書いています。</p>

<h2>プライベートとかreadonlyなプロパティに対するモックの差し込み</h2>

<p>テストを始める前に、予備知識として知っている必要のある項目です。
これはViewController以外のテストでも応用できると思うので、わけで書きます。
正しいけどきわどいので、似たようなことをアプリ側でやるのはやめたほうがいいと思います。</p>

<p>これは無名カテゴリを使って、プロパティの宣言を上書きすることで実現します。</p>

<p>例えば</p>

<p>```objective-c</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>@interface MIViewController : UIViewController</p>

<p>@end
```</p>

<p>```objective-c</p>

<h1>import "MIViewController.h"</h1>

<p>@interface MIViewController ()
@property (weak, nonatomic) IBOutlet UILabel *hogeLabel; // &lt;- Stroyboardから作られる
@end</p>

<p>@implementation MIViewController</p>

<p>@end
```</p>

<p>という感じに<code>.m</code>の方でプライベートなプロパティとして宣言するとかよくあると思います。
この無名カテゴリをテストの方にも持ってきます。</p>

<p>```objective-c
@interface MIViewController ()
@property (weak, nonatomic) IBOutlet UILabel *hogeLabel;
@end</p>

<p>@implementation MIViewControllerTests</p>

<ul>
<li>(void)testExample
{
  MIViewController *viewController = [[MIViewController alloc] init];
  viewController.hogeLabel = nil; // &lt;- 通る
}</li>
</ul>


<p>@end
```</p>

<p>こうするとパブリックのようにメッセージを送ることが出来るので、モックに差し替えたりできるわけです。きわどい感じがしますね。</p>

<p>これは完全に雑感ですけど、標準ライブラリでもまあ、よく見ると <code>@property(nonatomic, readonly, retain)</code> みたいな宣言をしてあるものがあって、内部的に<code>property(nonatomic, retain)</code>になってたりするんじゃないかなーと思えるものもあるので、まあまあまあ。</p>

<h2>というわけでテストを書きましょう</h2>

<p>前置きが長くなりましたが、そろそろViewControllerのテストの話をしましょう。</p>

<p>サンプルとしてこんな感じの画面を使います。</p>

<p><img src="/images/viewcontroller-testing-sample.png" width="240"></p>

<p>この画面はモーダルとして呼び出されて、メモを作成&amp;編集できる画面です。
以下のような要件で作られています。</p>

<ul>
<li>タイトルと本文を入力できる</li>
<li>「Done」を押したら、入力したタイトルと本文からメモオブジェクトを作って、delegateへ渡す。</li>
<li>すでに生成されているメモが渡されたら、それを初期値として表示する。</li>
</ul>


<p>実際の実装としては、</p>

<ul>
<li>新規と編集の処理を同じにするために、このViewControllerはメモオブジェクトを作成せずに、外から渡されたメモオブジェクトを更新するようになっています。</li>
<li>ユーザーの入力に影響せず、viewWillDissapearでdelegateを呼び出すようになっています。</li>
</ul>


<p>メモオブジェクトは<code>title</code>と<code>body</code>を持っています。</p>

<p>```objective-c
@interface TBMemo : NSObject
@property (strong, nonatomic) NSString <em>titile;
@property (strong, nonatomic) NSString </em>body;</p>

<ul>
<li>(id)initWithTitle:(NSString <em>)title body:(NSString </em>)body;
@end
```</li>
</ul>


<p>このViewControllerはこんな感じのインターフェイスを持っています。ここではあえて実装は出さないことにします。</p>

<p>```objective-c
@protocol TBMemoEditDelegate
- (void)editViewController:(TBMemoEditViewController <em>)viewController didFinishEditMemo:(TBMemo </em>)memo;
@end</p>

<p>@interface TBMemoEditViewController : UIViewController
@property (weak, nonatomic) NSObject<TBMemoEditDelegate> <em>delegate;
@property (weak, nonatomic) TBMemo </em>editingMemo;
@end
```</p>

<p><code>editingMemo</code>はこのViewControllerが更新するメモオブジェクトでこのViewControllerを呼び出す際に外からセットされます。
またプライベートとして、<code>.m</code>の方でStoryboardから生成される2つのUIを持っています。</p>

<p><code>objective-c
@interface TBMemoEditViewController ()
@property (weak, nonatomic) IBOutlet UITextField *titleTextField;
@property (weak, nonatomic) IBOutlet UITextView *bodyTextView;
@end
</code></p>

<p>今回テストした方がよさそうなのは、</p>

<ul>
<li>viewWillDisappearで、入力したタイトルと本文からメモオブジェクトを更新して、delegateへ渡す。</li>
<li>viewWillAppearで、渡したメモの内容を初期値として設定する。</li>
</ul>


<p>の2つです。</p>

<p>「done」を押した時にどうこうというのは、これは単純に「モーダルを閉じる」とだけの実装であるべきなので、テストする価値が薄いですし、
アプリを調整していく仮定で変更される可能性の高いものなので(やっぱりpushがいいとか)、安全に変更を加えるためのテストが、逆に足を引っ張ってしまいます。</p>

<p>ではテストを書いていきましょう。</p>

<h3>setup</h3>

<p>まずは<code>setup</code>で<code>UITextField</code>なんかをモックに差し替えていきます。</p>

<p>```objective-c</p>

<h1>import "TBMemoEditViewController.h"</h1>

<h1>import "OCMock.h"</h1>

<p>@interface TBMemoEditViewController ()
@property (weak, nonatomic) IBOutlet UITextField <em>titleTextField;
@property (weak, nonatomic) IBOutlet UITextView </em>bodyTextView;
@end</p>

<p>@implementation TBMemoEditViewControllerTests {</p>

<pre><code>TBMemoEditViewController *viewController;
id mockTitleTextField;
id mockBodyTextView;
</code></pre>

<p>}</p>

<ul>
<li><p>(void)setUp {
  [super setUp];</p>

<p>  viewController = [[TBMemoEditViewController alloc] init];</p>

<p>  // UITextFieldを差し替える
  mockTitleTextField = [OCMockObject mockForClass:[UITextField class]];
  viewController.titleTextField = mockTitleTextField;</p>

<p>  // UITextViewを差し替える
  mockBodyTextView = [OCMockObject mockForClass:[UITextView class]];
  viewController.bodyTextView = mockBodyTextView;</p></li>
</ul>


<p>}
@end
```</p>

<p>こんな感じ、これで準備が整いました。</p>

<h3>viewWillAppearで渡したメモの内容を初期値として設定する</h3>

<p>まずはこっちを書いてみましょう。
<code>editingMemo</code>が呼び出し元からセットされますが、この場合はテストケースが呼び出し元になるので、これをセットします。</p>

<p>```objective-c</p>

<ul>
<li>(void)testUpdateViewWithEditingMemoObjectInViewWillAppear {
  TBMemo *editingMemo = [[TBMemo alloc] initWithTitle:@"TITLE" body:@"BODY"];
  viewController.editingMemo = editingMemo;
}
```</li>
</ul>


<p>次にこのメモオブジェクトの値が<code>titleTextField</code>と<code>bodyTextView</code>にそれぞれ、<code>text</code>経由でセットされるはずなので、これをOCMockで<code>expect</code>します。</p>

<p>```objective-c
- (void)testUpdateViewWithEditingMemoObjectInViewWillAppear {</p>

<pre><code>TBMemo *editingMemo = [[TBMemo alloc] initWithTitle:@"TITLE" body:@"BODY"];
viewController.editingMemo = editingMemo;

[[mockTitleTextField expect] setText:@"TITLE"];
[[mockBodyTextView expect] setText:@"BODY"];
</code></pre>

<p>}
```</p>

<p><code>viewWillAppear</code>を呼び出して、</p>

<p>```objective-c
- (void)testUpdateViewWithEditingMemoObjectInViewWillAppear {</p>

<pre><code>TBMemo *editingMemo = [[TBMemo alloc] initWithTitle:@"TITLE" body:@"BODY"];
viewController.editingMemo = editingMemo;

[[mockTitleTextField expect] setText:@"TITLE"];
[[mockBodyTextView expect] setText:@"BODY"];

[viewController viewWillAppear:NO];
</code></pre>

<p>}
```</p>

<p><code>titleTextField</code>と<code>bodyTextView</code>に<code>text</code>を経由して値がセットされたかを<code>verify</code>します。</p>

<p>```objective-c
- (void)testUpdateViewWithEditingMemoObjectInViewWillAppear {</p>

<pre><code>TBMemo *editingMemo = [[TBMemo alloc] initWithTitle:@"TITLE" body:@"BODY"];
viewController.editingMemo = editingMemo;

[[mockTitleTextField expect] setText:@"TITLE"];
[[mockBodyTextView expect] setText:@"BODY"];

[viewController viewWillAppear:NO];

[mockTitleTextField verify];
[mockBodyTextView verify];
</code></pre>

<p>}
```</p>

<p>これでよさそうです。案外、簡単でしたね。</p>

<h3>viewWillDisappearで、入力したタイトルと本文からメモオブジェクトを更新して、delegateへ渡す</h3>

<p>次はこっちです。これはdelegateの扱い方で、大きく分けて2つ方法があります。</p>

<p>1つめはdelegateのモックオブジェクトを使うパターン、そしてテストケース自身がdelegateになるパターンです。
これは結構好みだと思うので、好きな方を採用すればよいかと思います。</p>

<h4>共通部分</h4>

<p>まずは共通なところ、<code>titleTextField</code>と<code>bodyTextView</code>をスタブして、<code>TITLE</code>と<code>BODY</code>が入力された状態を再現します。</p>

<p>```objective-c
- (void)testFinishDelegateWithUpdatedMemoObjectInViewWillDisappear{</p>

<pre><code>// ユーザー入力を再現
[[[mockTitleTextField stub] andReturn:@"TITLE"] text];
[[[mockBodyTextView stub] andReturn:@"BODY"] text];
</code></pre>

<p>}
```</p>

<p>こうすると、<code>titleTextField.text</code>は<code>TITLE</code>が入っている状態になりますね。</p>

<h4>delegateのモックオブジェクトを使うパターン</h4>

<p>OCMockでプロトコルからモックのdelegateを作り、セットします。</p>

<p><code>objective-c
id mockDelegate = [OCMockObject mockForProtocol:@protocol(TBMemoEditDelegate)];
viewController.delegate = mockDelegate;
</code></p>

<p>このモックの<code>editViewController:didFinishEditMemo:</code>が、更新されたメモオブジェクトを持って呼び出される事を期待します。
これには<code>[OCMArg checkWithBlock:]</code>を利用します。</p>

<p>```objective-c
[[mockDelegate expect] editViewController:viewController didFinishEditMemo:[OCMArg checkWithBlock:<sup>BOOL(id</sup> obj) {</p>

<pre><code>TBMemo *memo = (TBMemo *)obj;
return [memo.titile isEqualToString:@"TITLE"] &amp;&amp; [memo.body isEqualToString:@"BODY"];
</code></pre>

<p>}]];
```</p>

<p>そして、メモオブジェクトをセットして、<code>viewWillDisappear</code>を呼び、<code>verify</code>します。</p>

<p>```objective-c
TBMemo *edtingMemo = [[TBMemo alloc] init];
viewController.editingMemo = edtingMemo;</p>

<p>[viewController viewWillDisappear:NO];</p>

<p>[mockDelegate verify];
```</p>

<p>全体としてこんなテストになります。</p>

<p>```objective-c
- (void)testFinishDelegateWithUpdatedMemoObjectInViewWillDisappear{</p>

<pre><code>[[[mockTitleTextField stub] andReturn:@"TITLE"] text];
[[[mockBodyTextView stub] andReturn:@"BODY"] text];

id mockDelegate = [OCMockObject mockForProtocol:@protocol(TBMemoEditDelegate)];
[[mockDelegate expect] editViewController:viewController didFinishEditMemo:[OCMArg checkWithBlock:^BOOL(id obj) {
    TBMemo *memo = (TBMemo *)obj;
    return [memo.titile isEqualToString:@"TITLE"] &amp;&amp; [memo.body isEqualToString:@"BODY"];
}]];
viewController.delegate = mockDelegate;

TBMemo *editingMemo = [[TBMemo alloc] init];
viewController.editingMemo = editingMemo;

[viewController viewWillDisappear:NO];

[mockDelegate verify];
</code></pre>

<p>}
```</p>

<h4>テストケース自身がdelegateになるパターン</h4>

<p>こっちはiOS部では説明してなかったです。(すればよかった)</p>

<p>まずは、テストケースがDelegateを実装することを宣言します。</p>

<p><code>objective-c
@interface TBMemoEditViewControllerTests () &lt;TBMemoEditDelegate&gt;
@end
</code></p>

<p>テストケースにdelegateを実装します。渡ってきたメモオブジェクトを<code>editedMemo</code>にとっておきます。</p>

<p>```objective-c
- (void)editViewController:(TBMemoEditViewController <em>)viewController didFinishEditMemo:(TBMemo </em>)memo {</p>

<pre><code>editedMemo = memo;
</code></pre>

<p>}
```</p>

<p>自身をdelegateにして、<code>viewWillDisappear</code>を呼びます。</p>

<p>```objective-c
viewController.delegate = self;</p>

<p>TBMemo *edtingMemo = [[TBMemo alloc] init];
viewController.editingMemo = edtingMemo;</p>

<p>[viewController viewWillDisappear:NO];
```</p>

<p><code>editedMemo</code>に更新されたメモオブジェクトがあるはずなので、これをアサートします。</p>

<p><code>objective-c
STAssertEqualObjects(editedMemo.titile, @"TITLE", nil);
STAssertEqualObjects(editedMemo.body, @"BODY", nil);
</code></p>

<p>これでよさそうです。全体としてはこんな感じ。</p>

<p>```objective-c
- (void)testFinishDelegateWithUpdatedMemoObjectInViewWillDisappearWithSelfDelegate {</p>

<pre><code>[[[mockTitleTextField stub] andReturn:@"TITLE"] text];
[[[mockBodyTextView stub] andReturn:@"BODY"] text];

viewController.delegate = self;

TBMemo *editingMemo = [[TBMemo alloc] init];
viewController.editingMemo = editingMemo;

[viewController viewWillDisappear:NO];

STAssertEqualObjects(editedMemo.titile, @"TITLE", nil);
STAssertEqualObjects(editedMemo.body, @"BODY", nil);
</code></pre>

<p>}</p>

<ul>
<li>(void)editViewController:(TBMemoEditViewController <em>)viewController didFinishEditMemo:(TBMemo </em>)memo {
  editedMemo = memo;
}
```</li>
</ul>


<p>どうでしょう、僕は前者の方が好みですが、分かりやすいのは多分後者ですかね。</p>

<h2>まとめ</h2>

<p>こんな感じのことを解説しました。
ちゃんと分割していけば、複雑になるかもしれないですが、大抵はこのパータンで事足りるかなーと思います。</p>

<p>非同期の終了をまってからBlocksでほげほげ、とかはOCMockの<code>andDo:</code>とかでうまい感じに表現できますし、<code>NSNotification</code>とか使う場合にも結構素直に書けます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近TypeScript書くときに使うGrunt+Testem+αのテンプレ]]></title>
    <link href="http://yaakaito.org/blog/2013/04/26/typescript-proj-template/"/>
    <updated>2013-04-26T03:50:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/26/typescript-proj-template</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
TypeScript0.9のpreviewがリリースされましたね！最近はもうJavaScriptもCoffeeScriptも自発的には書ていないです。
仕事とかでも結構TypeScriptでプロト作っては捨て、みたいなことをやってるんですが、
そうしてるうちにプロジェクトのテンプレ大体決まってきたなーという感じがしたのでまとめた。</p>

<p><a href="https://github.com/yaakaito/typescript-proj">typescript-proj</a></p>

<h2>搭載しているもの</h2>

<ul>
<li>Gruntのカスタムタスク</li>
<li>Testem Mocha+chai でのテスト環境</li>
<li>jQuery.d.ts 1.9</li>
<li>.gitignoreとか.gitattributes</li>
<li>package.jsonとcomponents.json入り</li>
</ul>


<p>中核はGrunt+Testem+Bowerな感じ。yoでよくね感すごい。</p>

<h2>使い方</h2>

<p>完全に個人用にまとめてるだけなので、cloneして<code>.git</code>消して使ってる。</p>

<p><code>
$ git clone https://github.com/yaakaito/typescript-proj.git proj
$ rm -rf proj/.git
</code></p>

<p>npmとbowerを使ってるので、とりあえずテンプレ分を取ってくる</p>

<p><code>
$ npm install
$ bower install
</code></p>

<h2>プロジェクト構成</h2>

<p>セットアップしてから、とりあえず <code>grunt generate</code> するとこんな感じになる。</p>

<p><code>
tree -L 2 --dirsfirst
.
├── build
│   ├── index.js
│   └── index.min.js
├── compiled
│   ├── src
│   └── test
├── components
│   └── jquery
├── d.ts
│   ├── chai.d.ts
│   ├── jquery.d.ts
│   └── mocha.d.ts
├── node_modules
│   ├── grunt
│   ├── grunt-contrib-clean
│   ├── grunt-contrib-concat
│   ├── grunt-contrib-connect
│   ├── grunt-contrib-copy
│   ├── grunt-contrib-uglify
│   ├── grunt-regarde
│   └── grunt-typescript
├── public
│   ├── javascript
│   └── index.html
├── res
│   └── index.html
├── src
│   └── index.ts
├── test
│   └── index.ts
├── Gruntfile.coffee
├── README.md
├── component.json
├── package.json
└── testem.json
</code></p>

<p>上から説明していくと</p>

<h3>build</h3>

<p>連結済み + minify済みのJSが置かれるところ。
これはリリースの配布にも使うことを前提にしているので、gitignoreはされてない。</p>

<h3>compiled</h3>

<p>単純にコンパイルした状態のJSが置かれるところ。
中間ファイルみたいなものなので、gitignoreの対象。</p>

<h3>components</h3>

<p>bowerで入るモジュール。gitginore。</p>

<h3>d.ts</h3>

<p>TypeScript用の<code>d.ts</code>を置くところ。コードとほぼ同じ扱い。
微妙に違うけど、vendorみたいなもの。ドットは好みだと思うのでご自由に。</p>

<p>デフォルトでは jQueryと mocha、chaiを入れてある。
jQueryはまあなんだかんだで使う(使わされる)のでデフォで入れてある感じ。
mochaとchaiはテスト用、testemはそこまでは面倒みてくれないので自分で置く。</p>

<p><code>d.ts</code>の追加は僕は<a href="http://www.tsdpm.com/">tsdpm</a>から探して<code>tsd</code>で取ってきて適当に配置してる。</p>

<h3>node_modules</h3>

<p>npm。主にgrunt系がインストールされる。特に書く事ない。</p>

<h3>public</h3>

<p>プレビューモードでルートにするところ。gh-pagesとか作りたいときはここに入るように作るんだけど、<code>index.html</code>の元ファイルとかは<code>res</code>にある。</p>

<h3>res</h3>

<p>TypeScript以外のものを置くところ。上の<code>index.html</code>とか、cssとか置いたりする。
compassとかをデフォルトで入れてないんだけど、作るならここに入れる事になると思う。</p>

<h3>src</h3>

<p>TypeScript、特に言う事ない。</p>

<h3>test</h3>

<p>テスト、特に言う事ない。</p>

<h3>Gruntfile.coffee</h3>

<p>Gruntの設定ファイル。詳しくは後で。</p>

<h3>README.md</h3>

<p>とりあえずデフォルトでテンプレートのREADME入れてる。</p>

<h3>component.json package.json</h3>

<p>bowerとnpm。特に言う事ない。</p>

<h3>testem.json</h3>

<p>Testemの設定ファイル。詳しくは後で。</p>

<h2>Gruntのタスク</h2>

<p>ビルド系は微妙に分かり難いんだけど、基本的に<code>compile</code> <code>build</code> <code>generate</code>の3種類を定義して使ってる。
それにプラスして<code>preview</code>というのを作っていて、配信サーバーを立てて、ファイル更新されたらビルドしなおす感じ。
LiveReloadとかはなくともよいかなーと思ってるので作ってない。</p>

<h3>compile</h3>

<p>単純にTypeScriptをコンパイルするだけ。<code>src</code> <code>test</code> 共にコンパイルして <code>compiled</code> へ。
TypeScriptだと<code>index.ts</code>だけコンパイルするようにして、<code>index.ts</code>で全部referenceでもいいと思うので使い分ける。</p>

<p>```coffeescript
typescript:</p>

<pre><code>compile:
    src: ['src/**/*.ts']
    dest: 'compiled'
    # src: ['src/index.ts']
    # dest: 'compiled/src/index.ts'
    options:
        module: 'commonjs'
        target: 'es5'
        # sourcemap: true
        # declaration: true
test:
    src: ['test/**/*.ts']
    dest: 'compiled'
    options:
        module: 'commonjs'
        target: 'es5'
</code></pre>

<p>grunt.registerTask 'compile', ['typescript']
```</p>

<h3>build</h3>

<p>concat + uglifyでminify作ったりする。作ったのは <code>build</code> に入る。</p>

<p>```coffeescript
concat:</p>

<pre><code>dist:
    src: ['compiled/src/**/*.js']
    dest: 'build/index.js'
options:
    separator: ';'
</code></pre>

<p>uglify:</p>

<pre><code>min:
    files:
        'build/index.min.js': ['build/index.js']
###
options:
    mangle:
        expect: ['jQuery']
    sourceMap: 'build/source-map.js'
###
</code></pre>

<p>grunt.registerTask 'build', ['concat', 'uglify']
```</p>

<h3>generete</h3>

<p><code>public</code>を作る為のコマンド、用途に合わせて書き足していく。(インデントきもい)</p>

<p>```coffeescript
copy:</p>

<pre><code>public:
    files: [
            expand: true
            cwd: 'build'
            src: '**'
            dest: 'public/javascript'
        ,
            expand: true
            cwd: 'res'
            src: '**'
            dest: 'public/'
    ]
</code></pre>

<p>grunt.registerTask 'generate', ['compile', 'build', 'copy:public']
```</p>

<h3>preview</h3>

<p>connect + regarde。regardeでgenerateするようにしてる。</p>

<p>```coffeescript
connect:</p>

<pre><code>preview:
    options:
        port: 9000
        base: 'public'
</code></pre>

<p>regarde:</p>

<pre><code>src:
    files: ['src/**/*.*']
    tasks: ['generate']
</code></pre>

<p>grunt.registerTask 'preview', ['generate', 'connect:preview', 'regarde']
```</p>

<p>Gruntfileは状況に合わせて柔軟に変えていく感じにしたいので、デフォルトは<code>*</code>指定が多め。</p>

<h2>Testem</h2>

<p>テストは最近は全部Testemでやってる。BusterJS派だったけど、BusterJSはちょっとトロい感じがする・・・。</p>

<p>```javascript
{</p>

<pre><code>"framework" : "mocha+chai",
"before_tests" : "grunt compile",
"src_files" : [
    "src/**/*.ts",
    "test/**/*.ts"
],
"serve_files" : [
    "compiled/src/**/*.js",
    "compiled/test/**/*.js"
]
</code></pre>

<p>}
```</p>

<p>基本は <code>src</code> <code>test</code> を監視して、あとはGruntに任せてる。</p>

<h2>その他</h2>

<p>適当に<code>index.ts</code>を<code>src</code> <code>test</code> 共に吐いているので、忘れかけたら参考にするなどして書く。
<code>.js</code>は最初からバイナリ扱いしているので安心してください！！！</p>

<h2>まとめ</h2>

<p>CoffeeScriptとかも大体同じ感じで出来ると思うので、それなりに汎用性ある感じだと思う。(やろうとしたけど書かない事に気づいてやってない)
<a href="https://github.com/yaakaito/Gruntfile">Gruntfileだけ個別</a>にまとめたりもしてるので、適当に組み合わせるとよいのでは。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS用テスティングサーバー NLTHTTPStubServer 0.4 を公開しました]]></title>
    <link href="http://yaakaito.org/blog/2013/04/22/release-nlt-http-stub-server-0-4-0/"/>
    <updated>2013-04-22T00:51:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/22/release-nlt-http-stub-server-0-4-0</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
<a href="https://github.com/yaakaito/NLTHTTPStubServer">NLTHTTPStubServer</a> を0.4にアップデートしました。</p>

<p>最初にごめんなさいしておかなければいけないことがあります。</p>

<h2>0.2.x 系との互換性がありません</h2>

<p>ごめんなさい。0.1.x 0.2.x 系でのバグフィックスなどは、半年くらいは受け付けようと思っていますので、気軽にご連絡ください。</p>

<h2>NLTHTTPStubServerって何</h2>

<p>簡単に言えば、レスポンス登録を動的にできるHTTPサーバー for iOSです。
HTTP通信をするiOSアプリはたくさんあると思うのですが、これのテストを書く為に開発されました。</p>

<p>仕組みとしては結構単純で、ローカルにHTTPサーバーを立てて、そこにレスポンスを登録し、アプリ(HTTPClient)でそこへアクセスする、という感じです。
例えば <code>/api/v1/fake</code> は <code>fake.json</code> を返してほしい、というケースであれば、</p>

<p><code>objective-c
[[[server expect] forPath:@"/api/v1/fake"] andJSONResponseResource:@"fake" ofType:@"json"];
</code></p>

<p>という風に記述すると、クライアントからここにアクセスしたときに、<code>fake.json</code>が返されます。
NSURLConnectionを使って書くと、</p>

<p>```objective-c
NSURL *api = [NSURL URLWithString:@"http://localhost:12345/api/v1/fake"];
[NSURLConnection sendAsynchronousRequest:[NSURLRequest requestWithURL:api]</p>

<pre><code>                               queue:[[NSOperationQueue alloc] init]
                   completionHandler:^(NSURLResponse *res, NSData *data, NSError *err) {
                     // dataに fake.json が返ってくる
                   }];
</code></pre>

<p>```</p>

<p>このように<code>http://localhost:12345/api/v1/fake</code>へアクセスすると、<code>fake.json</code>が返ってきます。</p>

<p>カテゴリを使ってレスポンスを入れ替えたりするライブラリなんかもありますが、それと比べて、副作用が起こりにくいのが特徴です。
またモックを差し込む、という行為を必要とせず、APIのエンドポイントを入れ替えるだけでよいので、実装自体に手をいれる必要もほとんどありません。</p>

<h2>セットアップ</h2>

<p>Cocoapodsでのセットアップが簡単です。</p>

<p><code>
pod 'NLTHTTPStubServer'
</code></p>

<p><code>NLTHTTPStubServer.h</code>をインポートして使います。</p>

<p>```objective-c</p>

<h1>import "NLTHTTPStubServer"</h1>

<p>```</p>

<h2>機能</h2>

<h3>サーバーの取得</h3>

<p>テスト用サーバーは <code>sharedServer</code> でインスタンスを取得することができます。</p>

<p><code>objective-c
NLTHTTPStubServer *server = [NLTHTTPStubServer sharedServer];
</code></p>

<p><code>clear</code>で登録されているレスポンスをすべて削除し、綺麗な状態にすることができます。</p>

<p><code>objective-c
[server clear];
</code></p>

<p><code>tearDown</code>などでお使いください。</p>

<h3>expect / stub /verify</h3>

<p>0.2.x まででサポートされていた<code>stub</code>が廃止されました。<code>stub</code>というAPIは存在しますが、動作が異なっています。</p>

<h4>expect</h4>

<p><code>expect</code>はレスポンスを登録する一般的な方法です。</p>

<p><code>objective-c
[[server expect] forPath:@"/path"];
</code></p>

<p>このように記述すると、<code>/path</code>へレスポンスが登録されます。
これに対して、メソッドチェインの形式で、必要なものを付加していきます。</p>

<p><code>objective-c
[[[server expect] forPath:@"/api/v1/fake"] andJSONResponseResource:@"fake" ofType:@"json"];
</code></p>

<p><code>expect</code>で登録されたレスポンスは、一度アクセスを受けてそれが返されると、自動的に消化さた状態になります。
<code>/path</code>へ二度アクセスしても、レスポンスは返されません。(例外が投げられます。)</p>

<h4>verify</h4>

<p><code>expect</code>されたものは、<code>verify</code>によって、それが利用されたかを検証することができます。</p>

<p>```objective-c
[[server expect] forPath:@"/path"];</p>

<p>// http://localhost:12345/path へアクセスするコード</p>

<p>[server verify]; // /path へきちんとアクセスされているかを検証
```</p>

<h4>stub</h4>

<p><code>stub</code>は<code>expect</code>と同じインターフェイスを持ちますが、永続的に登録されるレスポンスです。</p>

<p><code>objective-c
[[server stub] forPath:@"/path"];
</code></p>

<p>これは <code>http://localhost:12345/path</code> へアクセスを受けそれが返されても、<strong>消化された状態になりません</strong>。
また、<code>verify</code>による検証では、<code>stub</code>で登録されたものは<strong>無視されます</strong>。</p>

<h3>NLTPath</h3>

<p><code>NLTPath</code>は複雑なURLを表現するために使われる物で、現状では特にGETパラメーターに対応するための機能です。</p>

<p>```objective-c
[[server expect] forPath:[NLTPath pathWithPathString:@"/fake" andParameters:@{</p>

<pre><code>    @"k1" : @"v1",
    @"k2" : @"v2",
</code></pre>

<p>}]];
```</p>

<p>このような記述をした場合、このレスポンスは <code>/fake?k1=v1&amp;k2=v2</code> または <code>/fake?k2=v2&amp;k1=v1</code> にマッチします。</p>

<h4>anyValue</h4>

<p><code>[NLTPath anyValue]</code>を使う事で、値部分をワイルドカードにすることができます。</p>

<p>```objective-c
[[server expect] forPath:[NLTPath pathWithPathString:@"/fake" andParameters:@{</p>

<pre><code>    @"k1" : [NLTPAth anyValue]
</code></pre>

<p>}]];
```</p>

<p>これは、<code>/fake?k1=hogeeeeeeee</code> や <code>/fake?k1=fugaaaaaaaaaa</code> にマッチします。</p>

<h3>付加可能な項目</h3>

<p>メソッドチェインにより付加できる事ができる項目は以下です。</p>

<h4>HTTP Method</h4>

<p><code>objective-c
[[server stub] forPath:@"/fake" HTTPMethod:@"Post"];
</code></p>

<h4>Status code</h4>

<p><code>objective-c
[[[server stub] forPath:@"/fake"] andStatusCode:200];
</code></p>

<h4>Simulate waiting</h4>

<p>タイムアウトなどを再現することができます。</p>

<p><code>objective-c
[[[server stub] forPath:@"/fake"] andProcessingTime:10.0f];
</code></p>

<h4>Checking POST body</h4>

<p>POSTされた内容を調べる事が出来ます。</p>

<p>```objective-c
[[[server expect] forPath:@"/fake" HTTPMethod:@"POST"] andCheckPostBody:<sup>(NSData</sup> *postBody) {</p>

<pre><code>    NSString *postBodyString = [that toString:postBody];
    GHAssertEqualStrings(postBodyString, @"POST_BODY", nil);
}];
</code></pre>

<p>```</p>

<h4>Supporting Content-Types</h4>

<p>自動的にContentTypeを付加してくれるものは以下です。</p>

<p><code>objective-c
[[[server expect] forPath:@"/fake"] and{ContentType}Response...]
</code></p>

<ul>
<li>JSON</li>
<li>HTML</li>
<li>XML</li>
<li>Plain Text</li>
<li>Binary

<ul>
<li>application/octet-stream</li>
</ul>
</li>
</ul>


<p>カスタムのContent-Typeは、<code>andContentTypeHeader</code>によって付加することができます。</p>

<h2>バグなどの報告</h2>

<p><a href="https://github.com/yaakaito/NLTHTTPStubServer/issues">Github Issue</a>で受け付けています。(日本語可)</p>
]]></content>
  </entry>
  
</feed>

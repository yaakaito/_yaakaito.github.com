<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-C | yaakaito.org]]></title>
  <link href="http://yaakaito.github.com/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://yaakaito.github.com/"/>
  <updated>2013-02-10T17:02:56+09:00</updated>
  <id>http://yaakaito.github.com/</id>
  <author>
    <name><![CDATA[yaakaito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UINib知らずにCellが作れなくて人生半分くらい損した話]]></title>
    <link href="http://yaakaito.github.com/blog/2013/02/10/uinib-lost-jinsei/"/>
    <updated>2013-02-10T16:32:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/02/10/uinib-lost-jinsei</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
僕は<code>UIView</code>とか<code>UITableViewCell</code>を継承してかっちょいいビューを作ろうとすると3分でやる気が消える人なのですが、
最近UINibというものを知りました、創作意欲を返してほしいと思います！！！！</p>

<p>みなさん<code>UITableViewCell</code>のサブクラス作りますよね。
そしてそのままコーディングしていくと非常にだるく、3秒でモチベーションがなくなるので、
Interface Builderを使いたい！と思うわけですが、<code>UITableViewCell</code>用のxibファイル作るのは30秒で心が折れる。
(というかいつも忘れるしXcodeのバージョンあがると分からなくなる)</p>

<h2>UINibを使う</h2>

<p>おもむろにxibファイルを作ります。</p>

<p><img src="/images/uinib_1.png" width="320"></p>

<p>UIViewを消します。</p>

<p><img src="/images/uinib_2.png" width="320"></p>

<p>UITableViewCellをおきます。</p>

<p><img src="/images/uinib_3.png" width="320"></p>

<p><code>Class</code>と<code>Reuse identifiter</code>をセットします。
FilesOwnerの<code>Class</code>はとりあえず<code>UIViewController</code>にしておきます。</p>

<p>あとはこれをdatasource側で</p>

<p>```objective-c</p>

<pre><code>HogeCell *cell = [tableView dequeueReusableCellWithIdentifier:kHogeCellReuseIdentifier];
if (!cell) {
    UINib *nib = [UINib nibWithNibName:@"HogeCell" bundle:nil];
    cell = [[nib instantiateWithOwner:nil options:nil] objectAtIndex:0];
}

[self updateCell:cell indexPath:indexPath];
</code></pre>

<p>```</p>

<p>とかすれば使えた、泣いた。いままでのよくわからん！はなんだったのか。</p>

<h2>細かいところはコードで制御したい</h2>

<p>ざっくりとしたレイアウトとかを決めるのはxibで大分楽できるんですが、
もっと細かいところとか、同じようなのだし、まとめて処理してほしい(背景とか)ってときに、毎回xibいじるのはだるいですね。</p>

<p>まあなんだかんだでいろいろコードで弄りたいこととか、コードから追加したい要素とかもあると思うんですが、
これをビューコントローラーからやったりするとゴミみたいなコードになるので、あまりやりたくないわけです。</p>

<p>が、しかしこれは<code>willMoveToSuperview:</code>あたりをうまく使えば解決できることに気づいて</p>

<p>```objective-c
- (void)willMoveToSuperview:(UIView *)newSuperview {</p>

<pre><code>[super willMoveToSuperview:newSuperview];

// 共通のスタイルとかコードでやりたい処理書く
</code></pre>

<p>}
```</p>

<p>ってやればあっさりできた、全俺が号泣した。</p>

<h2>次にだるいのが</h2>

<p>```objective-c
- (void)setHoge:(Hoge *)hoge {</p>

<pre><code>if (_event != event) {
    _event = event;

    self.thumbnail.image = hoge.thumbnail;
    self.message.text = hoge.message;
}
</code></pre>

<p>}
```</p>

<p>こういうの、あると思います。(updateCellとか)</p>

<p>Model-View-Binder使えばうまくいけそうですが、メジャーなの知らないので教えてください。</p>

<p>けど多分ないような気がするので作ります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-CでRoleやってみる]]></title>
    <link href="http://yaakaito.github.com/blog/2013/01/31/objective-c-role/"/>
    <updated>2013-01-31T01:38:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/01/31/objective-c-role</id>
    <content type="html"><![CDATA[<p>こんにちは、うきょーです！
Objective-C書いててふと、Role使いたいなー出来たっけーと、思ったのでやってみた。</p>

<p>怪しいところもあるので、あんまり参考にならないかもですよと言っておく。</p>

<h2>最終的にデータと振る舞いを合体させる</h2>

<p>ってのができればいいと思うんだけど、Objective-Cならカテゴリで書いておけばよくね？と思ったり思わなかったり。
けどちょっと違うよねーってことで、今回はそういうのはやめとく。</p>

<p>で、実装としては<code>NSProxy</code>使えばそれっぽいものは割と簡単に出来た。</p>

<p><a href="https://github.com/yaakaito/ObjCRoleSample">ObjCRoleSample</a></p>

<p><code>objective-c
@interface Book : NSObject
@property (nonatomic, strong) NSString *title;
@property (nonatomic) NSUInteger price;
@end
</code></p>

<p>こういうモデルに対して、</p>

<p>```objective-c
@implementation BookPurchase</p>

<ul>
<li>(void)purchase
{
  Book <em>this = (Book </em>)self.target;
  NSLog(@"Purchased! %@ %u", this.title, this.price);
}
@end
```</li>
</ul>


<p>こんな感じの振る舞いを、</p>

<p>```objective-c
Book *book = [[Book alloc] init];
book.title = @"hoge";
book.price = 420;</p>

<p>Book<BookPurchase> *extended = [book roleExtended:BookPurchase.class];</p>

<p>[extended purchase];
```</p>

<p>こう合成できるようにしてみた。</p>

<p><code>Book&lt;BookPurchase&gt;</code>が気に入らないと人は、ちょっと微妙な感じがするんだけど、<code>Book</code>の定義の方に書いちゃえば省略はできる。</p>

<p>実装としては基本的には<code>NSProxy</code>で自分にメッセージ送れなかったら流すようにしたものをベースクラスにしてあげて、<code>protocol</code>を使ってこんな感じでロールを定義する</p>

<p>```objective-c
@protocol BookPurchase <NSObject>
@optional
- (void)purchase;
@end</p>

<p>@interface BookPurchase : OCRole <BookPurchase>
@end
```</p>

<p>こうやると<code>BookPurchase</code>ロールと<code>Book</code>モデルで同じメッセージが送れるような(正確にはXCodeでコンパイル出来るような)感じになる。
見た目はあんまりよくない。し、あんまり実用的でもないような感じがする。マクロとかで書きやすくしてあげるとちょっとは変わるかなー。</p>

<h2>宣伝:2/23に東京でiOSカンファレンスを開催します！</h2>

<p>「conferenceWithDevelopers」というタイトルです。</p>

<p><a href="http://conference-with-developers.info/">公式サイト</a></p>

<p><a href="http://peatix.com/event/9727">チケットをゲットはこちらから</a></p>

<p>無料です！</p>

<p>豪華スピーカーでお送りしますので、みなさん是非ご参加ください！LT発表者も募集してますよ！</p>

<iframe frameborder="0" width="400" height="473" src="http://peatix.com/event/9727/share/widget?z=1&c=dark&t=1&a=1"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2/23に東京でiOSカンファレンスを開催します！]]></title>
    <link href="http://yaakaito.github.com/blog/2013/01/26/confwd/"/>
    <updated>2013-01-26T14:56:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/01/26/confwd</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。</p>

<p>2/23(土)にグリー株式会社でiOSエンジニアのためのカンファレンスイベント「conferenceWithDevelopers」を開催します！</p>

<p><img src="/images/confwd.png" width="660"></p>

<p><a href="http://conference-with-developers.info/">公式サイト</a></p>

<p><a href="http://peatix.com/event/9727">チケットをゲットはこちらから</a></p>

<p>無料です！</p>

<p>今現在、決定しているスピーカーとして、
「iPhone Core Audioプログラミング」    で有名なクックパッドの永野さん、
「ビートロボ」でiOSのリードエンジニアを務める菅宮さん。
まだWebの更新がおいついていませんが、
「Dynamic Objective-C」や「iOS開発におけるパターンによるオートマティズム」を執筆された木下さんをはじめとする、
豪華なゲストでお送りする予定です！
講演者は随時アップデート、こちらでも告知していきますのでお楽しみに！！！</p>

<p>またLT参加者も募集しています！
iOSネタであれば制限はありません、こんなことやってみた！から実践的なものまで！皆さんのトークを心からお待ちしております。
LT参加を希望されるかたは、チケットページより「LT参加チケット」でお申し込みください！</p>

<p>より詳しい情報は<a href="http://conference-with-developers.info/">公式サイト</a>をご覧ください！</p>

<p>みなさんのご来場をお待ちしております！！</p>

<iframe frameborder="0" width="400" height="446" src="http://peatix.com/event/9727/share/widget?z=1&c=dark&t=1&a=1"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C用ユーティリティOverlineを公開しました]]></title>
    <link href="http://yaakaito.github.com/blog/2013/01/06/overline-010-release/"/>
    <updated>2013-01-06T13:45:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/01/06/overline-010-release</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。寒いですね。
Objective-C(主にiOS開発)向けのユーティリティライブラリを公開しました。
バージョンは0.1.0で、まだAPIはそこまでそろってません。</p>

<p><a href="https://github.com/yaakaito/Overline">Overline</a></p>

<p>似たようなライブラリではunderscore.mとかBlocksKitが近いかなーと思います。
基本的な機能の拡張で、めんどくさいところを楽にする系のライブラリです。ひかえめです。</p>

<p>主に僕がだるいなーと思ったベースで追加しています。
なのでいわゆるmapもあれば、URLエンコードしてくれるメソッドもありますし、という感じ。あとはいつも忘れる系とか。</p>

<p>underscoreなんかと違うところは、underscoreとかってがんばってJSっぽく書こうとしてる感じが伝わってくるんですが、
僕はJavaScriptみたいに書くのが綺麗だなとか書きやすいとかまったく思ってないので、Objective-Cらしく書けるようにしてあります。
好みのレベルかなーくらいのショートハンドは用意しています。</p>

<h2>使い方</h2>

<p>Cocoapodsでやるのが楽です。</p>

<p><code>ruby
pod 'Overline'
</code></p>

<p><code>
pod install
</code></p>

<p>して</p>

<p>```objective-c</p>

<h1>import "Overline.h"</h1>

<p>```</p>

<p>簡単ですね。</p>

<p>必要なところだけ使いたかったり、自分でプロジェクトに追加する場合は、<code>/Overline</code>の下から好きなファイルをプロジェクトに追加してください。
READMEに書いてある通りに分割してあるので、それなどを参考に。</p>

<h2>出来る事</h2>

<p>一覧はREADMEに書いてありますが、一例をだすと<code>map</code>とか</p>

<p>```objective-c
NSArray *mapped = [@[@1,@2,@3,@4,@5,@6] mappedArrayUsingBlock:<sup>id(id</sup> obj, NSUInteger idx) {</p>

<pre><code>if ([obj integerValue] % 2 == 0) {
    return obj;
}
return nil;
</code></pre>

<p>}];
// @[@2,@4,@6]
```</p>

<p>こういう感じで正規表現でマッチングできたりとか (正規表現オブジェクトとしてちゃんと表記できないので、ちょっと微妙だけども)</p>

<p><code>objective-c
[@"https?" testInString:urlString];
</code></p>

<p>たまにしか使わないけど毎回引き出してくるのだるいーみたいな</p>

<p><code>objective-c
[@"hoge" md5];
[@"hoge" stringByHashingSha256];
[@"YQ==" decodeBase64];
</code></p>

<p>なんでだよと突っ込みたくなる<code>insertObjects:atIndexes</code>とか</p>

<p><code>objective-c
[marray insertObjects:@[@4,@5,@6] atIndex:1];
</code></p>

<p><a href="http://stackoverflow.com/questions/2060741/does-objective-c-use-short-circuit-evaluation">よく話題になったりはまったりするNSNull</a>をできるだけ意識せずに使えるように</p>

<p>```
NSDictionary *dic = @{</p>

<pre><code>    @"null-key" : [NSNull null]
</code></pre>

<p>};
[[dic objectForKey:@"null-key"] objectForKey:@"fuck"]; // nil
```</p>

<p>できたりします。</p>

<h3>よろしくね！</h3>

<p><a href="https://github.com/yaakaito/Overline">Overline</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AppCodeで華麗にテストをキメる！]]></title>
    <link href="http://yaakaito.github.com/blog/2012/12/09/adv-appcode-splendid-testing/"/>
    <updated>2012-12-09T00:02:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/12/09/adv-appcode-splendid-testing</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！！
<a href="http://qiita.com/advent-calendar/2012/objective-c">Objective-Cアドベントカレンダー2012</a> 8日目の記事です。
みなさんiOSアプリを開発するときに当然テストを書くと思うんですが、このテストメソッドだけ試したいなーってときに、
XcodeだとManageShemesからチェックを外して・・・とか、できるんですが、非常に面倒ですよね！！！
そんなあなたにAppCodeがおすすめです！</p>

<h2>テストメソッド単位で実行をキメよう！</h2>

<p>とりあえずキメてみましょう！テストフレームワークはSenTestingKitです。</p>

<p>普通にテストを書いていって・・・</p>

<p><img src="/images/adv-testing-test-case.png" width="420"></p>

<p>この<code>testMappedArrayUsingBlock</code>だけを実行して確かめてみたいなーと思っずたら、
キーバインドを弄っていない場合は<code>Command + Option + R</code>(多分あってるはず)なんかで、Run > Run... を呼び出します。
そうするとこんな感じのメニューが現れて・・・</p>

<p><img src="/images/adv-testing-select.png" width="420"></p>

<p><code>2</code>を押すと、このコンテキストのみを実行してくれます。
すると・・・</p>

<p><img src="/images/adv-testing-result.png" width="420"></p>

<p>こういう感じに<code>testMappedArrayUsingBlock</code>だけ実行してくれます！便利ですね！！！</p>

<p>あとはガンガンテストをかいてガンガン実行してカイラクを得ましょう！！！</p>

<h2>ちなみにこれをXcodeで開いてみると・・・</h2>

<p><img src="/images/adv-testing-xcode.png" width="320"></p>

<p>こんな感じになっています。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-C | yaakaito.org]]></title>
  <link href="http://yaakaito.org/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://yaakaito.org/"/>
  <updated>2013-03-21T05:00:01+09:00</updated>
  <id>http://yaakaito.org/</id>
  <author>
    <name><![CDATA[yaakaito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flow.jsをObjective-Cに移植してみた]]></title>
    <link href="http://yaakaito.org/blog/2013/03/21/flow-m-0-0-1/"/>
    <updated>2013-03-21T03:24:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/21/flow-m-0-0-1</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
<a href="http://www.slideshare.net/uupaa/flowjs">Flow.js</a> というJavaScriptのライブラリを見て、面白いなーと思ったのでObjective-Cでも似たようなことが出来るようにしてみた。junctionとforkは(まだ)実装してないので、完全な移植ではないです。
コードも適当なので遊び程度に見ていただければ。
ところで英語全然書けないので誰か「Natural English」ってプルリクをください。</p>

<p><a href="https://github.com/yaakaito/Flow.m">Flow.m</a></p>

<p>名前はまんま、一応Cocoapodsにも入れてはいるのでCocoapods使ってる人は</p>

<p><code>ruby
pod 'Flow.m'
</code></p>

<p>で使える。</p>

<h2>出来ること</h2>

<p>といっても、基本的には本家と同じなので、<a href="http://www.slideshare.net/uupaa/flowjs">本家のスライド</a>の方が詳しいのでそちらを参照していただきたく。
ただ微妙に仕様が違うところもある感じなので流しで書いておく。</p>

<h3>基本的な使い方</h3>

<p><code>FMFlow</code>のオブジェクトを作る時に、<code>waits</code>と<code>completionBlock</code>を渡す。
<code>FMFlow</code>のオブジェクトには<code>pass</code>ってメソッドが生えていて、これを呼び出すとカウンタが一個づつあがる。
呼び出した回数が<code>waits</code>に達したら、<code>completionBlock</code>が呼び出される。</p>

<p>```objective-c
FMFlow <em>flow = [FMFlow flowWithWaits:2 completionBlock:<sup>(NSError</sup> </em>error, FMArguments *arguments) {</p>

<pre><code>NSLog(@"Flow!");
</code></pre>

<p>}];</p>

<p>[flow pass];
[flow pass]; // Flow!
```</p>

<h3>extends</h3>

<p>処理待機数を増やす、増える方向だけ。</p>

<p>```objective-c
FMFlow <em>flow = [FMFlow flowWithWaits:1 completionBlock:<sup>(NSError</sup> </em>error, FMArguments *arguments) {</p>

<pre><code>NSLog(@"Flow!");
</code></pre>

<p>}];</p>

<p>[flow extend:1];</p>

<p>[flow pass];
[flow pass];  // Flow!
```</p>

<h3>arguments</h3>

<p>本家に合わせる為に若干無理してるんだけど、<code>passWithValue:</code> か <code>passWithValue:forKey:</code>で渡せるし、インデックスかキーか好きなほうでどうぞ。</p>

<p>```objective-c
FMFlow <em>flow = [FMFlow flowWithWaits:2 completionBlock:<sup>(NSError</sup> </em>error, FMArguments *arguments) {</p>

<pre><code>NSLog([arguments argumentAtIndex:0]); // HOGE
NSLog([arguments argumentAtIndex:1]); // FUGA
NSLog([arguments argumentForKey:@"fuga"]); // FUGA
</code></pre>

<p>}];</p>

<p>[flow passWithValue:@"HOGE"];
[flow passWithValue:@"FUGA" forKey:@"fuga"];
```</p>

<h3>missとmissable</h3>

<p>失敗可能回数の設定と、失敗の通知</p>

<p>```objective-c
FMFlow <em>flow = [FMFlow flowWithWaits:1 completionBlock:<sup>(NSError</sup> </em>error, FMArguments *arguments) {</p>

<pre><code>NSLog(@"Flow!");
</code></pre>

<p>}];</p>

<p>[flow missable:1];</p>

<p>[flow miss]; // 1回は許可してるので問題ない
[flow pass]; // Flow!
```</p>

<p>失敗可能回数を超えた時は</p>

<p>```objective-c
FMFlow <em>flow = [FMFlow flowWithWaits:2 completionBlock:<sup>(NSError</sup> </em>error, FMArguments *arguments) {</p>

<pre><code>// error がこんな感じで渡ってくる
// error.domain : org.yaakaito.flow
// error.code   : kFMErrorCodeFailure
NSLog([arguments argumentAtIndex:0]); // ここまでに渡した引数は渡ってくる 
</code></pre>

<p>}];</p>

<p>[flow missable:1];</p>

<p>[flow miss];
[flow passWithValue:@"HOGE"];
[flow miss]; // 失敗したのでCompletionBlockを呼び出す
```</p>

<h3>exit</h3>

<p>強制終了。これはちょっと本家と違って、<code>userInfo</code>を渡すと、<code>CompletionBlock</code>の<code>error.userInfo</code>に入ってくるようになってる。</p>

<p>```objective-c
FMFlow <em>flow = [FMFlow flowWithWaits:1 completionBlock:<sup>(NSError</sup> </em>error, FMArguments *arguments) {</p>

<pre><code>// error.domain : org.yaakaito.flow
// error.code   : kFMErrorCodeExit
NSLog([[error userInfo] objectForKey:@"msg"]); // えらー
</code></pre>

<p>}];</p>

<p>[flow exit:@{ @"msg" : @"えらー"}];
```</p>

<p>こんな感じです、残りはまた今度・・・</p>

<h2>ところで</h2>

<p>AppCode2.0のDarculaテーマは、見やすいのでおすすめです。</p>

<p>あああと非同期テストが必要になったわけなんですが、Cocoapods見てても、SenTestingKit+Asyncみたいなのはみるんだけど単純なモジュールねーなーみたいな。
みんなSenTestingKit用のスーパークラス作るのかなーと思った。
僕は別にちょっと待っててくれればいいだけなので、べつにただのオブジェクトでもいいわってなって、<a href="https://github.com/yaakaito/AsyncTestSupporter">こういう</a>の作った。作ったというか、元から他のコードで使ってたやつをpod化しただけ。
なんか<code>waitForTimeout:</code>くらいしか使わんし、それで十分やろ、とか思うので、それしか作ってない。</p>

<p>```objective-c
- (void)testAsyncMethod
{</p>

<p>  // Create instance.
  AsyncTestSupporter *asyncTest = [[AsyncTestSupporter alloc] init];</p>

<p>  // Prepare for asynchronous call.
  __weak AsyncTestSupporter *that = asyncTest;
  // Call asynchronous method.
  [object asyncMethod:<sup>()</sup> { // Completion blocks.</p>

<pre><code>// Wait for notify with timeout seconds.
[that waitForTimeout:10];
</code></pre>

<p>  }];</p>

<p>  // Notify state if completed asynchronous method.
  [asyncTest notify:notify:kAsyncTestSupporterWaitStatusSuccess];</p>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[conferenceWithDevelopersが無事に終了しました]]></title>
    <link href="http://yaakaito.org/blog/2013/02/26/thanks-ios-developers/"/>
    <updated>2013-02-26T00:39:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/02/26/thanks-ios-developers</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
2/23(土)に<a href="http://conference-with-developers.info/">conferenceWithDevelopers</a>というイベントを開催しました。
当日はたくさんの方にご来場頂き、盛況のうちにイベントを終える事が出来ました。</p>

<p>ご講演頂いたみなさん、ご来場頂いたみなさん、会場を提供していただいたグリー様、そして当日お手伝いをして頂いたスタッフの方、本当にありがとうございました。</p>

<p>運営上至らない点も多くあったと思いますが、今回の反省を糧に次へ繋げていきたいと思います。</p>

<p>何度か「次はあるんですか？」という趣旨の質問を受けました。
これについて現状での回答をしておくと、「続けていきたい」思っています。
ですが、毎月開催できるかと言えばそういう感じではないので、時期なんかに関してはまったくの未定です。
イベントのポジションとして、年に一度のお祭り、とかそういう感じに成長できればよいなぁとぼんやり考えています。
力を貸すよ！という方がいらっしゃいましたら是非お願いしたいとも思っています。</p>

<p>というわけで、簡単ですが一旦の挨拶とさせて頂きます。みなさん、ありがとうございました！</p>

<p>「次回にご期待ください！」</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stubbilinoというスタブライブラリがよさげです]]></title>
    <link href="http://yaakaito.org/blog/2013/02/12/stubbilino/"/>
    <updated>2013-02-12T04:28:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/02/12/stubbilino</id>
    <content type="html"><![CDATA[<p>こんにちは、うきょーです。
<a href="https://github.com/robb/Stubbilino">Stubbilino</a> というスタブライブラリをみけたのですが、結構良さげです。</p>

<p>```objective-c
SEHoge <em>hoge = [[SEHoge alloc] init];
NSObject<SBStub> </em>stub = [Stubbilino stubObject:hoge];
[stub stubMethod:@selector(intMethod) withBlock:^ {</p>

<pre><code>return 10;
</code></pre>

<p>}];</p>

<p>NSLog(@"%d", [hoge intMethod]);
```</p>

<p>みたいにselectorとBlocksを使って書きます。
このBlocksはオブジェクトとか気にせず返せるみたいで、</p>

<p>```objective-c
[stub stubMethod:@selector(stringMethod) withBlock:<sup>(){</sup></p>

<pre><code>return @"string";
</code></pre>

<p>}];
```</p>

<p>こういうのもいける、超便利。
OCMockとかだと<code>OCValue</code>がどうたらとか出てくるので、非常に楽チンに書ける。
Blocks使ってるので、ちょっと生成がめんどいオブジェクトとかも、押し込んでおけるのでよい。</p>

<p>あとはクラスメソッドのスタブも出来るみたいです。
こっちはまだ使ってないのでREADMEからの引用ですが、</p>

<p>```objective-c
// https://github.com/robb/Stubbilino/blob/master/README.md
Class<SBClassStub> uiimage = [Stubbilino stubClass:UIImage.class];</p>

<p>[uiimage stubMethod:@selector(imageNamed:)</p>

<pre><code>      withBlock:^(NSString *name) { return myImage; }];
</code></pre>

<p>```</p>

<p>こういう感じで書けるみたいです。
クラスメソッドのスタブは往々にしてだるいという感じだったので、良い。</p>

<p>OCMockなんかは<code>NSProxy</code>を使った実装ですが、こっちは<code>objc/runtime.h</code>使っています。
なのでちょっとコード追うのはしんどいですが、読んでみるとよいと思います。</p>

<p>　</p>

<h2>宣伝:2/23に東京でiOSカンファレンスを開催します！</h2>

<p>「conferenceWithDevelopers」というタイトルです。</p>

<p><a href="http://conference-with-developers.info/">公式サイト</a></p>

<p><a href="http://peatix.com/event/9727">チケットをゲットはこちらから</a></p>

<p>無料です！</p>

<p>豪華スピーカーでお送りしますので、みなさん是非ご参加ください！LT発表者も募集してますよ！</p>

<iframe frameborder="0" width="400" height="460" src="http://peatix.com/event/9727/share/widget?z=1&c=dark&t=1&a=1"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[registerNibを使うとさらによいらしいです]]></title>
    <link href="http://yaakaito.org/blog/2013/02/11/register-nib/"/>
    <updated>2013-02-11T02:51:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/02/11/register-nib</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
<a href="http://yaakaito.github.com/blog/2013/02/10/uinib-lost-jinsei/">前の続きです</a></p>

<p>UINibで楽チンに<code>UITableViewCell</code>をxibで作れることは分かったけど、</p>

<p><code>objective-c
UINib *nib = [UINib nibWithNibName:@"HogeCell" bundle:nil];
cell = [[nib instantiateWithOwner:nil options:nil] objectAtIndex:0];
</code></p>

<p>このコードはぶっちゃけ微妙だよね。</p>

<p>で、iOS5~だと<code>registerNib</code>というものがあるらしく</p>

<p>```objective-c
- (void)viewDidLoad {</p>

<pre><code>[super viewDidLoad];

[self.tableView registerNib:[UINib nibWithNibName:@"HogeCell" bundle:nil] forCellReuseIdentifier:kHogeCellReuseIdentifier];
</code></pre>

<p>}
```</p>

<p>こういう感じに書いておくと、さっきの生成部分が</p>

<p><code>objective-c
cell = [[HogeCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:kBGHogeCellReuseIdentifier];
</code></p>

<p>こういう感じにいける、こっちのがよさげ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UINib知らずにCellが作れなくて人生半分くらい損した話]]></title>
    <link href="http://yaakaito.org/blog/2013/02/10/uinib-lost-jinsei/"/>
    <updated>2013-02-10T16:32:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/02/10/uinib-lost-jinsei</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
僕は<code>UIView</code>とか<code>UITableViewCell</code>を継承してかっちょいいビューを作ろうとすると3分でやる気が消える人なのですが、
最近UINibというものを知りました、創作意欲を返してほしいと思います！！！！</p>

<h3>追記しました</h3>

<p><a href="http://yaakaito.github.com/blog/2013/02/11/register-nib/">続き</a></p>

<p>みなさん<code>UITableViewCell</code>のサブクラス作りますよね。
そしてそのままコーディングしていくと非常にだるく、3秒でモチベーションがなくなるので、
Interface Builderを使いたい！と思うわけですが、<code>UITableViewCell</code>用のxibファイル作るのは30秒で心が折れる。
(というかいつも忘れるしXcodeのバージョンあがると分からなくなる)</p>

<h2>UINibを使う</h2>

<p>おもむろにxibファイルを作ります。</p>

<p><img src="/images/uinib_1.png" width="320"></p>

<p>UIViewを消します。</p>

<p><img src="/images/uinib_2.png" width="320"></p>

<p>UITableViewCellをおきます。</p>

<p><img src="/images/uinib_3.png" width="320"></p>

<p><code>Class</code>と<code>Reuse identifiter</code>をセットします。
FilesOwnerの<code>Class</code>はとりあえず<code>UIViewController</code>にしておきます。</p>

<p>あとはこれをdatasource側で</p>

<p>```objective-c</p>

<pre><code>HogeCell *cell = [tableView dequeueReusableCellWithIdentifier:kHogeCellReuseIdentifier];
if (!cell) {
    UINib *nib = [UINib nibWithNibName:@"HogeCell" bundle:nil];
    cell = [[nib instantiateWithOwner:nil options:nil] objectAtIndex:0];
}

[self updateCell:cell indexPath:indexPath];
</code></pre>

<p>```</p>

<p>とかすれば使えた、泣いた。いままでのよくわからん！はなんだったのか。</p>

<h2>細かいところはコードで制御したい</h2>

<p>ざっくりとしたレイアウトとかを決めるのはxibで大分楽できるんですが、
もっと細かいところとか、同じようなのだし、まとめて処理してほしい(背景とか)ってときに、毎回xibいじるのはだるいですね。</p>

<p>まあなんだかんだでいろいろコードで弄りたいこととか、コードから追加したい要素とかもあると思うんですが、
これをビューコントローラーからやったりするとゴミみたいなコードになるので、あまりやりたくないわけです。</p>

<p>が、しかしこれは<code>willMoveToSuperview:</code>あたりをうまく使えば解決できることに気づいて</p>

<p>```objective-c
- (void)willMoveToSuperview:(UIView *)newSuperview {</p>

<pre><code>[super willMoveToSuperview:newSuperview];

// 共通のスタイルとかコードでやりたい処理書く
</code></pre>

<p>}
```</p>

<p>ってやればあっさりできた、全俺が号泣した。</p>

<h2>次にだるいのが</h2>

<p>```objective-c
- (void)setHoge:(Hoge *)hoge {</p>

<pre><code>if (hoge != hoge) {
    _hoge = hoge;

    self.thumbnail.image = hoge.thumbnail;
    self.message.text = hoge.message;
}
</code></pre>

<p>}
```</p>

<p>こういうの、あると思います。(updateCellとか)</p>

<p>Model-View-Binder使えばうまくいけそうですが、メジャーなの知らないので教えてください。</p>

<p>けど多分ないような気がするので作ります。</p>

<h2>宣伝:2/23に東京でiOSカンファレンスを開催します！</h2>

<p>「conferenceWithDevelopers」というタイトルです。</p>

<p><a href="http://conference-with-developers.info/">公式サイト</a></p>

<p><a href="http://peatix.com/event/9727">チケットをゲットはこちらから</a></p>

<p>無料です！</p>

<p>豪華スピーカーでお送りしますので、みなさん是非ご参加ください！LT発表者も募集してますよ！</p>

<iframe frameborder="0" width="400" height="460" src="http://peatix.com/event/9727/share/widget?z=1&c=dark&t=1&a=1"></iframe>

]]></content>
  </entry>
  
</feed>

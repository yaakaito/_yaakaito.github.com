<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-C | yaakaito.org]]></title>
  <link href="http://yaakaito.org/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://yaakaito.org/"/>
  <updated>2013-04-02T02:48:30+09:00</updated>
  <id>http://yaakaito.org/</id>
  <author>
    <name><![CDATA[yaakaito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MagicalRecordの始め方忘れたので思い出しながら書く]]></title>
    <link href="http://yaakaito.org/blog/2013/04/01/magical-record-setup/"/>
    <updated>2013-04-01T00:49:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/01/magical-record-setup</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
<a href="https://github.com/magicalpanda/MagicalRecord">MagicalRecord</a>使うかーと思ったけど、やりかた覚えてなかったので書く！やっぱブログ書かないと駄目ですね。</p>

<h2>プロジェクト作る</h2>

<p><code>Use Core Data</code> をチェックする</p>

<h2>xcdatamodeldをいじる</h2>

<p>とりあえずサンプルとして</p>

<p>```
Book:
  name: string
  bookId: integer 16
  authors: [Author]</p>

<p>Author:
  name: string
  type: string
  book: [Book]
```</p>

<p>という感じにした、<code>Book</code>と<code>Author</code>は一対多なので、<code>To-Many Relationship</code>を設定する。</p>

<p><img src="/images/mr-to-many.png"></p>

<p><code>Class</code>とかも忘れずに設定する。</p>

<p><img src="/images/mr-class.png" width="240"></p>

<h2>エンティティのモデルクラス作る</h2>

<p><a href="http://rentzsch.github.com/mogenerator/">mogenerator</a>を使うのが一般的っぽいですが、僕は別に使わなくていいかなーと思ってます。
というのも、mogeneratorって「自動生成されるやつだと変更したあとにマージが大変・・・、なのでCoreDataとビジネスロジックをカテゴリで分ける」的な使われ方をするのかなーと思ってるんだけど、それってそりゃそーじゃね、と思うのです。</p>

<p>僕は、CoreDataから出てきたものは、いうならJSON形式のレスポンスをそのまま<code>NSDicitionary</code>として使ってるのとそんなに違わないよなーと思っていて、なので内部的に<code>NSManagedObject</code>をもってるビジネスロジックを担当するクラスを作ればいいと思う。</p>

<p>とはいえただの決めの問題だし、どっちにしろmogenerator使えば楽出来ることに変わりはないと思うので、mogenerator使っときます。(ていうかこれじゃないと駄目なんだっけ？大丈夫だよね？)</p>

<p>(入ってない人は)<code>brew</code>でmogeneratorをインストールします。</p>

<p><code>
$ brew install mogenerator
</code></p>

<p>mogeneratorが吐き出すクラスを入れるディレクトリなんかを作る。とりあえず <code>CoreData</code> とかにしておく。</p>

<p>準備したらmogeneratorでクラスを吐き出す。</p>

<p><code>
$ mogenerator -m [YourCoreData].xcdatamodeld/[YourCoreData].xcdatamodel -O CoreData/ --template-var arc=true
</code></p>

<p>こんな感じ！ <code>--template-var arc=true</code> 付けないとARC用のコードが出てこないっぽいので注意。</p>

<h2>MagicalRecord入れる</h2>

<p><code>
pod `'MagicalRecord'
</code></p>

<p><code>
$ pod install
</code></p>

<p>いい時代になりましたね。</p>

<h2>MagicalRecord使う</h2>

<p>インポートします。</p>

<p>```objective-c</p>

<h1>define MR_SHORTHAND 1</h1>

<h1>import "CoreData+MagicalRecord.h"</h1>

<p>```</p>

<p>セットアップします。</p>

<p><code>objective-c
[MagicalRecord setupCoreDataStackWithStoreNamed:@"YourCoreData.sqlite"];
</code></p>

<p>使います。</p>

<p>```objective-c
MGBook *book = [MGBook createEntity];
book.name = @"Objective-C";
book.bookId = @(123);</p>

<p>[context saveToPersistentStoreAndWait];
```</p>

<p>簡単ですね！</p>

<p>いつの間にか <code>MR_save</code> じゃなくて、<code>MR_saveToPersistentStoreAndWait</code> と <code>MR_saveToPersistentStoreWithCompletion:</code> になったんですね。こっちの方がいいと思います！！！！</p>

<h2>sqliteのビュアーとか</h2>

<p><a href="https://itunes.apple.com/jp/app/liya/id455484422?mt=12">Liya</a>がおすすめですかね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overline0.2.0とBlocksKit併用版を公開しました]]></title>
    <link href="http://yaakaito.org/blog/2013/03/30/overline-020-release/"/>
    <updated>2013-03-30T19:13:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/30/overline-020-release</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
Objective-C用ユーティリティ、<a href="https://github.com/yaakaito">Overline</a> 0.2.0を公開しました。0.1.5は6時間くらいの命でした。
同時に0.1.xで問題になっていたBlocksKitと一緒に使うとassertで死ぬ問題を回避した、Overline-BlocksKitを公開しています。</p>

<h2>BlocksKitと一緒に使う場合</h2>

<p>Overline-BlocksKitを利用します。Podfileはこんな感じ。</p>

<p><code>
pod 'BlocksKit'
pod 'Overline-BlocksKit'
</code></p>

<p>重複を解決するために、いくつかショートハンドのメソッドを削除しています。
削除されているのは、<code>NSArray</code> <code>NSDictionary</code> <code>NSSet</code> にある以下のメソッドです。</p>

<ul>
<li><code>each:</code></li>
<li><code>map:</code></li>
<li><code>reduce:memo:</code></li>
<li><code>filter:</code></li>
<li><code>reject:</code></li>
</ul>


<p>ショートハンドは削除されますが、Objective-Cっぽい方はそのまま使えます。このあたりはBlocksKitが実装してくれているので、そちらをご利用ください。</p>

<h2>追加された機能とか</h2>

<p>たらたらと紹介していきます。全部書くのはだるいので全部じゃないです。0.1.0から0.2.0までの変更のうちいろいろという感じです。</p>

<h3>NSArray arrayWithRange</h3>

<p>指定した範囲のNSArrayを作ります、NSNumber自体が使いにくいので、あんまり使わないですかね。</p>

<p><code>objective-c
NSArray *array = [NSArray arrayWithRangeFrom:0 to:10];
// @[@0, @1, @2, @3, @4, @5, @6, @7, @8, @9]
</code></p>

<p>逆方向にも行けます</p>

<p><code>objective-c
NSArray *array2 = [NSArray arrayWithRangeFrom:0 to:-10 step:2];
// @[@0, @-2, @-4, @-6, @-8]
</code></p>

<h3>NSArray uniqueObjects</h3>

<p>まんま、ユニークなものだけ返ってきます。</p>

<p><code>objective-c
NSArray *uniqueObjects = [@[@1, @2, @3, @1, @3, @4, @5] uniqueObjects];
// @[@1, @2, @3, @4, @5]
</code></p>

<p>比較の部分をBlocksで書ける <code>uniqueObjectsUsingEqualsBlock:</code> もあります。</p>

<h3>その他NSArray</h3>

<p><code>subArray</code> <code>diffrence</code> <code>reversed</code> とかが地味に増えました。</p>

<h3>NSDictionary arrayMap</h3>

<p>そもそも<code>map</code>おかしくね？となって、追加した。</p>

<p>```objective-c
[@{</p>

<pre><code>@"a" : @1,
@"b" : @2,
@"c" : @3,
@"d" : @4
</code></pre>

<p>} mappedArrayUsingBlock:<sup>(id</sup> obj, NSString *key) {</p>

<pre><code>return @([obj integerValue] * 2);
</code></pre>

<p>}];
// @[@2,@4,@6,@8]
```</p>

<h3>NSDictionary objectForKey:transformBlock: pathForKey:</h3>

<p><code>objectForKey:</code>したあとに変換してーというのが面倒なので、Blocksでまとめられるようにしました。</p>

<p>```objective-c
NSDate *date = [JSON objectForKey:@"date8601" transformBlock:<sup>id(id</sup> obj) {</p>

<pre><code>NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
[formatter setDateFormat:@"yyyy/MM/dd HH:mm:ss Z"];
return [formatter dateFromString:obj];
</code></pre>

<p>}];
```</p>

<p>とか、あとは<code>stringForKey:</code> <code>dateForKey:usingFormat:</code> <code>bookForKey:withTrueValue:</code> <code>integerForKey:</code> などもろもろ。多いのでREADMEかテストを見てください。</p>

<p><code>objectForPath:</code> は <code>hoge.fuga</code> みたいなので階層を辿れる。 <code>valueForKey</code> とか <code>valueForKeyPath</code> でも出来たはずだけど、本来その目的に使う物ではないはずなので、あんまり使っちゃ駄目だと思います。</p>

<p>こっちの<code>transform</code>とかの対応そういえばやってなかった・・・</p>

<p>多分大きめなのはこれくらいかと思います。はい。</p>

<h2>よろしくね！</h2>

<p><a href="https://github.com/yaakaito">Overline</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OverlineにNSDateFormatter系のショートハンドを追加したいのだが]]></title>
    <link href="http://yaakaito.org/blog/2013/03/28/overline-nsdateformatter-shorthands/"/>
    <updated>2013-03-28T02:26:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/28/overline-nsdateformatter-shorthands</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
<a href="https://github.com/yaakaito/Overline/">Overline</a>であんまり気が向かなかった<code>NSDateFormatter</code>系のところに手をつけ始めました。
わりと意見を求めている記事です。</p>

<p>といっても、そんなにやることはないかなーとか思っていて、<code>NSDateFormatter</code>をそのまま使っちゃって、あれ・・・和暦・・・みたいなトラップを意識的に回避できればそれでよいのかなーと思ってます。</p>

<p>んで、以下の２つのメソッドを追加した。</p>

<p>```objective-c
+ (instancetype)dateFormatterWithCalendarIndetifiter:(NSString *)calendar</p>

<pre><code>                               LocaleIdentifiter:(NSString *)locale
                            timeZoneAbbreviation:(NSString *)timeZone;
</code></pre>

<ul>
<li>(instancetype)userDefaultFormatter;
```</li>
</ul>


<p>１個目はカレンダー、ロケール、タイムゾーンを忘れずに設定してね、というのを明確にするために作ったメソッド。
なんかこの辺は設定するかなーというものを引数にとってる。</p>

<p>２個目は、デフォルトのものを返してくるよ、というもの。
つまりは単純に<code>alloc init</code>した状態のものなんだけど、そもそもの話その状態が分かりにくいんだよ・・・ってことで名前を付けたもの。
ちょっとは分かりやすくなるのかなーと思ってる。</p>

<h2>意見があったらほしいです</h2>

<p>僕はこれでよいかなーとか思っているのですが、これあったほうがいいだろJKとか、いやそれは違う、というのがあれば意見をもらいたいです。
Twitterとかはあんまり追ってないので、下のDisqusにもらえるとありがたいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flow.jsをObjective-Cに移植してみた]]></title>
    <link href="http://yaakaito.org/blog/2013/03/21/flow-m-0-0-1/"/>
    <updated>2013-03-21T03:24:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/21/flow-m-0-0-1</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
<a href="http://www.slideshare.net/uupaa/flowjs">Flow.js</a> というJavaScriptのライブラリを見て、面白いなーと思ったのでObjective-Cでも似たようなことが出来るようにしてみた。junctionとforkは(まだ)実装してないので、完全な移植ではないです。
コードも適当なので遊び程度に見ていただければ。
ところで英語全然書けないので誰か「Natural English」ってプルリクをください。</p>

<p><a href="https://github.com/yaakaito/Flow.m">Flow.m</a></p>

<p>名前はまんま、一応Cocoapodsにも入れてはいるのでCocoapods使ってる人は</p>

<p><code>ruby
pod 'Flow.m'
</code></p>

<p>で使える。</p>

<h2>出来ること</h2>

<p>といっても、基本的には本家と同じなので、<a href="http://www.slideshare.net/uupaa/flowjs">本家のスライド</a>の方が詳しいのでそちらを参照していただきたく。
ただ微妙に仕様が違うところもある感じなので流しで書いておく。</p>

<h3>基本的な使い方</h3>

<p><code>FMFlow</code>のオブジェクトを作る時に、<code>waits</code>と<code>completionBlock</code>を渡す。
<code>FMFlow</code>のオブジェクトには<code>pass</code>ってメソッドが生えていて、これを呼び出すとカウンタが一個づつあがる。
呼び出した回数が<code>waits</code>に達したら、<code>completionBlock</code>が呼び出される。</p>

<p>```objective-c
FMFlow <em>flow = [FMFlow flowWithWaits:2 completionBlock:<sup>(NSError</sup> </em>error, FMArguments *arguments) {</p>

<pre><code>NSLog(@"Flow!");
</code></pre>

<p>}];</p>

<p>[flow pass];
[flow pass]; // Flow!
```</p>

<h3>extends</h3>

<p>処理待機数を増やす、増える方向だけ。</p>

<p>```objective-c
FMFlow <em>flow = [FMFlow flowWithWaits:1 completionBlock:<sup>(NSError</sup> </em>error, FMArguments *arguments) {</p>

<pre><code>NSLog(@"Flow!");
</code></pre>

<p>}];</p>

<p>[flow extend:1];</p>

<p>[flow pass];
[flow pass];  // Flow!
```</p>

<h3>arguments</h3>

<p>本家に合わせる為に若干無理してるんだけど、<code>passWithValue:</code> か <code>passWithValue:forKey:</code>で渡せるし、インデックスかキーか好きなほうでどうぞ。</p>

<p>```objective-c
FMFlow <em>flow = [FMFlow flowWithWaits:2 completionBlock:<sup>(NSError</sup> </em>error, FMArguments *arguments) {</p>

<pre><code>NSLog([arguments argumentAtIndex:0]); // HOGE
NSLog([arguments argumentAtIndex:1]); // FUGA
NSLog([arguments argumentForKey:@"fuga"]); // FUGA
</code></pre>

<p>}];</p>

<p>[flow passWithValue:@"HOGE"];
[flow passWithValue:@"FUGA" forKey:@"fuga"];
```</p>

<h3>missとmissable</h3>

<p>失敗可能回数の設定と、失敗の通知</p>

<p>```objective-c
FMFlow <em>flow = [FMFlow flowWithWaits:1 completionBlock:<sup>(NSError</sup> </em>error, FMArguments *arguments) {</p>

<pre><code>NSLog(@"Flow!");
</code></pre>

<p>}];</p>

<p>[flow missable:1];</p>

<p>[flow miss]; // 1回は許可してるので問題ない
[flow pass]; // Flow!
```</p>

<p>失敗可能回数を超えた時は</p>

<p>```objective-c
FMFlow <em>flow = [FMFlow flowWithWaits:2 completionBlock:<sup>(NSError</sup> </em>error, FMArguments *arguments) {</p>

<pre><code>// error がこんな感じで渡ってくる
// error.domain : org.yaakaito.flow
// error.code   : kFMErrorCodeFailure
NSLog([arguments argumentAtIndex:0]); // ここまでに渡した引数は渡ってくる 
</code></pre>

<p>}];</p>

<p>[flow missable:1];</p>

<p>[flow miss];
[flow passWithValue:@"HOGE"];
[flow miss]; // 失敗したのでCompletionBlockを呼び出す
```</p>

<h3>exit</h3>

<p>強制終了。これはちょっと本家と違って、<code>userInfo</code>を渡すと、<code>CompletionBlock</code>の<code>error.userInfo</code>に入ってくるようになってる。</p>

<p>```objective-c
FMFlow <em>flow = [FMFlow flowWithWaits:1 completionBlock:<sup>(NSError</sup> </em>error, FMArguments *arguments) {</p>

<pre><code>// error.domain : org.yaakaito.flow
// error.code   : kFMErrorCodeExit
NSLog([[error userInfo] objectForKey:@"msg"]); // えらー
</code></pre>

<p>}];</p>

<p>[flow exit:@{ @"msg" : @"えらー"}];
```</p>

<p>こんな感じです、残りはまた今度・・・</p>

<h2>ところで</h2>

<p>AppCode2.0のDarculaテーマは、見やすいのでおすすめです。</p>

<p>あああと非同期テストが必要になったわけなんですが、Cocoapods見てても、SenTestingKit+Asyncみたいなのはみるんだけど単純なモジュールねーなーみたいな。
みんなSenTestingKit用のスーパークラス作るのかなーと思った。
僕は別にちょっと待っててくれればいいだけなので、べつにただのオブジェクトでもいいわってなって、<a href="https://github.com/yaakaito/AsyncTestSupporter">こういう</a>の作った。作ったというか、元から他のコードで使ってたやつをpod化しただけ。
なんか<code>waitForTimeout:</code>くらいしか使わんし、それで十分やろ、とか思うので、それしか作ってない。</p>

<p>```objective-c
- (void)testAsyncMethod
{</p>

<p>  // Create instance.
  AsyncTestSupporter *asyncTest = [[AsyncTestSupporter alloc] init];</p>

<p>  // Prepare for asynchronous call.
  __weak AsyncTestSupporter *that = asyncTest;
  // Call asynchronous method.
  [object asyncMethod:<sup>()</sup> { // Completion blocks.</p>

<pre><code>// Wait for notify with timeout seconds.
[that waitForTimeout:10];
</code></pre>

<p>  }];</p>

<p>  // Notify state if completed asynchronous method.
  [asyncTest notify:notify:kAsyncTestSupporterWaitStatusSuccess];</p>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[conferenceWithDevelopersが無事に終了しました]]></title>
    <link href="http://yaakaito.org/blog/2013/02/26/thanks-ios-developers/"/>
    <updated>2013-02-26T00:39:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/02/26/thanks-ios-developers</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
2/23(土)に<a href="http://conference-with-developers.info/">conferenceWithDevelopers</a>というイベントを開催しました。
当日はたくさんの方にご来場頂き、盛況のうちにイベントを終える事が出来ました。</p>

<p>ご講演頂いたみなさん、ご来場頂いたみなさん、会場を提供していただいたグリー様、そして当日お手伝いをして頂いたスタッフの方、本当にありがとうございました。</p>

<p>運営上至らない点も多くあったと思いますが、今回の反省を糧に次へ繋げていきたいと思います。</p>

<p>何度か「次はあるんですか？」という趣旨の質問を受けました。
これについて現状での回答をしておくと、「続けていきたい」思っています。
ですが、毎月開催できるかと言えばそういう感じではないので、時期なんかに関してはまったくの未定です。
イベントのポジションとして、年に一度のお祭り、とかそういう感じに成長できればよいなぁとぼんやり考えています。
力を貸すよ！という方がいらっしゃいましたら是非お願いしたいとも思っています。</p>

<p>というわけで、簡単ですが一旦の挨拶とさせて頂きます。みなさん、ありがとうございました！</p>

<p>「次回にご期待ください！」</p>
]]></content>
  </entry>
  
</feed>

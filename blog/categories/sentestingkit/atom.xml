<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SenTestingKit | yaakaito.org]]></title>
  <link href="http://yaakaito.org/blog/categories/sentestingkit/atom.xml" rel="self"/>
  <link href="http://yaakaito.org/"/>
  <updated>2013-05-08T14:29:05+09:00</updated>
  <id>http://yaakaito.org/</id>
  <author>
    <name><![CDATA[yaakaito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS部で話したViewControllerのテストとかのまとめ]]></title>
    <link href="http://yaakaito.org/blog/2013/05/03/view-controller-testing/"/>
    <updated>2013-05-03T20:20:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/05/03/view-controller-testing</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
この前iOS部というイベントでiOSテストの話をしたんですが、ViewControllerのテストで反応が結構あったのと、
ちゃんと説明できてない部分があったなーということで、文章としてまとめようと思います。</p>

<p>iOS部でやったものからコードが変わってますが、やりたいことは一緒なので、iOS部に参加されていた方は適宜変換して読んでもらえればと思います。</p>

<h2>ツールとか</h2>

<p>SenTestingKit + OCMockです。
OCMockの解説はiOS部では初めての方が居たので軽く説明しましたが、これを読んでる方はオンラインかと思いますので、分からなければググってください。
<a href="http://yaakaito.hatenablog.com/entry/2012/06/26/013813">僕が古い方のブログで書いたもの</a>もあるので、そちらを読まれるとよいかもしれません。</p>

<h2>ViewControllerの役割</h2>

<p>最初にぶっちゃけておくとViewControllerのテストはしんどいです。できれば書きたくない。
なのでViewControllerが何なのか、きちんと整理しておきましょう。</p>

<p>僕はViewControllerって、</p>

<ul>
<li>ビューからやってきたユーザー操作の実際の処理</li>
<li>モデルへの操作、モデルからのイベントなんかの受け取り、ビューへの反映</li>
</ul>


<p>この2つ(3つ？)にフォーカスしてるべきだと思ってます。
なのでViewControllerって基本的にはステートとかをもっちゃ駄目で、そういうのはロジックとしてモデルで管理されるべきだと思います。</p>

<p>ここをちゃんと意識して書いていくとViewControllerのテストが結構楽になります。
モデルのテストはViewControllerと比較して圧倒的に楽なので、そちらでやりましょう。</p>

<h2>モックを使いまくります</h2>

<p>OCMockなんかのモックライブラリは便利でよく使いますが、僕はほとんどViewControllerのテストの為に使います。
ある程度モデルが完成した段階であれば、モックを使わずに記述していくこともまあ出来るんですが、
例えば「サーバーとの通信に失敗したときの動作」、みたいなのをテストするときに大抵めんどくさいことになります。
モックを使っておけばここは一行でサッパリと書いてしまったり出来るので、基本的には全部モックを差し込みます。</p>

<p>モデル自体が単純なバリューを表すものであればわざわざモックする必要もないかなーとは思うので、まあそのあたりは好みでいいかなと思います。</p>

<p>あとはUILabelとかUITextFieldとか、Storyboardとか使ってるとコードから生成されないものですね。
別にこのオブジェクト自体を作って自分でセットしてあげるようにしてもいいんですが、
さっきと同じような理由で、「ユーザーがHelloWorldと入力したときの動作」、みたいなのをテストするときに大抵めんd（ry</p>

<p>というわけで僕はViewControllerは基本的にモックを使って書いています。</p>

<h2>プライベートとかreadonlyなプロパティに対するモックの差し込み</h2>

<p>テストを始める前に、予備知識として知っている必要のある項目です。
これはViewController以外のテストでも応用できると思うので、わけで書きます。
正しいけどきわどいので、似たようなことをアプリ側でやるのはやめたほうがいいと思います。</p>

<p>これは無名カテゴリを使って、プロパティの宣言を上書きすることで実現します。</p>

<p>例えば</p>

<p>```objective-c</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>@interface MIViewController : UIViewController</p>

<p>@end
```</p>

<p>```objective-c</p>

<h1>import "MIViewController.h"</h1>

<p>@interface MIViewController ()
@property (weak, nonatomic) IBOutlet UILabel *hogeLabel; // &lt;- Stroyboardから作られる
@end</p>

<p>@implementation MIViewController</p>

<p>@end
```</p>

<p>という感じに<code>.m</code>の方でプライベートなプロパティとして宣言するとかよくあると思います。
この無名カテゴリをテストの方にも持ってきます。</p>

<p>```objective-c
@interface MIViewController ()
@property (weak, nonatomic) IBOutlet UILabel *hogeLabel;
@end</p>

<p>@implementation MIViewControllerTests</p>

<ul>
<li>(void)testExample
{
  MIViewController *viewController = [[MIViewController alloc] init];
  viewController.hogeLabel = nil; // &lt;- 通る
}</li>
</ul>


<p>@end
```</p>

<p>こうするとパブリックのようにメッセージを送ることが出来るので、モックに差し替えたりできるわけです。きわどい感じがしますね。</p>

<p>これは完全に雑感ですけど、標準ライブラリでもまあ、よく見ると <code>@property(nonatomic, readonly, retain)</code> みたいな宣言をしてあるものがあって、内部的に<code>property(nonatomic, retain)</code>になってたりするんじゃないかなーと思えるものもあるので、まあまあまあ。</p>

<h2>というわけでテストを書きましょう</h2>

<p>前置きが長くなりましたが、そろそろViewControllerのテストの話をしましょう。</p>

<p>サンプルとしてこんな感じの画面を使います。</p>

<p><img src="/images/viewcontroller-testing-sample.png" width="240"></p>

<p>この画面はモーダルとして呼び出されて、メモを作成&amp;編集できる画面です。
以下のような要件で作られています。</p>

<ul>
<li>タイトルと本文を入力できる</li>
<li>「Done」を押したら、入力したタイトルと本文からメモオブジェクトを作って、delegateへ渡す。</li>
<li>すでに生成されているメモが渡されたら、それを初期値として表示する。</li>
</ul>


<p>実際の実装としては、</p>

<ul>
<li>新規と編集の処理を同じにするために、このViewControllerはメモオブジェクトを作成せずに、外から渡されたメモオブジェクトを更新するようになっています。</li>
<li>ユーザーの入力に影響せず、viewWillDissapearでdelegateを呼び出すようになっています。</li>
</ul>


<p>メモオブジェクトは<code>title</code>と<code>body</code>を持っています。</p>

<p>```objective-c
@interface TBMemo : NSObject
@property (strong, nonatomic) NSString <em>titile;
@property (strong, nonatomic) NSString </em>body;</p>

<ul>
<li>(id)initWithTitle:(NSString <em>)title body:(NSString </em>)body;
@end
```</li>
</ul>


<p>このViewControllerはこんな感じのインターフェイスを持っています。ここではあえて実装は出さないことにします。</p>

<p>```objective-c
@protocol TBMemoEditDelegate
- (void)editViewController:(TBMemoEditViewController <em>)viewController didFinishEditMemo:(TBMemo </em>)memo;
@end</p>

<p>@interface TBMemoEditViewController : UIViewController
@property (weak, nonatomic) NSObject<TBMemoEditDelegate> <em>delegate;
@property (weak, nonatomic) TBMemo </em>editingMemo;
@end
```</p>

<p><code>editingMemo</code>はこのViewControllerが更新するメモオブジェクトでこのViewControllerを呼び出す際に外からセットされます。
またプライベートとして、<code>.m</code>の方でStoryboardから生成される2つのUIを持っています。</p>

<p><code>objective-c
@interface TBMemoEditViewController ()
@property (weak, nonatomic) IBOutlet UITextField *titleTextField;
@property (weak, nonatomic) IBOutlet UITextView *bodyTextView;
@end
</code></p>

<p>今回テストした方がよさそうなのは、</p>

<ul>
<li>viewWillDisappearで、入力したタイトルと本文からメモオブジェクトを更新して、delegateへ渡す。</li>
<li>viewWillAppearで、渡したメモの内容を初期値として設定する。</li>
</ul>


<p>の2つです。</p>

<p>「done」を押した時にどうこうというのは、これは単純に「モーダルを閉じる」とだけの実装であるべきなので、テストする価値が薄いですし、
アプリを調整していく仮定で変更される可能性の高いものなので(やっぱりpushがいいとか)、安全に変更を加えるためのテストが、逆に足を引っ張ってしまいます。</p>

<p>ではテストを書いていきましょう。</p>

<h3>setup</h3>

<p>まずは<code>setup</code>で<code>UITextField</code>なんかをモックに差し替えていきます。</p>

<p>```objective-c</p>

<h1>import "TBMemoEditViewController.h"</h1>

<h1>import "OCMock.h"</h1>

<p>@interface TBMemoEditViewController ()
@property (weak, nonatomic) IBOutlet UITextField <em>titleTextField;
@property (weak, nonatomic) IBOutlet UITextView </em>bodyTextView;
@end</p>

<p>@implementation TBMemoEditViewControllerTests {</p>

<pre><code>TBMemoEditViewController *viewController;
id mockTitleTextField;
id mockBodyTextView;
</code></pre>

<p>}</p>

<ul>
<li><p>(void)setUp {
  [super setUp];</p>

<p>  viewController = [[TBMemoEditViewController alloc] init];</p>

<p>  // UITextFieldを差し替える
  mockTitleTextField = [OCMockObject mockForClass:[UITextField class]];
  viewController.titleTextField = mockTitleTextField;</p>

<p>  // UITextViewを差し替える
  mockBodyTextView = [OCMockObject mockForClass:[UITextView class]];
  viewController.bodyTextView = mockBodyTextView;</p></li>
</ul>


<p>}
@end
```</p>

<p>こんな感じ、これで準備が整いました。</p>

<h3>viewWillAppearで渡したメモの内容を初期値として設定する</h3>

<p>まずはこっちを書いてみましょう。
<code>editingMemo</code>が呼び出し元からセットされますが、この場合はテストケースが呼び出し元になるので、これをセットします。</p>

<p>```objective-c</p>

<ul>
<li>(void)testUpdateViewWithEditingMemoObjectInViewWillAppear {
  TBMemo *editingMemo = [[TBMemo alloc] initWithTitle:@"TITLE" body:@"BODY"];
  viewController.editingMemo = editingMemo;
}
```</li>
</ul>


<p>次にこのメモオブジェクトの値が<code>titleTextField</code>と<code>bodyTextView</code>にそれぞれ、<code>text</code>経由でセットされるはずなので、これをOCMockで<code>expect</code>します。</p>

<p>```objective-c
- (void)testUpdateViewWithEditingMemoObjectInViewWillAppear {</p>

<pre><code>TBMemo *editingMemo = [[TBMemo alloc] initWithTitle:@"TITLE" body:@"BODY"];
viewController.editingMemo = editingMemo;

[[mockTitleTextField expect] setText:@"TITLE"];
[[mockBodyTextView expect] setText:@"BODY"];
</code></pre>

<p>}
```</p>

<p><code>viewWillAppear</code>を呼び出して、</p>

<p>```objective-c
- (void)testUpdateViewWithEditingMemoObjectInViewWillAppear {</p>

<pre><code>TBMemo *editingMemo = [[TBMemo alloc] initWithTitle:@"TITLE" body:@"BODY"];
viewController.editingMemo = editingMemo;

[[mockTitleTextField expect] setText:@"TITLE"];
[[mockBodyTextView expect] setText:@"BODY"];

[viewController viewWillAppear:NO];
</code></pre>

<p>}
```</p>

<p><code>titleTextField</code>と<code>bodyTextView</code>に<code>text</code>を経由して値がセットされたかを<code>verify</code>します。</p>

<p>```objective-c
- (void)testUpdateViewWithEditingMemoObjectInViewWillAppear {</p>

<pre><code>TBMemo *editingMemo = [[TBMemo alloc] initWithTitle:@"TITLE" body:@"BODY"];
viewController.editingMemo = editingMemo;

[[mockTitleTextField expect] setText:@"TITLE"];
[[mockBodyTextView expect] setText:@"BODY"];

[viewController viewWillAppear:NO];

[mockTitleTextField verify];
[mockBodyTextView verify];
</code></pre>

<p>}
```</p>

<p>これでよさそうです。案外、簡単でしたね。</p>

<h3>viewWillDisappearで、入力したタイトルと本文からメモオブジェクトを更新して、delegateへ渡す</h3>

<p>次はこっちです。これはdelegateの扱い方で、大きく分けて2つ方法があります。</p>

<p>1つめはdelegateのモックオブジェクトを使うパターン、そしてテストケース自身がdelegateになるパターンです。
これは結構好みだと思うので、好きな方を採用すればよいかと思います。</p>

<h4>共通部分</h4>

<p>まずは共通なところ、<code>titleTextField</code>と<code>bodyTextView</code>をスタブして、<code>TITLE</code>と<code>BODY</code>が入力された状態を再現します。</p>

<p>```objective-c
- (void)testFinishDelegateWithUpdatedMemoObjectInViewWillDisappear{</p>

<pre><code>// ユーザー入力を再現
[[[mockTitleTextField stub] andReturn:@"TITLE"] text];
[[[mockBodyTextView stub] andReturn:@"BODY"] text];
</code></pre>

<p>}
```</p>

<p>こうすると、<code>titleTextField.text</code>は<code>TITLE</code>が入っている状態になりますね。</p>

<h4>delegateのモックオブジェクトを使うパターン</h4>

<p>OCMockでプロトコルからモックのdelegateを作り、セットします。</p>

<p><code>objective-c
id mockDelegate = [OCMockObject mockForProtocol:@protocol(TBMemoEditDelegate)];
viewController.delegate = mockDelegate;
</code></p>

<p>このモックの<code>editViewController:didFinishEditMemo:</code>が、更新されたメモオブジェクトを持って呼び出される事を期待します。
これには<code>[OCMArg checkWithBlock:]</code>を利用します。</p>

<p>```objective-c
[[mockDelegate expect] editViewController:viewController didFinishEditMemo:[OCMArg checkWithBlock:<sup>BOOL(id</sup> obj) {</p>

<pre><code>TBMemo *memo = (TBMemo *)obj;
return [memo.titile isEqualToString:@"TITLE"] &amp;&amp; [memo.body isEqualToString:@"BODY"];
</code></pre>

<p>}]];
```</p>

<p>そして、メモオブジェクトをセットして、<code>viewWillDisappear</code>を呼び、<code>verify</code>します。</p>

<p>```objective-c
TBMemo *edtingMemo = [[TBMemo alloc] init];
viewController.editingMemo = edtingMemo;</p>

<p>[viewController viewWillDisappear:NO];</p>

<p>[mockDelegate verify];
```</p>

<p>全体としてこんなテストになります。</p>

<p>```objective-c
- (void)testFinishDelegateWithUpdatedMemoObjectInViewWillDisappear{</p>

<pre><code>[[[mockTitleTextField stub] andReturn:@"TITLE"] text];
[[[mockBodyTextView stub] andReturn:@"BODY"] text];

id mockDelegate = [OCMockObject mockForProtocol:@protocol(TBMemoEditDelegate)];
[[mockDelegate expect] editViewController:viewController didFinishEditMemo:[OCMArg checkWithBlock:^BOOL(id obj) {
    TBMemo *memo = (TBMemo *)obj;
    return [memo.titile isEqualToString:@"TITLE"] &amp;&amp; [memo.body isEqualToString:@"BODY"];
}]];
viewController.delegate = mockDelegate;

TBMemo *editingMemo = [[TBMemo alloc] init];
viewController.editingMemo = editingMemo;

[viewController viewWillDisappear:NO];

[mockDelegate verify];
</code></pre>

<p>}
```</p>

<h4>テストケース自身がdelegateになるパターン</h4>

<p>こっちはiOS部では説明してなかったです。(すればよかった)</p>

<p>まずは、テストケースがDelegateを実装することを宣言します。</p>

<p><code>objective-c
@interface TBMemoEditViewControllerTests () &lt;TBMemoEditDelegate&gt;
@end
</code></p>

<p>テストケースにdelegateを実装します。渡ってきたメモオブジェクトを<code>editedMemo</code>にとっておきます。</p>

<p>```objective-c
- (void)editViewController:(TBMemoEditViewController <em>)viewController didFinishEditMemo:(TBMemo </em>)memo {</p>

<pre><code>editedMemo = memo;
</code></pre>

<p>}
```</p>

<p>自身をdelegateにして、<code>viewWillDisappear</code>を呼びます。</p>

<p>```objective-c
viewController.delegate = self;</p>

<p>TBMemo *edtingMemo = [[TBMemo alloc] init];
viewController.editingMemo = edtingMemo;</p>

<p>[viewController viewWillDisappear:NO];
```</p>

<p><code>editedMemo</code>に更新されたメモオブジェクトがあるはずなので、これをアサートします。</p>

<p><code>objective-c
STAssertEqualObjects(editedMemo.titile, @"TITLE", nil);
STAssertEqualObjects(editedMemo.body, @"BODY", nil);
</code></p>

<p>これでよさそうです。全体としてはこんな感じ。</p>

<p>```objective-c
- (void)testFinishDelegateWithUpdatedMemoObjectInViewWillDisappearWithSelfDelegate {</p>

<pre><code>[[[mockTitleTextField stub] andReturn:@"TITLE"] text];
[[[mockBodyTextView stub] andReturn:@"BODY"] text];

viewController.delegate = self;

TBMemo *editingMemo = [[TBMemo alloc] init];
viewController.editingMemo = editingMemo;

[viewController viewWillDisappear:NO];

STAssertEqualObjects(editedMemo.titile, @"TITLE", nil);
STAssertEqualObjects(editedMemo.body, @"BODY", nil);
</code></pre>

<p>}</p>

<ul>
<li>(void)editViewController:(TBMemoEditViewController <em>)viewController didFinishEditMemo:(TBMemo </em>)memo {
  editedMemo = memo;
}
```</li>
</ul>


<p>どうでしょう、僕は前者の方が好みですが、分かりやすいのは多分後者ですかね。</p>

<h2>まとめ</h2>

<p>こんな感じのことを解説しました。
ちゃんと分割していけば、複雑になるかもしれないですが、大抵はこのパータンで事足りるかなーと思います。</p>

<p>非同期の終了をまってからBlocksでほげほげ、とかはOCMockの<code>andDo:</code>とかでうまい感じに表現できますし、<code>NSNotification</code>とか使う場合にも結構素直に書けます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AppCodeで華麗にテストをキメる！]]></title>
    <link href="http://yaakaito.org/blog/2012/12/09/adv-appcode-splendid-testing/"/>
    <updated>2012-12-09T00:02:00+09:00</updated>
    <id>http://yaakaito.org/blog/2012/12/09/adv-appcode-splendid-testing</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！！
<a href="http://qiita.com/advent-calendar/2012/objective-c">Objective-Cアドベントカレンダー2012</a> 8日目の記事です。
みなさんiOSアプリを開発するときに当然テストを書くと思うんですが、このテストメソッドだけ試したいなーってときに、
XcodeだとManageShemesからチェックを外して・・・とか、できるんですが、非常に面倒ですよね！！！
そんなあなたにAppCodeがおすすめです！</p>

<h2>テストメソッド単位で実行をキメよう！</h2>

<p>とりあえずキメてみましょう！テストフレームワークはSenTestingKitです。</p>

<p>普通にテストを書いていって・・・</p>

<p><img src="/images/adv-testing-test-case.png" width="420"></p>

<p>この<code>testMappedArrayUsingBlock</code>だけを実行して確かめてみたいなーと思っずたら、
キーバインドを弄っていない場合は<code>Command + Option + R</code>(多分あってるはず)なんかで、Run > Run... を呼び出します。
そうするとこんな感じのメニューが現れて・・・</p>

<p><img src="/images/adv-testing-select.png" width="420"></p>

<p><code>2</code>を押すと、このコンテキストのみを実行してくれます。
すると・・・</p>

<p><img src="/images/adv-testing-result.png" width="420"></p>

<p>こういう感じに<code>testMappedArrayUsingBlock</code>だけ実行してくれます！便利ですね！！！</p>

<p>あとはガンガンテストをかいてガンガン実行してカイラクを得ましょう！！！</p>

<h2>ちなみにこれをXcodeで開いてみると・・・</h2>

<p><img src="/images/adv-testing-xcode.png" width="320"></p>

<p>こんな感じになっています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリのテストを１週してみて思ったこと]]></title>
    <link href="http://yaakaito.org/blog/2012/11/12/ios-testing-cycle-1/"/>
    <updated>2012-11-12T21:57:00+09:00</updated>
    <id>http://yaakaito.org/blog/2012/11/12/ios-testing-cycle-1</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
iOSアプリのテストのことをそろそろ１年くらい考えていて、１周した感じもするので、
ここら辺で一旦の区切りの意味でもなんとなく考えをまとめてみる。
ちなみにテストというのは主に単体テストにフォーカスした内容です。</p>

<p>こういう系のエントリを書くと、僕はわりと誤解を生みやすい書き方をしてしまうので先に断っておくと、</p>

<ul>
<li>なんらかのアプリ開発手法や、テスト手法をDisっているわけではないです。</li>
<li>フレームワークがいろいろ登場したりしますが、それらをDisっている訳ではないですし、それぞれ素晴らしいものだと思っています。</li>
<li>同じくそのフレームワークを使っているプロジェクトも登場しますが、それらをDisっている訳でもありません。</li>
<li>もちろん特定個人をDisる内容でもありません。</li>
</ul>


<p>という感じで、何かをDisってる記事ではないので、ご了承ください。</p>

<p>長めです。結局何がよかったの、っていう人は下の方から見てください。</p>

<h2>テストフレームワークの変遷</h2>

<h3>はじめの一歩</h3>

<p>皆さんご存知SenTestingKitです。
ほかにどんなフレームワークあるのか知らんし、とりあえずこれで書けなきゃどっちにしろ無理だろ、という感じでした。セットでOCMockも使っていました。
記憶が正しければ、Xcodeは4.1で、iOS4.x~を対象にしたアプリを作っていた記憶です。
ぶっちゃけこのころはSenTestingKitがどうしようもない感じで、状況によっては <code>STAssertTrue(YES)</code> が落ちたりしていました。
それでもある程度のテストを書くことはできました。モデルのテストは十分に書ける感じ。ビュー関連に関しては完全に諦めモードでしたが・・・。
この頃はアプリ全体をテストしていたのと、あんまり慣れていないところもあって、テストケースが冗長だったり、テストが思ったのと違う動きをしたり、いろいろありました。</p>

<h3>安定を求めてGHUnitへ</h3>

<p>まじなんとかならんの、とか思っていたときに良さげだなーとなったのがGHUnit。
GHUnitはそれ自体がアプリとして動いて、その上でテストコードを実行するというもの。
SenTestingKitと比較して圧倒的に安定しているのと、SenTestingKitと互換性があるのがプラス点。
さらには<code>GHVerifyView</code>というビューを画像の一致率でテストできるものもあったり、非同期テスト標準であったりと、盛りだくさん。
この時期に作っていたもので公開しているものでは、NLTHTTPStubServerはテストがGHUnitで書かれています。
アプリ開発をしつつも、アプリのコア部分をフレームワーク化する、ということもやっていたし、
特にフレームワーク側はちゃんとテスト固めないとなぁという意味でも、安定しているGHUnitを選択しました。
アサーションもSenTestingKitよりも断然豊富で、iOSのテストに慣れてきたのもあって、
テストケースはわりと綺麗に書けるようになっていった気がします。(どうしようもないところもありますが。)</p>

<p>使いはじめの時点ではほとんど問題なく、これでいいや、という感じでしたが、GHUnitは使い続けるうちに問題がでてきました。
GHUnitの問題点は、GHUnit自体がiOSアプリとして動くものなので、ターゲットを切り替えたりでどうしてもテスト実行とかがスムーズにできないところ。
GHUnitを2つのチームで使ってみましたが、保守できたのは片方だけだったので、思いの他このコストは高かったみたいです。
実行されないテストに価値はないし、実行時に障害があるのは問題外。同じアプリで動くタイプでBDDスタイルなCedarもこの段階で却下。
あとはテストログの表示がイケてないなーと思うところもありました。この辺りはちょっと弄ってあげればすむ話ではありますが、それでもコストが高め。</p>

<h3>BDD系への転向</h3>

<p>次に触ってみたのはObjective-C版RspecことKiwiです。
GHUnitの時と同じくこの時期に作っていたNLTQuickCheckにはテストにKiwiが使われています。
これはこの段階ではアプリのテストにはまったく利用していなくて、NLTQuickCheckみたいなObjective-C製のライブラリ開発に利用していました。
ライブラリを書いている分にはKiwiはめちゃくちゃいいです。QuickCheckみたいに、ビューが絡まない中で一旦非同期処理などもあまり考えずに済むというのは、テストを書いていく上では快適でした。
ただKiwiはすぐに問題にぶちあたることになります。単純にGHUnitの<code>GHVerifyView</code>がアプリ開発で便利すぎたので、
どうしてもアプリを作ろうと考えるとGHUnitの方が良さそうに思えました。</p>

<h3>ビューテストをするためにGHUnitへ戻る</h3>

<p>そしてGHUnitへ戻ることになります。
結構複雑なビューをもつアプリを作っていたこともあって、ビューをコンポーネント単位で視覚的に動作確認できるのは、ものすごく便利でした。
ただやっぱりXUnit形式で書くのがもはやしんどい感じになっていて、ダルぽよ〜〜〜という状態でした。</p>

<h3>もう一度BDD系へ戻る</h3>

<p>Kiwiに戻ってきました。このあたりできれいなBDD、に対する回答を求めてTheRSpecBookなんかを読み始めました。
TheRSpecBookは非常によい本で、BDDってなんじゃ、みたいなところから実際にこんな感じで進めるといいよ、ということが書いてあって参考になりました。
ただ、じゃあそれiOSアプリ開発でObjective-C使って実践できんの、といわれるとそういう訳ではなく。
最初の方はとにかくSpecを全部書ききってから実装する、みたいなことも試してみましたが、あんまりしっくりこない。(ノッてるとうまくいっていると錯覚はする。)
BDDやるならビヘイビアにドリブンなデベロップしないと意味ないよねー、後付けのBDDとか何の意味があるんや！！！ってことで、OH！やっぱり今回も駄目だったよ。状態に。</p>

<h3>さらにBDD系を突き詰めてみる</h3>

<p>けどここで引き下がるのも勿体ないので、注目度があがってきたSpectaに乗り換えてもう一度チャレンジしてみることに。
<code>theValue</code>を書かなくともよくなった分、やりやすさはあがった気がします。ヤッホーイ！
だいたいモデル層はめちゃくちゃ綺麗にいけるようになってきたんですが・・・・え？View・・・？・・・
とりあえずビューはFrankでカバーするかーという感じになったのですが、結局のところ作ってみてだいたいこんな感じやろ、
という調整が多くなるビューでいちいちテストとか書いてられるか！！！という感じになった。</p>

<h3>原点回帰</h3>

<p>という訳でSenTestingKitまで戻ってきました。KiwiやSpectaが普段の開発で困らない分には動くってことは生でも動くってことです。
僕はあんまり思ってなかったんですが、Blocks使うとスタックトレースが追いにくくなるとかも、ちょいちょい聞くので素直にSenTestingKitがよくね？ということに。
それでもアサーションとかは不足しているので、OCHamcrestとかで補いつつ、非同期テストケースとかもサンプルがたくさんあるし、Githubなんかで拾ってこれば十分かなぁと。
普段はTDDで開発して、ビューは先に動きのプロトタイプを作ってしまって、あとからそれを補強していく、というので全然問題ないと思う。
GHUnitはやっぱり実行コストが高いし、SenTestingKitでいけるならそれでいいじゃない。Cmd+Uがないとテスト書く気起きないっていうか・・・。</p>

<h3>変遷まとめ</h3>

<p>とりあえずまとめておくと僕はこんな感じで使ってきました。
SenTestingKit -> GHUnit -> Kiwi -> GHUnit -> Kiwi -> Specta -> SenTestingKit</p>

<h2>iOS開発でよくあることを踏まえたい</h2>

<p>ここから割とエンジニアリングとは逆方向な内容になります。
ただ僕もエンジニアなので、ディレクターとかデザイナー目線でみると違うかもしれません。</p>

<h3>ビューを優先して組み立てるべき</h3>

<p>お客さんがみたいのはビューですし、ディレクターがみたいのもビューなら、みなさんがアプリ作りたいと思ったとき最初に頭に浮かぶのもビューです。
iOSアプリ作ってていつも思うのが、いくらモデル層をきれいに分離して、きれいなAPIを設計で綺麗なテストができたとしても、
アプリのファーストビューを表示するためにAPIを3つも4つも呼んでその上計算までしなきゃいけない、
とかだとハイパフォーマンスなアプリとは到底言えないですよね。ということ。
「本当の気持ちなんて伝えられるわけないのよ、だって私は、綺麗な世界とは違う世界をいきているんだもの！！！RESTfullとかしらないわよ！！！全部まとめて返してよ！！！」
という感じです。別にiOS限った話ではないですが、クライアントはだいたいそんな感じだと思ってます。(しつこいですがDisったりしてる意図ないです)</p>

<h3>やっぱさ、新しい機能とか試してみたいじゃん？</h3>

<p>ですよね、僕もそう思います。そういうのってスピードが大事じゃないですか。
テスト書いてる暇とかないわ、というのは嘘かサボりだと思いますが、プロトにいちいちテスト書いててもキリがないというのはあると思います。
OS自体のアップデートも早いし、界隈の流行り廃りもまだまだ早いので、保守にあまりにもコストを掛けすぎるのはあまりチャレンジングではないと思います。</p>

<h3>なんか思ってたのと違うんだけど</h3>

<p>よくあることです。諦めてください。
テスト書きまくって苦労しました、みたいなアホな状態になってたら悪いのはちゃんとプロト見せたりしなかった開発者です。</p>

<h3>テストってさ？コストかかるんでしょ？</h3>

<p>開発をサポートするテストは書いても書かなくても開発速度にそこまで差はないと思います。
長期的にみたらテストは書いた方がいいですが。</p>

<h3>人海戦術でなんとかなるっしょ？</h3>

<p>アホか。</p>

<p>と言いたいところですが、そういう場面があることは確かです。</p>

<h3>よくあることまとめ</h3>

<p>まあ、iOS開発に限ったことじゃないですが(2回目ですね)、巻き戻しとか、もっといいの目指そう！とかそういうのはあるし、
それが正しい場面もあるので、あんまり過剰にやりすぎないようにしないとトータルとしてのパフォーマンスが下がるので、それでは意味がない。</p>

<h2>とりあえず１週目の結論として</h2>

<p>普通にアプリ作る分には単体テストはSenTestingKit+拡張マッチャでモデル中心に大丈夫と思えるところまで書け。ということになりました。割と普通です。
カバレッジを100%にあげるとかはかなりしんどいですし、多分リターンは思ったより少ないです。iOSアプリ、試作とかでわりと中変えたりすること多いし。
なのであるリリースラインに向けて、開発者（とディレクター）がよし行ける！と思える分のテストが書ければそれでよいと思います。
もちろん高いことに超したことはないです。例えば何かのSDK作るとかって場面ではカバレッジは意識した方が良いに決まっています。
けれど、無理にカバレッジをあげるよりも、大丈夫！というラインで意識する方が、いろいろ進めやすいと思います。
勘違いのないように言っておきますが、テスト書かなくともいいやろ、という事ではありません。
テストを書くのが目的にならないように、ということです。本質はそこではありません。
設計上テストが楽になるライブラリとかもあればガンガン使えばいいと思います。(CoreDataで言えばMagicalRecodeとか)</p>

<p>そして、いわゆる単体テストでビュー全体の遷移とかをカバーしようとすると相当しんどいです。
このあたりにはFrankやKIFなどのドライバー系のツールをうまく使うとよいと思います。
TheRSpecBookなんかにも出てくる二重のテストイテレーションを真似ましょう。
ただFrankやKIFについてはまだなんか話せるほど知識がないので２週目にご期待くださいということで。</p>

<p>普通に、と言ったのにはちょっと意味があって、テストフレームワークに関して言えば、アプリによって変えるべきです。
ここでいう普通のアプリは例えばユーティリティアプリだったり、何かのサービスのクライアントだったり、という感じです。
iOSでガッツリ動くゲームとか、もっと大規模なものを作りたいなら、いまのところはまだGHUnitの方がよいと思います。
逆にビューの存在しないライブラリを書くのであればBDD系のフレームワークでBDDしても全然OKだと思います。</p>

<h2>まとめ</h2>

<p>こんなこと書いてて僕が言うのもあれなんですが、テスト書くの目的にしちゃうと絶対に終わらないです。
ここのテストしんどそうだなーと思ったら、それはしんどいんだと思います。
時には人海戦術でパターン入れてみる、というのも必要だと思いますし、
結局のところ人が触らないと分からないところも多いですが、それもテストです。</p>
]]></content>
  </entry>
  
</feed>

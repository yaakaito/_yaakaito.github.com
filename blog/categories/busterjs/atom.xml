<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: BusterJS | yaakaito.org]]></title>
  <link href="http://yaakaito.github.com/blog/categories/busterjs/atom.xml" rel="self"/>
  <link href="http://yaakaito.github.com/"/>
  <updated>2013-03-01T03:06:55+09:00</updated>
  <id>http://yaakaito.github.com/</id>
  <author>
    <name><![CDATA[yaakaito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BusterJSでテストに使うHTMLの設定と手動実行]]></title>
    <link href="http://yaakaito.github.com/blog/2013/03/01/buster-testbed-and-boot/"/>
    <updated>2013-03-01T02:35:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/03/01/buster-testbed-and-boot</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
みなさんJavaScriptのテスト書いてますか？当然書いてますよね？？？</p>

<p>JSでテスト書く時に、こういうHTMLを使いたいんだけど的なことってあると思います。
BusterJSはデフォルトでいい感じのHTMLを作って使ってくれるので楽にテストをはじめられるんですが、まあ差し替えたいよねーってことで差し替えます。</p>

<p>BusterJSではこれをtestbedと呼んでいて、設定ファイル(だいたいの場合は<code>buster.js</code>)で設定することができます。
設定の仕方は<a href="http://docs.busterjs.org/en/latest/overview/#custom-test-beds">こんな感じ</a>なんだけど、いまんところ<code>testbed</code>ってプロパティは設定できないので、<code>resources</code>から設定します。</p>

<p>```javascript
var config = module.exports;</p>

<p>config["test"] = {</p>

<pre><code>sources: ["lib/*.js"],
tests: ["test/*-test.js"],
resources : {
    path : "/",
    file : "hoge.html"
}
</code></pre>

<p>};
```</p>

<p>というわけでこんな感じに設定を追加します。こうすると<code>hoge.html</code>を使ってテストを走らせてくれます。
で、テスト用のファイルを読み込まなきゃいけないわけで(sourcesとかtestsに設定してるやつ)、それがどこに埋め込まれるのかなーというと、コードを見てみた感じ、</p>

<ol>
<li><code>{{scripts}}</code> という文字列を探して、あったらそこを置き換える</li>
<li><code>&lt;/body&gt;</code> を探して、あったらその直前に置く</li>
<li><code>&lt;/html&gt;</code> を探して、あったらその直前に置く</li>
<li>何も見つからなかったら、一番最後に連結する</li>
</ol>


<p>という順番になってた。(<code>resource-middleware</code>とか読めば分かる)
なので、例えばテストの時だけ <code>initialize</code> みたいな関数を、セットアップスクリプト走らせる前に置き換えたいんだけど的なときは、(↓みたいな感じの場合)</p>

<p>```html</p>

<script src="hoge.js"></script>


<!-- この中に initialize って関数があるとする -->


<script>
// この時点までにテストのときだけinitializeを置き換えてほしい ＞＜
initialize({
    hoge : fuga
});
</script>


<p>```</p>

<p><code>{{scripts}}</code> を使って、</p>

<p>```html</p>

<script src="hoge.js"></script>


<p>{{scripts}}</p>

<script>
initialize({
    hoge : fuga
});
</script>


<p>```</p>

<p>こういう感じにする。で、<code>bootstrap.js</code>みたいなのを用意してあげて、
<code>javascript
// bootstrap.js
initialize = function() { } // 何もしないでーーー＾ー＾
</code></p>

<p>これを<code>sources</code>に追加する。</p>

<p>```javascript
var config = module.exports;</p>

<p>config["test"] = {</p>

<pre><code>sources: ["lib/*.js", "bootstrap.js"],
tests: ["test/*-test.js"],
resources : {
    path : "/",
    file : "hoge.html"
}
</code></pre>

<p>};
```</p>

<p>とすると、実際にテストで使われるファイルは、</p>

<p>```html</p>

<script src="hoge.js"></script>


<script src="bootstrap.js"></script>


<script src="テストとか"></script>


<script>
initialize({ // なにも・・・なかった・・・
    hoge : fuga
});
</script>


<p>```</p>

<p>こんな感じになる。便利！</p>

<p>で、次にテストの実行開始タイミングをコントロールしたいと思うんだけど、割と簡単んで、<a href="http://docs.busterjs.org/en/latest/starting-testrun-manually/#starting-testrun-manually">この辺</a>にも書いてあるように、</p>

<p>```javascript
var config = module.exports;</p>

<p>config["test"] = {</p>

<pre><code>autoRun: false,
sources: ["lib/*.js"],
tests: ["test/*-test.js"],
resources : {
    path : "/",
    file : "hoge.html"
}
</code></pre>

<p>};
```</p>

<p><code>autoRun</code>を<code>false</code>にして、さっきの例だと、<code>initialize</code>まで呼ばれたら実行してほしい！とかなら、</p>

<p>```javascript
// bootstrap.js
initialize = function() {</p>

<pre><code>buster.run();
</code></pre>

<p>}
```</p>

<p>みたいな感じ</p>

<p>というわけでテストに使うHTMLも設定できましたし、ガンガンテストできますね！</p>

<p>そういや別にもう一個なんか書こうと思ってたんですが、忘れたので知ってる人いたら教えてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Buster.JSについて少しLTした]]></title>
    <link href="http://yaakaito.github.com/blog/2012/10/16/busterjs-clientjs-testing/"/>
    <updated>2012-10-16T22:24:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2012/10/16/busterjs-clientjs-testing</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。
突然LTすることになったので、最近気になってるBuster.JSネタで話してきました。
LTなのであんまり内容は濃くないです。iPhoneシュミレーターとかでも楽に動くし便利だね！というくらいです。</p>

<script async class="speakerdeck-embed" data-id="507b79def901500002026b02" data-ratio="1.3333333333333333" src="http://yaakaito.github.com//speakerdeck.com/assets/embed.js"></script>


<p>スライドにはほとんど情報がないので、どんな感じで話したかを箇条書きで。</p>

<ul>
<li>yaakaito.orgが変なところに飛ばされとる (今はなおったみたい)</li>
<li>みんなJSかきますよね！テストやってますか？？？</li>
<li>フレームワークいろいろありますが、最近はBuster.JSがアツい</li>
<li>JSTestDriverのようにブラウザ上での自動実行と、ヘッドレスでの実行がサポートされている</li>
<li>"Test-Driven JavaScript Development"でも言及されていますが、実際の環境で動かせることは大事</li>
<li>ちなみにこの本書いた人がBuster.JSの作者で、Buster.JSはこの本に書いてある理想を実際に行おうとしている</li>
<li>けど、ヘッドレスでも動くしNodeも扱えるので、使い分けがしやすくて便利</li>
<li>ヘッドレスはまだサポートされてると思った？残念、ベータちゃんでした！</li>
<li>ともあれ便利なので使ってみよう</li>
<li>npmで簡単インストール</li>
<li>buster.jsというコンフィグを書いて、テストを書く</li>
<li>サーバーを立ち上げてテスト対象になるブラウザでアクセス、対象として登録</li>
<li>ChromeやFirefoxはもちろんiOSシュミレーターなんかでもばっちり！(実機もいけるよ！)</li>
<li>RSpecみたいなBDDstyleの書き方もできるよ</li>
<li>sinon.jsとwhen.jsが内蔵されているのでこれ一つで結構いろいろできるよ！ (ちなみにsinon.jsも同じ作者だったはず)</li>
<li>クライアントサイドJSもテスト書こうね！</li>
</ul>


<p>みたいな感じです！</p>
]]></content>
  </entry>
  
</feed>

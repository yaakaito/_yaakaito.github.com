<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | yaakaito.org]]></title>
  <link href="http://yaakaito.org/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://yaakaito.org/"/>
  <updated>2013-04-12T10:19:45+09:00</updated>
  <id>http://yaakaito.org/</id>
  <author>
    <name><![CDATA[yaakaito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScriptの似非オーバーロードが気に入らない]]></title>
    <link href="http://yaakaito.org/blog/2013/04/11/javascript-overload/"/>
    <updated>2013-04-11T22:36:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/11/javascript-overload</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。
なんかJavaScriptで似非オーバーロードとか省略可能引数使う人結構いますよね。かっこいいですか、そうですか。
僕これ嫌いなんで、書いておこうと思います。</p>

<h2>実際によくあるコード</h2>

<p>こういうコードがよくありますかね、Backboneとかでも<code>Events.off</code>とかがこうなってます。</p>

<p>```javascript
function(a) {
  if (a) {</p>

<pre><code>// aを使った処理
</code></pre>

<p>  }
  else {</p>

<pre><code>// 引数がないと判定された時の処理
</code></pre>

<p>  }
}
```</p>

<p>他にも、引数によって挙動が違うのたくさんありますよね、jQueryとかjQueryとかjQueryとか。</p>

<h2>まずもって間違っている</h2>

<p>上の例の場合、<code>f()</code> と <code>f(undefined)</code> を区別する事は出来ません。
<code>f()</code> で期待される挙動は <code>f(undefined)</code> で期待される挙動とは、異なるはずですよね。</p>

<p>これは<code>arguments</code>を見る事である程度解決できます。</p>

<p>```javascript
function(a) {
  if (argument.length === 0) {</p>

<pre><code>// 引数がないときの処理
</code></pre>

<p>  }
  // その他
}
```</p>

<p>この件に関して、ちょうどSpineのコードを読んでいて、イラッとしたのでプルリクしました。
無事にdevにマージされたみたいなので良かったですね。</p>

<h3>【補足】勘違いのないように</h3>

<p>@kazuhoさんからこんなコメントをもらって、確かにそう読めると思ったので補足する。</p>

<p><blockquote><p>正論なんだけど、それ以前に、そもそも引数としてundefined渡すのが間違い。null使うべき</p><footer><strong>@kazuho</strong> <cite><a href='https://twitter.com/kazuho/status/322496581867810816'>twitter.com/kazuho/status/&hellip;</a></cite></footer></blockquote></p>

<p>これは、<code>f()</code>と<code>f(hoge)</code>で挙動が違うことを前提にしているのであれば、その実装は正確には間違っている(<code>f(undefined)</code>も引数一つとして扱われるべき)、という主張です。
<code>undefined</code>を使って書いているのは、省略されたときにその引数は<code>undefined</code>になるのだから、
その方が問題としていることが分かりやすいだろう、という意図があってです。</p>

<p>@kazuhoさんがおっしゃっているように、そもそも<code>undefined</code>を入れない事が前提があって、
だから<code>undefined</code>であると判定することにメリットがある、というのはもちろんその通りだと思います。</p>

<p>単純に、僕が嫌だなーと思っていることなので、そこで勘違いが起こってしまっても意味はないなと思うので、補足しました。</p>

<h2>挙動を変えないでください</h2>

<p>そもそも同じ関数で複数の挙動を持つなと言いたい。
少なくとも僕は、そんな挙動を信じられるほど頭がよくない。</p>

<p>jQueryでよくあるけど、<code>$</code>がいろいろ出来すぎて、XSS出してますよね。</p>

<p>他にも、省略することで返ってくるもののスコープが大きくなっていく関数とかよくありますよね、嫌いです。</p>

<h2>別にかっこよくも見やすくもないです</h2>

<p>なんでこうやってるのか知らないですけど、ダサいと思ってます。
<code>off</code>とか、<code>offAll</code>と<code>off</code>に分けてもらった方が分かりやすいです。
<code>$</code>もセレクトだけでいいです。作らないでください。</p>

<h2>省略可能引数はオブジェクトを渡してください</h2>

<p>省略可能引数は、</p>

<p><code>
f(a, b, {
  c : c,
  d : d
});
</code></p>

<p>という形式で書かれるべきです。</p>

<h2>挙動が異なる関数は分けください</h2>

<p><code>
$select();
$create();
</code></p>

<p>とか</p>

<p><code>
elem.html();
elem.setHtml():
</code></p>

<p>とか</p>

<p><code>
Events.unbind();
Events.unbindAll();
</code></p>

<p>にしてください。</p>

<p>どっちの方が挙動を推測しやすいかは一目瞭然だと思いますし、僕はコードゴルフがしたいわけじゃありません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[体感的には学ばないBackboneとSpine: Events編]]></title>
    <link href="http://yaakaito.org/blog/2013/04/06/not-head-first-backbone-and-spine-events/"/>
    <updated>2013-04-06T09:42:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/06/not-head-first-backbone-and-spine-events</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！頭と体でも学びません。
というわけでBackboneとSpineコードを写経しましょう、根気で覚えます。
そしてヘタクソなりにブログにまとめることで精進します。ショージンショージン。
暇な人は是非一緒にやりましょう！</p>

<p>今回はEvents編です。中核ですね、やりましたね！
Eventsを押さえればMVCなど理解したも当然・・・という訳ではないですが、重要な部類だし、APIの差がほとんどないので読みやすいところです。</p>

<p>写経したコードにはゴミみたいな日本語で解説が書いてあるので、見たい人は合わせてお読みください。(逆に混乱する可能性があるので本家を見た方がいいです)</p>

<p>本家 <a href="https://github.com/documentcloud/backbone/blob/master/backbone.js#L78">Backbone.Events</a> | <a href="https://github.com/spine/spine/blob/master/src/spine.coffee">Spine.Events</a></p>

<p>僕 <a href="https://github.com/yaakaito/Syakyo/blob/master/backbone/events.js">Backbone.Events</a> | <a href="https://github.com/yaakaito/Syakyo/blob/master/spine/events.coffee">Spine.Events</a></p>

<h2>Eventsってなに</h2>

<p>要はObserverパターンです。</p>

<p>BackboneとSpineの間でEventsのAPIの差は、名前が違うくらいでほとんどないです。
どちらも <code>on</code>/<code>bind</code> でイベントをはって、<code>trigger</code>で通知します、簡単ですね。</p>

<p>あとは書いて覚えろ！</p>

<h2>実装方法について</h2>

<p>どちらも<code>this</code>に対して特定のオブジェクトを生成して、そこにイベント情報を突っ込んでいく形です。
オブジェクトとして吐き出されているので、使いたいときは<code>extend</code>して使います。</p>

<p>Backboneは、引数としてthisにバインディングするオブジェクトを取ることができるので、その分複雑になっています。
一方でSpineはそれを取らずに、単純なコールバックのリストして管理しています。<code>=&gt;</code>を使えばよいのでは、ってことだと思う。</p>

<h2>ボリューム感</h2>

<p>さっきも書きましたが、Backboneの方がちょっと複雑です。
コードはJavaScriptとCoffeeScriptなのであれですが、Spineの方がすっきりします。
読むならSpineからがいいかなと思います。</p>

<h2>というわけでいってみよー</h2>

<p>僕が写経したやつを整理して貼っていきます。</p>

<h3>on / bind</h3>

<p>Backbone:
```javascript
on: function(name, callback, context) {</p>

<pre><code>// eventsApiに聞いてみて、オーバーロードされてる形ならあとはeventsApiに任せる
if(!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;

// eventsApiか、きれいな形で呼び出されたとき (not 複数 and マップ)
// イベントを登録する
this._events || (this._events = {}); // _eventsなかったら作る

// すでに同じ名前のイベントがあったらそのArray、なければその名前で新しいArrayを作ってアサイン 
var events = this._events[name] || (this._events[name] = []);       

// イベントを登録
events.push({callback: callback, context: context, ctx: context || this});
return this;
</code></pre>

<p>}
```</p>

<p>Spine:
```coffeescript
bind: (ev, callback) -></p>

<pre><code># 複数登録のパターンなら分割して一個ずつ ex: 'a b c'
evs     = ev.split(' ')
# なかったら作ってから取得
calls   = @hasOwnProperty('_callbacks') and @_callbacks or= {}
for name in evs
    # 対応するものがなければ作る
    calls[name] or = []
    # 登録
    calls[name].push(callback)
return this
</code></pre>

<p>```</p>

<p>Bacbkoneの方で<code>eventsApi</code>というのが登場してますね！
これはBackbone特有の疑似オーバーロードを実装するためのものです。Backboneは結構これがキモですね。
Backboneは以下のようなパターンでイベントを登録することができます。</p>

<p><code>javascript
obj.on('event', callback);
obj.on('event', callback, context);
obj.on('event event2', callback);
obj.on('event event2', callback, context);
obj.on({
  'event' : callback,
  'event2' : callback
}, context);
obj.on({
  'event event2', callback,
  'event3 event4', callback
} , context);
</code></p>

<p>結構複雑ですね。これを解釈していって、最終的に</p>

<p><code>javascript
obj.on('event', callback, context);
</code></p>

<p>この形式になるようにして、必要な回数呼び直すのが<code>eventsApi</code>です。したのは、<code>on</code>から呼ばれたことを前提に説明しています。</p>

<p>```javascript
var eventsApi = function(obj, action, name, rest) {</p>

<pre><code>if (!name) return true; // 名前ないとか論外

// マップ形式だったら
if (typeof name === "object") {
    for (var key in name) {
        /*
        自身の on を呼び直す
        マップ形式
        {
            'name' : callback 
        }
        なので on(name , callback , context) となるようにして全部呼び直す 
        この場合はonのcallbackにはcontextが入っているはずなので(わたってくるのが[context, undefned])、
        結果として on(name , callback , context, undefined) が on(name , callback , context) になる。
        ちょっとトリッキー
        */
        obj[action].apply(obj, [key, name[key]].concat(rest));

        // マップ形式だったので失敗 == 呼び直した、と返す
        return false;
    }
}

// 複数名前が ("hoge fuga piyo") 含まれているときは
if(eventSplitter.test(name)) {
    var names = name.split(eventSplitter);
    for(var i = 0, l = names.length; i &lt; l; i++) {
        /*
        自身の on を呼び出す
        複数なのでsplitして１個づつ呼び直す
        この場合はcallbackはrestに含まれているので、nameだけ設定してconcatすると
        on(name, callback, context) となる
        */
        obj[action].apply(obj, [names[i]].concat(rest));
    }
}

// ここまできた場合は一番シンプルな形 on('hoge', callback, context) で呼び出されているときなので、
// それぞれの処理をお願いするために成功させる
return true;
</code></pre>

<p>}
```</p>

<p>これは他のメソッドの実装でも使われる物なので、最初にどういう動きをするか抑えておきましょう。</p>

<p>spineは結構シンプルで、<code>"event event2"</code>の形にだけ対応しています。</p>

<p>Backboneは<code>context</code>というのがあるので、その分イベントの登録が複雑です。</p>

<p>Backbone:
<code>javascript
events.push({callback: callback, context: context, ctx: context || this});
</code></p>

<p>Spine:
<code>coffeescript
calls[name].push(callback)
</code></p>

<p><code>on</code> / <code>bind</code> はこんな感じです。疑似オーバーロードが面倒ですね。</p>

<h3>trigger</h3>

<p>次にイベントを発火させる<code>trigger</code></p>

<p>Backbone:
```javascript
trigger: function(name) {</p>

<pre><code>if(!this._events) return this; // イベントなんてなかった
var args = slice.call(arguments, 1); // 通常発火用の引数取り出し

// オーバーロード (onを参照)
if(!eventsApi(this, 'trigger', name, args)) return this; 

// 対象になるイベントとってくる
var events = this._events[name];
var allEvents = this._events.all; // 'all'で登録されたもの

// nameに該当するイベントを発火 引数にイベント名なし
if(events) triggerEvents(events, args);

// allのイベントを発火 出元を知る為に引数にイベント名を含める
if(allEvents) triggerEvents(allEvents, arguments);

return this;
</code></pre>

<p>}
```</p>

<p>```javascript
var triggerEvents = function(events, args) {</p>

<pre><code>var ev, i = -1, l = events.length;
while(++i &lt; l) { // _.each じゃ駄目なんだろうか
    (ev = events[i]).callback.apply(ev.ctx, args);
}
</code></pre>

<p>}
```</p>

<p>Spine:
```coffeescript
trigger: (args...) -></p>

<pre><code># 一つ目にイベント名が入っている
ev = args.shift()

# _callbacksからcallbackのリストを取ってくる、無かったら何もしない
list = @hasOwnProperty('_callbacks') and @_callbacks?[ev]
return unless list

for callback in list
    # 失敗したらやめる
    if callback.apply(this, args) is false
        break

return true
</code></pre>

<p>```</p>

<p>基本は一緒ですが、<code>all</code>と引数の扱い方が違います。
Backboneは<code>all</code>として登録されたものも、同時に発火させます。
この時に渡される引数が、イベント名を含めたものになるので、<code>all</code>以外で登録されたものとは引数が異なります。どうなのこれ。</p>

<p>Backboneは<code>context</code>に指定されているものを<code>this</code>にバインドして発火させます。</p>

<h2>off / unbind</h2>

<h2>気になるところがあってですね</h2>

<p>どっちもそうなんだけど、<code>off</code>/<code>unbind</code>、とあと<code>stopListening</code>する時にすべての引数を省略すると全部消す、って動きをする。
要するに疑似オーバーロードなんだけど、これが、一番目の引数のbooleanで分岐してる。</p>

<p>```coffeescript</p>

<h1>Spine</h1>

<p>stopListening: (obj, ev, callback) ->
  if obj</p>

<pre><code># ....
</code></pre>

<p>  else</p>

<pre><code># unbind all
</code></pre>

<p>```</p>

<p>つまりは、現実的に起こる/起こすようなコードを書くのか、というのは置いておいて、</p>

<p><code>javascript
obj.stopListening(undefined);
</code></p>

<p>ってなったときに、イベントが全部消える。実装的に <code>f()</code> と <code>f(undefined)</code> の区別を付ける事が出来ない。
で、これって、<code>arguments.length</code>とかを見るべきだと思うんだけど、どうなんだろ、という疑問。
僕は、メソッド単体としてみたときに上の例は、オブジェクトを元にした<code>unbind</code>/<code>stop</code>であって、オブジェクトがないので、何も出来ない or エラーであってほしいと思う。</p>

<p>正直なところ、こういう挙動をするJavaScriptを、自分では絶対に書かない(書きたくない)ので、よくわからない。
なんで<code>stopListeningAll</code>みたいにメソッド切り分けないの、事故らないしそれでいいじゃん、とか、
引数を全部Objectにして</p>

<p><code>
obj.stopListening({all : true});
</code></p>

<p>とかで、いいじゃん感。こっちのがずいぶん楽だし、コードもすっきりすると思うんだけども。</p>

<p>まあよく分からんとか言ってて助けを待っててもこないので、
Spineに<a href="https://github.com/spine/spine/pull/450">ゴミ屑みたいな英語とともにプルリク</a>してみた。
タイトルはあとで表現がよくなかったことに気づいたので、アテにはしないほうがいい。
Yahoo翻訳を片手に糞英語を書いた結果、とりあえずやりたいことは分かってもらえたっぽい。
で、まあ当然なんだけど、最初に書いたようにコア部分なので、慎重に考えないとね・・・、みたいな感じ。</p>

<p>これ系の実装は気に入らないなーと思ってるし、自分では絶対に作らないので、
僕はこう思うんだけど、というのはすごい勉強になる。的外れな意見でもないっぽいし、とりあえずよかった。
僕はマージされれば嬉しいけど、テストは通ってるとはいえ、変えるのは影響範囲でかいだろうというのも分かってるつもりなので、結構駄目元。</p>

<p>(ぶっちゃけ、Backboneの方はコントリビューターも多すぎるし流速も速いし、そもそも無理だろ。というのはあったのでSpineにしたみたいなところはある。)</p>

<p>あいや、てゆーか、jQueryとかもなんすけどね。セレクトと生成分けろ感とかすごい。
ぼくはあーゆーいんたーふぇいすがきれいとかつかいやすいとはあんまりおもわないな。
(作る方が非現実的だから使うけど)</p>

<h2>次回</h2>

<p>Modelとかやると思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[半周遅れでBower使ってみる]]></title>
    <link href="http://yaakaito.org/blog/2013/04/02/hello-bower/"/>
    <updated>2013-04-02T02:12:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/04/02/hello-bower</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！curlしにいくのがだるいです。
そういや<a href="http://twitter.github.com/bower/">bower</a>ってあったなと思ったので試してみたメモ。といってもまだ使ってみたレベルなので使い方くらいです。</p>

<h2>bower をインストール</h2>

<p><code>
$ npm install -g bower
</code></p>

<p>やりましたね！</p>

<h2>どんな品揃えかみてみる</h2>

<p><code>search</code>を引数なしでやると全部出てきます。</p>

<p><code>
$ bower search
</code></p>

<p>ドドドドドドドーーーー！！！ときて僕のScrollback Linesが足りなくなりました。行数でも数えてみます。</p>

<p><code>
$ bower search | wc -l
1505
</code></p>

<p>すごい！むかし30個くらいしかなかった気がする！！！
jQuery PlugingとかBackboneの拡張とか、Angularの拡張はたくさんありました。(関係ないけどBackboke Pluginとか名前になってるか分からないのでこう書いてる)</p>

<p>で、大体有名どころとそのプラグインはあるし、<code>npm</code>も組み合わせればほとんど大丈夫だろなーという感じでした。</p>

<h2>使ってみる</h2>

<p>大体npmと似たような感じで使います。例えばjQueryほしいなーと思ったら、</p>

<p><code>
$ bower install jquery
</code></p>

<p>これで <code>components</code> というディレクトリが出来るので、ここにjQueryが入ってます。</p>

<p>```
$ tree
.
└── components</p>

<pre><code>└── jquery
    ├── component.json
    ├── composer.json
    ├── jquery-migrate.js
    ├── jquery-migrate.min.js
    ├── jquery.js
    └── jquery.min.js
</code></pre>

<p>```</p>

<p>npmでいうところの<code>node_modules</code>ですね。あとはほしいものをどんどん突っ込んでいけば</p>

<p>```
$ bower install jasmine
$ bower install backbone
$ tree -L 2
.
└── components</p>

<pre><code>├── backbone
├── jasmine
└── jquery
</code></pre>

<p>```</p>

<p>という感じに揃っていきます。便利ですね。</p>

<h2>component.json</h2>

<p>npmで言うところの<code>package.json</code>ですね。中身もほぼ一緒です。</p>

<p>```
{
  "name" : "thogehoge",
  "version" : "0.0.0",
  "dependencies" : {</p>

<pre><code>"backbone" : "~1.0.0",
"jquery" : "~1.9.1",
</code></pre>

<p>  }
}
```</p>

<p>みたいに書いておいて、</p>

<p><code>
$ bower install
</code></p>

<p>すれば<code>dependencies</code>が全部<code>components</code>に入ります。</p>

<h2>便利そうかどうか</h2>

<p>まあ便利なんじゃないでしょうか、ロードするときにパスが長くなるのがちょっと面倒くらいですね。
この辺は多分<code>git clone</code>してきてるだけなので、元のリポジトリ依存っぽいような臭いがします。(たいして調べてないのでテキトーです。)</p>

<p>ただでさえ汚くなりがちなJavaScriptのリポジトリですが、<code>components</code>をgitignoreしておけばちょっとは綺麗になりそうですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocha + Testem + HTMLCov 出来るようにする]]></title>
    <link href="http://yaakaito.org/blog/2013/03/23/testing-mocha-testem-htmlcov/"/>
    <updated>2013-03-23T14:32:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/23/testing-mocha-testem-htmlcov</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！だるくなくJavaScript開発できる環境を探しています。</p>

<p>というわけでタイトル通りなんですが、Mocha + Testem + HTML-Cov環境を試してみようと思うので、それの作り方です。
想定している使い方としては、普段はTestemを使ってChrome、Firefox、Safariあたりでテストを回しつつ、たまにカバレッジを確認して〜くらいの割と普通な感じです。
CIは今回はやりません。本当は同じランナーでやりたかったんですが、めんどいので分けました。
もっといいやり方知ってる人いたら教えてください！</p>

<p><a href="https://github.com/yaakaito/mocha-testem-htmlcov">作られたリポジトリはgithubにあります。</a></p>

<h2>必要な物の準備</h2>

<p>せっかくなので？ node 0.10.1 を使います。</p>

<p><code>
$ nvm install 0.10.1
</code></p>

<p>必要なモジュールをいれます。</p>

<ul>
<li>testem</li>
<li>mocha</li>
<li>jscoverage</li>
<li>json2htmlcov</li>
<li>mocha-phantomjs

<ul>
<li>phantomjs</li>
</ul>
</li>
</ul>


<p><code>
$ brew install phantomjs
</code></p>

<p><code>
$ npm install -g testem mocha mocha-phantomjs jscoverage json2htmlcov
</code></p>

<p>メンドーだったので僕は<code>Makefile</code>使ってますが、<code>grunt</code>とかがいいですって人はそれもいれるといいと思います。</p>

<h3>chaiとsinonをとってくる</h3>

<p>chaiとsinonを使いたいので、とってきます。sinon-chaiは別にいらないかなーと思ってる子なので入れてません。
<code>/test/vendor</code> みたいなところに配置しておきます。</p>

<p><code>
$ curl -O http://chaijs.com/chai.js
$ curl -O http://sinonjs.org/releases/sinon-1.6.0.js
</code></p>

<h2>適当にテスト用のjs書く</h2>

<p>サンプル用に適当に</p>

<p>```javascript
// /src/sample.js
var A = (function(){
  function A() {</p>

<p>  }
  A.prototype.method = function(v) {</p>

<pre><code>if (v) {
  return "YES";
}
else {
  return "NO";
}
</code></pre>

<p>  }
  return A;
})();
```</p>

<p>テストはこんな感じ、<code>NO</code>の方は通らないようにしてあります。</p>

<p>```javascript
// /test/tests/sample-tests.js
describe('Sample', function(){
  var a;
  beforeEach(function(){</p>

<pre><code>a = new A();
</code></pre>

<p>  });</p>

<p>  it('YES', function(){</p>

<pre><code>chai.expect(a.method(true)).to.equals('YES');
</code></pre>

<p>  })
});
```</p>

<h2>testem.jsonを書く</h2>

<p>chaiやsinonを一緒に混ぜるようにして、<code>testem.json</code>を作ります。</p>

<p>```javascript
{
  "framework" : "mocha",
  "src_files" : [</p>

<pre><code>"src/**/*.js",
"test/vendor/chai.js",
"test/vendor/sinon.js",
"test/tests/**/*-tests.js"
</code></pre>

<p>  ]
}
```</p>

<p>これでtestem側は終わりです。走らせてみましょう。</p>

<p><code>
$ testem
</code></p>

<p><img src="/images/testem-run.png"></p>

<p>テストしたいブラウザで <code>http://localhost:7357</code> を開きます。あとは開きっぱでよいです。</p>

<p><img src="/images/testem-browsers.png"></p>

<p><img src="/images/testem-result.png"></p>

<p>テストしてくれます、便利ですね。</p>

<h2>HTMLCovでカバレッジを出す</h2>

<p>こういう感じにカバレッジを出す事ができます。</p>

<p><img src="/images/htmlcov.png"></p>

<p>適当にいろいろなブラウザでテストした結果をマージできると理想だけど、面倒そうなのでphantomjsで・・・ 、というか<a href="https://github.com/visionmedia/mocha/issues/281">サポートされていない</a>のかな。
<a href="https://github.com/visionmedia/mocha/pull/506">こういうのもあったけど</a>今回はスルーで。</p>

<p>手順としては</p>

<ul>
<li><code>jscoverage</code> で対象のjsを変換</li>
<li><code>mocha-phantomjs</code> で実行して <code>jsoncov</code> の形で吐き出す</li>
<li><code>json2htmlcov</code> を通して HTMLCov へ変換</li>
</ul>


<p>と、ちょっと面倒くさい。</p>

<h3>ランナーを用意する</h3>

<p><code>mocha</code> のランナーを用意します。</p>

<p><code>
$ mocha init [dir]
</code></p>

<p>吐き出されたのを適当に <code>coverage-runner.html</code> みたいなのにリネームして、必要なファイルを読み込むようにする。</p>

<p>```html</p>

<script src="../cover/sample.js"></script>


<script src="./vendor/mocha.js"></script>


<script src="./vendor/chai.js"></script>


<script src="./vendor/sinon.js"></script>


<script>mocha.setup('bdd')</script>


<script src="./tests/sample-tests.js"></script>


<p>```</p>

<p>僕はカバレッジに使うjsを<code>cover</code>というディレクトリに吐き出すようにしたので、こんな感じで。</p>

<p><code>mocha-phantomjs</code> を使えるようにブートを置き換えます。</p>

<p>```javascript</p>

<script>
  if (window.mochaPhantomJS) {
    mochaPhantomJS.run()
  }
  else {
    mocha.run();
  }
</script>


<p>```</p>

<h3>カバレッジを出すコマンド</h3>

<p>さっきの手順に従ったコマンドで実行します。</p>

<p><code>
$ jscoverage src/sample.js ./cover/
$ mocha-phantomjs -R json-cov test/cover-runner.html | json2htmlcov &gt; cover.html
</code></p>

<p>こんな感じで <code>cover.html</code> が作られるので、あとはそれを<code>open</code>すればよいです。</p>

<p>ちょっと面倒ですが、簡単な部類でしたね。</p>

<h2>ちなみに</h2>

<p>僕は Buster.JS 派です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flow.jsをObjective-Cに移植してみた]]></title>
    <link href="http://yaakaito.org/blog/2013/03/21/flow-m-0-0-1/"/>
    <updated>2013-03-21T03:24:00+09:00</updated>
    <id>http://yaakaito.org/blog/2013/03/21/flow-m-0-0-1</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
<a href="http://www.slideshare.net/uupaa/flowjs">Flow.js</a> というJavaScriptのライブラリを見て、面白いなーと思ったのでObjective-Cでも似たようなことが出来るようにしてみた。junctionとforkは(まだ)実装してないので、完全な移植ではないです。
コードも適当なので遊び程度に見ていただければ。
ところで英語全然書けないので誰か「Natural English」ってプルリクをください。</p>

<p><a href="https://github.com/yaakaito/Flow.m">Flow.m</a></p>

<p>名前はまんま、一応Cocoapodsにも入れてはいるのでCocoapods使ってる人は</p>

<p><code>ruby
pod 'Flow.m'
</code></p>

<p>で使える。</p>

<h2>出来ること</h2>

<p>といっても、基本的には本家と同じなので、<a href="http://www.slideshare.net/uupaa/flowjs">本家のスライド</a>の方が詳しいのでそちらを参照していただきたく。
ただ微妙に仕様が違うところもある感じなので流しで書いておく。</p>

<h3>基本的な使い方</h3>

<p><code>FMFlow</code>のオブジェクトを作る時に、<code>waits</code>と<code>completionBlock</code>を渡す。
<code>FMFlow</code>のオブジェクトには<code>pass</code>ってメソッドが生えていて、これを呼び出すとカウンタが一個づつあがる。
呼び出した回数が<code>waits</code>に達したら、<code>completionBlock</code>が呼び出される。</p>

<p>```objective-c
FMFlow <em>flow = [FMFlow flowWithWaits:2 completionBlock:<sup>(NSError</sup> </em>error, FMArguments *arguments) {</p>

<pre><code>NSLog(@"Flow!");
</code></pre>

<p>}];</p>

<p>[flow pass];
[flow pass]; // Flow!
```</p>

<h3>extends</h3>

<p>処理待機数を増やす、増える方向だけ。</p>

<p>```objective-c
FMFlow <em>flow = [FMFlow flowWithWaits:1 completionBlock:<sup>(NSError</sup> </em>error, FMArguments *arguments) {</p>

<pre><code>NSLog(@"Flow!");
</code></pre>

<p>}];</p>

<p>[flow extend:1];</p>

<p>[flow pass];
[flow pass];  // Flow!
```</p>

<h3>arguments</h3>

<p>本家に合わせる為に若干無理してるんだけど、<code>passWithValue:</code> か <code>passWithValue:forKey:</code>で渡せるし、インデックスかキーか好きなほうでどうぞ。</p>

<p>```objective-c
FMFlow <em>flow = [FMFlow flowWithWaits:2 completionBlock:<sup>(NSError</sup> </em>error, FMArguments *arguments) {</p>

<pre><code>NSLog([arguments argumentAtIndex:0]); // HOGE
NSLog([arguments argumentAtIndex:1]); // FUGA
NSLog([arguments argumentForKey:@"fuga"]); // FUGA
</code></pre>

<p>}];</p>

<p>[flow passWithValue:@"HOGE"];
[flow passWithValue:@"FUGA" forKey:@"fuga"];
```</p>

<h3>missとmissable</h3>

<p>失敗可能回数の設定と、失敗の通知</p>

<p>```objective-c
FMFlow <em>flow = [FMFlow flowWithWaits:1 completionBlock:<sup>(NSError</sup> </em>error, FMArguments *arguments) {</p>

<pre><code>NSLog(@"Flow!");
</code></pre>

<p>}];</p>

<p>[flow missable:1];</p>

<p>[flow miss]; // 1回は許可してるので問題ない
[flow pass]; // Flow!
```</p>

<p>失敗可能回数を超えた時は</p>

<p>```objective-c
FMFlow <em>flow = [FMFlow flowWithWaits:2 completionBlock:<sup>(NSError</sup> </em>error, FMArguments *arguments) {</p>

<pre><code>// error がこんな感じで渡ってくる
// error.domain : org.yaakaito.flow
// error.code   : kFMErrorCodeFailure
NSLog([arguments argumentAtIndex:0]); // ここまでに渡した引数は渡ってくる 
</code></pre>

<p>}];</p>

<p>[flow missable:1];</p>

<p>[flow miss];
[flow passWithValue:@"HOGE"];
[flow miss]; // 失敗したのでCompletionBlockを呼び出す
```</p>

<h3>exit</h3>

<p>強制終了。これはちょっと本家と違って、<code>userInfo</code>を渡すと、<code>CompletionBlock</code>の<code>error.userInfo</code>に入ってくるようになってる。</p>

<p>```objective-c
FMFlow <em>flow = [FMFlow flowWithWaits:1 completionBlock:<sup>(NSError</sup> </em>error, FMArguments *arguments) {</p>

<pre><code>// error.domain : org.yaakaito.flow
// error.code   : kFMErrorCodeExit
NSLog([[error userInfo] objectForKey:@"msg"]); // えらー
</code></pre>

<p>}];</p>

<p>[flow exit:@{ @"msg" : @"えらー"}];
```</p>

<p>こんな感じです、残りはまた今度・・・</p>

<h2>ところで</h2>

<p>AppCode2.0のDarculaテーマは、見やすいのでおすすめです。</p>

<p>あああと非同期テストが必要になったわけなんですが、Cocoapods見てても、SenTestingKit+Asyncみたいなのはみるんだけど単純なモジュールねーなーみたいな。
みんなSenTestingKit用のスーパークラス作るのかなーと思った。
僕は別にちょっと待っててくれればいいだけなので、べつにただのオブジェクトでもいいわってなって、<a href="https://github.com/yaakaito/AsyncTestSupporter">こういう</a>の作った。作ったというか、元から他のコードで使ってたやつをpod化しただけ。
なんか<code>waitForTimeout:</code>くらいしか使わんし、それで十分やろ、とか思うので、それしか作ってない。</p>

<p>```objective-c
- (void)testAsyncMethod
{</p>

<p>  // Create instance.
  AsyncTestSupporter *asyncTest = [[AsyncTestSupporter alloc] init];</p>

<p>  // Prepare for asynchronous call.
  __weak AsyncTestSupporter *that = asyncTest;
  // Call asynchronous method.
  [object asyncMethod:<sup>()</sup> { // Completion blocks.</p>

<pre><code>// Wait for notify with timeout seconds.
[that waitForTimeout:10];
</code></pre>

<p>  }];</p>

<p>  // Notify state if completed asynchronous method.
  [asyncTest notify:notify:kAsyncTestSupporterWaitStatusSuccess];</p>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>

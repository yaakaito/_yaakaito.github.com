<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | yaakaito.org]]></title>
  <link href="http://yaakaito.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://yaakaito.github.com/"/>
  <updated>2013-03-16T00:02:30+09:00</updated>
  <id>http://yaakaito.github.com/</id>
  <author>
    <name><![CDATA[yaakaito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chaplin Overview オレオレ意訳]]></title>
    <link href="http://yaakaito.github.com/blog/2013/03/15/chaplin-overview-ja/"/>
    <updated>2013-03-15T07:22:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/03/15/chaplin-overview-ja</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。
このエントリは<a href="http://chaplinjs.org/">Chaplin</a>の<a href="https://github.com/chaplinjs/chaplin/blob/master/docs/overview.md">Overview</a>のオレオレ意訳です。あんまり信用はしないでください。
おかしいだろそれ、というのあれば教えてください。</p>

<p><em>italic</em>はこうでは、と思ったのを勝手に足してるところです。</p>

<h2>アーキテクチャ</h2>

<p>ChaplinはJavaScriptでWebアプリケーションを作るためのアーキテクチャで、backboneをベースにしてるよ。
<a href="http://moviepilot.com">moviepilot.com</a>みたいな単一ページの大規模プロジェクトに使われてるよ。</p>

<h2>フレームワーク</h2>

<h3>Application</h3>

<p>ブートストラップ。Chaplinを利用する上で重要なとこだよ。</p>

<h3>Router</h3>

<p>定義されたURLマッピングにしたがって、<code>Controller</code>の各アクションを呼び出すことを助ける部分だよ。
URLの変更などを監視して、責任を持つよ。
でも、<code>Router</code>が直接<code>Controller</code>をキックするんじゃなくて、それは<code>Dispatcher</code>の仕事だよ。</p>

<h3>Route</h3>

<p>Railsに似たURLマッピングを提供するよ。<code>route.coffee</code>みたいなファイル作るといいよ。
こんな感じで定義するよ。</p>

<p><code>coffeescript
match 'likes/:id', 'likes#show'
</code></p>

<p>ルートにマッチしたら、GETパラメータと、パターン一致部分(例で言えば<code>id</code>) <em>と、オプションの引数</em> を持って、<code>matchRoute</code>イベントを発行するよ。
これは<code>Dispacther</code>に引き継がれるよ。</p>

<h3>Dispachter</h3>

<p>ルーティングに関するイベントをListenしてるよ。
対象のイベントが発生したら、それに対応する<code>Controller</code>のインスタンスを生成して、対象のアクション(<code>Controller</code>のメソッド)を呼び出すよ。</p>

<h3>Layout</h3>

<p><code>Layout</code>はアプリケーションの中で一番外側にあるビューだよ。新しい<code>Controller</code>が起動されると、<code>Layout</code>は新しい<code>Controller</code>をメインビューにするよ。</p>

<p><code>Layout</code>はアプリケーション内でのリンクをうまく処理する役割ももつよ。たとえば<code>&lt;a href="http://yaakaito.github.com/foo"&gt;</code>というリンクなんかも、正しく機能するようにしてくれるよ。</p>

<p>そして、<code>window</code>や<code>document</code>などのトップレイヤーに対するイベントハンドリングなどは<code>Layout</code>で行うよ。</p>

<h3>Mediator</h3>

<p><code>Mediator</code>はpub/subを実装するためのブローカーだよ。
Chaplinアプリケーションでは、ほとんどのモジュール間通信で利用されるべきだよ。
モジュールは<code>this.publishEvent</code>でイベントを発行できるし、<code>this.subscribeEvent</code>でイベントをリッスンできるよ。
例えばユーザーモデルのような永続的でグローバルにアクセス可能なものを共有するために使ったりもできるよ。</p>

<h3>Controller</h3>

<p><em>BackboneのControllerを継承してるよ。だからBackboneの方もちゃんと見た方がいいよ。</em></p>

<p><code>Controller</code>は<code>Model</code>とそれに結びつけられる<code>View</code>をインスタンス化して、管理するよ。
１つの<code>Controller</code>はアプリケーションの１画面を構成するようにするのが普通だよ。
けど、メインビュー的なものを提供して、他に現在のURLを表すためのコントローラーが存在することもあるよ。 <em>(多分HeaderとかFooterなんかの共通パーツのこと？)</em></p>

<p>コントローラーはアプリケーションの機能を定義することが多いよ。
<code>Controller</code>は<code>index</code>や<code>show</code>、<code>edit</code>のようなアクションメソッドを提供することができるよ。
そしてこれらのアクションはURLが一致したときに<code>Dispacther</code>から呼び出されるよ。</p>

<h3>Model</h3>

<p><em>BackboneのModelを継承してるよ。だからBackboneの方もちゃんと見た方がいいよ。</em></p>

<p>データと、それに操作を行うためのロジックをもってるよ。</p>

<h3>Collection</h3>

<p><em>BackboneのCollectionを継承してるよ。だからBackboneの方もちゃんと見た方がいいよ。</em></p>

<p><code>Model</code>のリストを持つためのものだよ。クライアントサイドでフィルタリングをしたり、ソートしたりするためのロジックをもってるよ。</p>

<h3>View</h3>

<p><em>BackboneのViewを継承してるよ。だからBackboneの方もちゃんと見た方がいいよ。</em></p>

<p><code>Model</code>をテンプレートを使って描画したり、その中に含まれるユーザーイベントなどを管理するよ。</p>

<h3>Collection View</h3>

<p><code>Collection</code>のためのビューだよ。それぞれの<code>Model</code>に対する<code>View</code>を作って、それを管理するよ。</p>

<h2>アプリケーションの起動フロー</h2>

<p>アプリケーションは、<code>Chaplin.Application</code>を継承したところから始まるよ。
<code>Application</code>では<code>Dispacther</code> <code>Layout</code> <code>Mediator</code> <code>Router</code> の順で、これらをインスタンス化してセットアップしてね。</p>

<p><code>Router</code>に<code>Route</code>を登録するよ。普通は設定ファイルとして<code>route.coffee</code>か<code>route.js</code>使うよ。
<code>Route</code>は<code>Controller</code>のアクションにURLパターンをマッピングするよ、たとえば<code>/</code>なら<code>HomeController</code>の<code>index</code>、という感じだよ。</p>

<p>ここまで終わったら、<code>initRouter</code>を呼び出して、URLの監視を始めよう。URLにマッチするパターンであれば、<code>Dispacther</code>や他のモジュールへ通知するよ。</p>

<p><code>Dispacther</code>まで来たら、対象の<code>Controller</code>をインスタンス化して、対応するアクションを呼び出すよ。
<code>Dispachter</code>はアクティブな<code>Controller</code>を管理していて、必要ないものを破棄するよ。</p>

<p>対応するアクションが呼び出されたら、<code>Model</code>や<code>Collection</code>を<code>Ctonroller</code>で生成して、それに対応する<code>View</code>をレンダリングしていくのがよくある流れだよ。
<code>Model</code>や<code>Collection</code>は必要に応じてサーバーからデータを取得したりするよ。
<code>Model</code>や<code>Collection</code>と、それに対応する<code>View</code>は、<code>Controller</code>によって管理されるのが通例だよ。</p>

<h2>メモリ管理について</h2>

<p>Chaplinでは、適切なメモリ管理を行う、というのがコアにあるよ。</p>

<p>みんな、あまりJavaScriptでGCやメモリ管理に関する議論をしないけど、それは重要なトピックだよ。
イベントドリブンで動くシステムは、イベントを登録するときにオブジェクト間の参照が発生するし、それが削除されないと、メモリ解放されないよ。</p>

<p>だから、ChaplinではBackboneのModel、Collection、View、Controllerを拡張して、それらのクリーンアップを保証して、パワフルな処理プロセスを実装できるようにしているよ。</p>

<h2>終わり</h2>

<p>起動フローとかはコードと付き合わせないと分かりにくいところが多いと思うので、<a href="https://github.com/paulmillr/ostio/blob/master/app/application.coffee">ost.ioのブート</a>とか合わせて読むといいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brunchプロジェクトでtestemを使う]]></title>
    <link href="http://yaakaito.github.com/blog/2013/03/14/brunch-withw-testem/"/>
    <updated>2013-03-14T16:36:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/03/14/brunch-withw-testem</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。
<a href="http://yaakaito.org/blog/2013/03/08/hello-brunch/">前回</a>みたいな手順で始めたChaplinのプロジェクトで<a href="https://github.com/airportyh/testem">testem</a>を使う手順です。
Brunch with Chaplinを使っていますが、Brunchプロジェクトなら多分大体同じ感じでいけると思います。</p>

<h2>testemの準備</h2>

<p>testemがないと始まらないのでtestemをインストールします。</p>

<p><code>
$ npm install -g testem
</code></p>

<h2>testem.jsonの設定</h2>

<p>BrunchはデフォルトでMochaを使ったテストのテンプレートを作ってくれるので、これを参考にします。
<code>brunch build</code>すると、<code>/public/test/index.html</code>ができるので、これを参考に書いていきます。</p>

<p>```javascript
{
  "framework" : "mocha",
  "src_files" : [</p>

<pre><code>"public/javascripts/vendor.js",
"public/javascripts/app.js",
"public/test/javascripts/test-vendor.js",
"public/test/javascripts/test.js"
</code></pre>

<p>  ]
}
```</p>

<p>これをプロジェクトのルートに配置します。</p>

<h2>brunchが生成するmochaを消す</h2>

<p>brunchはmochaやsinonを <code>public/test/javascripts/test-vendor.js</code> にまとめてビルドしているので、このビルドからmochaを外します。とりあえず <code>rm</code> してしまいます。</p>

<p><code>
$ rm test/vender/scripts/mocha[version].js
</code></p>

<h2>brunch watchを起動する</h2>

<p>brunchはテストをまとめて <code>public/test/javascripts/test.js</code> にビルドしてくれます。
なのでtestem側からはこれを見ているだけでOKです。便利ですね。</p>

<p><code>
$ brunch w -s
</code></p>

<p>ついでなのでサーバーも立てておきます。</p>

<h2>testemでテストする</h2>

<p>あとはtestemでテストするだけです。</p>

<p><code>
$ testem
</code></p>

<p>便利ですね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BrunchでJavaScriptアプリはじめる手順]]></title>
    <link href="http://yaakaito.github.com/blog/2013/03/08/hello-brunch/"/>
    <updated>2013-03-08T08:14:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/03/08/hello-brunch</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
最近<a href="http://brunch.io/">Brunch</a>というものを知ったので、とりあえずはじめてみたときのメモです。
正確には<a href="http://chaplinjs.org/">Chaplin</a>を先に知って、結構良さげだし試してみよーとか思ったところが始まりなので、brunch-with-chaplinを前提にしてます。(今回はchaplinの話はしません。)</p>

<h2>brunchってそもそも何</h2>

<p>gruntとか使っている人は、gruntにgiter8をくっつけて++というイメージが分かりやすいかと思います。Yeomanとかその系列のものです。
レイヤーが違うので比較してもあんまり意味はないんですが、grunt使っていた頃からすると、</p>

<ul>
<li>最初からCoffeeScriptのことを考えているので、CoffeeScript使う場合は嬉しい (最近はそうでもないみたいだけど)</li>
<li>プロジェクトのひな形作りやすいのは嬉しい</li>
<li>ビルトインサーバーがあるので、<code>watch --server</code> みたいなの出来て嬉しい</li>
<li>Mocha+phantomjsを最初から生成してくれるので、テストドリブンで始めるが楽</li>
<li>ブラウザのオートリロードとかもあるよ！</li>
</ul>


<p>という感じで、gruntみたいに自分でタスク組んで〜とやるよりは、サクッと開発を始められる感じです。
そこまで使ってないし、まだよくわからんので説明はこのくらいで。</p>

<p>CommonJSっぽいモジュールシステムとかはまあ一長一短だと思うのであんまり。</p>

<h2>はじめる</h2>

<p>brunchをインストールします。(node 0.6.10 ~)</p>

<p><code>
$ npm install -g brunch
</code></p>

<h3>プロジェクトのひな形を作る</h3>

<p>Githubからテンプレートを引っ張ってきて作ります。今回はchaplinが使いたかったので、brunch-with-chaplinを引っ張ってきます。</p>

<p><code>
$ brunch new &lt;app-name&gt; --skeleton https://github.com/paulmillr/brunch-with-chaplin
</code></p>

<p>簡単ですね。<code>tree</code>してみるとこんな感じになってます。</p>

<p><code>
$ tree -L 2 -F --dirsfirst
.
├── app/
│   ├── assets/
│   ├── controllers/
│   ├── lib/
│   ├── models/
│   ├── views/
│   ├── application.coffee
│   ├── initialize.coffee
│   ├── mediator.coffee
│   └── routes.coffee
├── generators/
│   ├── collection/
│   ├── collection-test/
│   ├── collection-view/
│   ├── controller/
│   ├── controller-test/
│   ├── generator/
│   ├── model/
│   ├── model-test/
│   ├── style/
│   ├── template/
│   ├── view/
│   └── view-test/
├── node_modules/
│   ├── chai/
│   ├── clean-css-brunch/
│   ├── coffee-script-brunch/
│   ├── css-brunch/
│   ├── handlebars-brunch/
│   ├── javascript-brunch/
│   ├── sinon/
│   ├── sinon-chai/
│   ├── stylus-brunch/
│   └── uglify-js-brunch/
├── test/
│   ├── assets/
│   ├── vendor/
│   ├── views/
│   └── test-helpers.coffee
├── vendor/
│   ├── scripts/
│   └── styles/
├── README.md
├── config.coffee
└── package.json
</code></p>

<p><code>config.coffee</code>にいろいろ設定が書いてあるんですが、長いので別で書きます。</p>

<p>とりあえずビルドしてみます。</p>

<p><code>
$ brunch build
</code></p>

<p><code>/public</code>ができて、ここにもろもろ生成されたファイルが入っています。デプロイのときはここを使えばよいっぽい。</p>

<p>ビルトインサーバーを使ってアプリを起動してみる。</p>

<p><code>
$ brunch watch --server
$ open http://localhost:3333/
</code></p>

<p><img src="/images/hello-brunch.png"></p>

<p>こういう感じにアプリが起動していることがわかります、やりましたね！</p>

<h2>テストを走らせる</h2>

<p>サーバー起動してる状態で、<code>/public</code>の中に出来たテストランナーをブラウザで開けば普通にテストが走ります。
phantomjs使いたいときは、</p>

<p><code>
$ brunch test
</code></p>

<p>でよいらしいです。(使ってない)</p>

<h2>他の環境でのセットアップ</h2>

<p>brunchベースのプロジェクトにコミットするときは、
見た感じ、<code>npm install</code>すればよさそうなので試してみる</p>

<p><code>
$ npm install
$ brunch w --server
</code></p>

<p>出来た、これでよさげ。</p>

<p>使ってみてあーだこうだはもうちょっとしてから書こうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[buster-html-docとあとcoffee]]></title>
    <link href="http://yaakaito.github.com/blog/2013/03/02/buster-html-doc-and-coffee/"/>
    <updated>2013-03-02T14:40:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/03/02/buster-html-doc-and-coffee</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。
<a href="http://yaakaito.github.com/blog/2013/03/01/buster-testbed-and-boot/">前回BusterJSのtestbedの話</a>を書いたのですが、</p>

<p><blockquote><p>@yaakaito HTMLを用意するまでもない場合は buster-html-doc とかも良いと思いますがどうでしょう！</p><footer><strong>@y_imaya</strong> <cite><a href='https://twitter.com/y_imaya/status/307347977712848896'>twitter.com/y_imaya/status/&hellip;</a></cite></footer></blockquote></p>

<p>という意見をもらったので、こっちのことも書いておこうと思いました。</p>

<h2>そもそもbuster-html-docって何</h2>

<p>BusterJSはJSTestDriver形式で書かれたテストケースの実行をサポートしているのですが、JSTestDriverに<a href="http://code.google.com/p/js-test-driver/wiki/HtmlDoc">HTML Doc</a>という昨日があります。
この部分だけをBusterJS用に切り出したのがbuster-html-docで、前回のようにHTMLを用意するまでもない場合に</p>

<p><code>javascript
/*:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;*/
assert.equals(this.hoge.innerHTML, 'aaaa');
</code></p>

<p>という風にテスト毎にエレメントを生成することができます。</p>

<h2>使い方</h2>

<p><code>buster-html-doc</code>をnpmからインストールします。</p>

<p><code>
$ npm install buster-html-doc
</code></p>

<p><code>buster.js</code>でbuster-html-docを読み込むようにします。</p>

<p>```javascript
var config = module.exports;</p>

<p>config["browser test"] = {
  env : "browser",
  tests : [</p>

<pre><code>"test.js"
</code></pre>

<p>  ],
  extensions: [require("buster-html-doc")] // これ
}
```</p>

<p>こういう感じにテストを書きます。</p>

<p>```javascript
buster.testCase('hoge', {</p>

<pre><code>'test html doc' : function() {
    /*:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;*/
    assert.equals(this.hoge.innerHTML, 'aaaa');
}
</code></pre>

<p>})
```</p>

<p>これでテストを実行すると、テスト時に<code>/*:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;*/</code>の部分が、</p>

<p>```javascript
this.hoge = (function () {</p>

<pre><code>var element = document.createElement("div");
element.innerHTML = "&lt;p&gt;aaaa&lt;/p&gt;";if (element.childNodes.length &gt; 1) {
    throw new Error("HTML doc expected to only contain one root node, found " + element.childNodes.length); 
}
return element.firstChild; 
</code></pre>

<p>}());
```</p>

<p>という感じに変換されます。
あとはこのエレメントを使ってアサーションするなりできます。</p>

<p>上の例では<code>this.hoge</code>に対してエレメントを生成していますが、
そうではなく<code>body</code>とかに突っ込んでほしい場合は、<code>+=</code>を使って書く事もできます。</p>

<p><code>javascript
/*:DOC += &lt;p id="hoge"&gt;aaaa&lt;/p&gt;*/
assert.equals(document.getElementById('hoge').innerHTML, 'aaaa');
</code></p>

<p>という感じなのがbuster-html-docプラグインです。</p>

<h2>buster-coffee</h2>

<p>続いてbuster-coffeeなのですが、名前の通りテスト実行時にCoffeeScriptをコンパイルしてくれるので、コードをCoffeeScriptで書けるよ、というものです。
これ自体は特にめんどくさくなくて、npmでインストールして、</p>

<p><code>
$ npm install buster-coffee
</code></p>

<p>```javascript
var runner = module.exports;</p>

<p>runner["browser test"] = {
  env : "browser",
  tests : [</p>

<pre><code>"test.coffee" // coffee
</code></pre>

<p>  ],
  extensions: [require("buster-coffee")]
}
```</p>

<p>という風に使えばよいのですが、buster-html-docと少し相性の問題があるみたいで、</p>

<p><code>javascript
extensions: [require("buster-coffee"), require("buster-html-doc")]
</code></p>

<p>こういう感じにして、</p>

<p>```coffeescript
buster.testCase 'hoge',</p>

<pre><code>'test html doc' : -&gt;
    ###:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;###
    assert.equals(this.hoge.innerHTML, 'aaaa');
</code></pre>

<p>```</p>

<p>こう書いても、</p>

<blockquote><p>TypeError: Cannot read property 'innerHTML' of undefined</p></blockquote>

<p>となります。</p>

<p>コンパイルされるとHTML Docの部分は</p>

<p><code>javascript
/*:DOC hoge = &lt;p&gt;aaaa&lt;/p&gt;
*/
</code></p>

<p>こうなるはずなので、一見大丈夫そうに思えるんですが、うまくいきません。
というか自分でコンパイルするとちゃんと動くので、プラグインの実行順か、それぞれの実行タイミングが悪いのかみたいな話だと思います。</p>

<p>ハマりやすいので気をつけましょう。</p>

<p>回避策としてはプラグインのところ見直してプルリクエストが一番早そうなんですが、
僕は他の理由もあって先にcoffeeを別にコンパイルするようにしてしまいました。</p>

<h2>おまけ</h2>

<p>HTML Doc形式の書式が結構便利で、最近関わっているプロダクトだと</p>

<p>```coffeescript</p>

<h3>:XHR /hoge = {</h3>

<pre><code>fuga : 'fuga',
piyo : 'piyo'
</code></pre>

<p>}</p>

<h2>#</h2>

<h1>/hoge にアクセスしたらこのレスポンスが返ってくる (XHR部分のラッパー有)</h1>

<p>```</p>

<p>みたいにして通信部分をモックできるようしてみた、便利。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BusterJSでテストに使うHTMLの設定と手動実行]]></title>
    <link href="http://yaakaito.github.com/blog/2013/03/01/buster-testbed-and-boot/"/>
    <updated>2013-03-01T02:35:00+09:00</updated>
    <id>http://yaakaito.github.com/blog/2013/03/01/buster-testbed-and-boot</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです！
みなさんJavaScriptのテスト書いてますか？当然書いてますよね？？？</p>

<p>JSでテスト書く時に、こういうHTMLを使いたいんだけど的なことってあると思います。
BusterJSはデフォルトでいい感じのHTMLを作って使ってくれるので楽にテストをはじめられるんですが、まあ差し替えたいよねーってことで差し替えます。</p>

<p>BusterJSではこれをtestbedと呼んでいて、設定ファイル(だいたいの場合は<code>buster.js</code>)で設定することができます。
設定の仕方は<a href="http://docs.busterjs.org/en/latest/overview/#custom-test-beds">こんな感じ</a>なんだけど、いまんところ<code>testbed</code>ってプロパティは設定できないので、<code>resources</code>から設定します。</p>

<p>```javascript
var config = module.exports;</p>

<p>config["test"] = {</p>

<pre><code>sources: ["lib/*.js"],
tests: ["test/*-test.js"],
resources : {
    path : "/",
    file : "hoge.html"
}
</code></pre>

<p>};
```</p>

<p>というわけでこんな感じに設定を追加します。こうすると<code>hoge.html</code>を使ってテストを走らせてくれます。
で、テスト用のファイルを読み込まなきゃいけないわけで(sourcesとかtestsに設定してるやつ)、それがどこに埋め込まれるのかなーというと、コードを見てみた感じ、</p>

<ol>
<li><code>{{scripts}}</code> という文字列を探して、あったらそこを置き換える</li>
<li><code>&lt;/body&gt;</code> を探して、あったらその直前に置く</li>
<li><code>&lt;/html&gt;</code> を探して、あったらその直前に置く</li>
<li>何も見つからなかったら、一番最後に連結する</li>
</ol>


<p>という順番になってた。(<code>resource-middleware</code>とか読めば分かる)
なので、例えばテストの時だけ <code>initialize</code> みたいな関数を、セットアップスクリプト走らせる前に置き換えたいんだけど的なときは、(↓みたいな感じの場合)</p>

<p>```html</p>

<script src="hoge.js"></script>


<!-- この中に initialize って関数があるとする -->


<script>
// この時点までにテストのときだけinitializeを置き換えてほしい ＞＜
initialize({
    hoge : fuga
});
</script>


<p>```</p>

<p><code>{{scripts}}</code> を使って、</p>

<p>```html</p>

<script src="hoge.js"></script>


<p>{{scripts}}</p>

<script>
initialize({
    hoge : fuga
});
</script>


<p>```</p>

<p>こういう感じにする。で、<code>bootstrap.js</code>みたいなのを用意してあげて、
<code>javascript
// bootstrap.js
initialize = function() { } // 何もしないでーーー＾ー＾
</code></p>

<p>これを<code>sources</code>に追加する。</p>

<p>```javascript
var config = module.exports;</p>

<p>config["test"] = {</p>

<pre><code>sources: ["lib/*.js", "bootstrap.js"],
tests: ["test/*-test.js"],
resources : {
    path : "/",
    file : "hoge.html"
}
</code></pre>

<p>};
```</p>

<p>とすると、実際にテストで使われるファイルは、</p>

<p>```html</p>

<script src="hoge.js"></script>


<script src="bootstrap.js"></script>


<script src="テストとか"></script>


<script>
initialize({ // なにも・・・なかった・・・
    hoge : fuga
});
</script>


<p>```</p>

<p>こんな感じになる。便利！</p>

<p>で、次にテストの実行開始タイミングをコントロールしたいと思うんだけど、割と簡単んで、<a href="http://docs.busterjs.org/en/latest/starting-testrun-manually/#starting-testrun-manually">この辺</a>にも書いてあるように、</p>

<p>```javascript
var config = module.exports;</p>

<p>config["test"] = {</p>

<pre><code>autoRun: false,
sources: ["lib/*.js"],
tests: ["test/*-test.js"],
resources : {
    path : "/",
    file : "hoge.html"
}
</code></pre>

<p>};
```</p>

<p><code>autoRun</code>を<code>false</code>にして、さっきの例だと、<code>initialize</code>まで呼ばれたら実行してほしい！とかなら、</p>

<p>```javascript
// bootstrap.js
initialize = function() {</p>

<pre><code>buster.run();
</code></pre>

<p>}
```</p>

<p>みたいな感じ</p>

<p>というわけでテストに使うHTMLも設定できましたし、ガンガンテストできますね！</p>

<p>そういや別にもう一個なんか書こうと思ってたんですが、忘れたので知ってる人いたら教えてください。</p>
]]></content>
  </entry>
  
</feed>

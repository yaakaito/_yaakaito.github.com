<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: QuickCheck | yaakaito.org]]></title>
  <link href="http://yaakaito.org/blog/categories/quickcheck/atom.xml" rel="self"/>
  <link href="http://yaakaito.org/"/>
  <updated>2013-03-24T01:24:27+09:00</updated>
  <id>http://yaakaito.org/</id>
  <author>
    <name><![CDATA[yaakaito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[dequeueReusable~の実装とテスト]]></title>
    <link href="http://yaakaito.org/blog/2012/08/19/dequeue-reusable-making/"/>
    <updated>2012-08-19T02:35:00+09:00</updated>
    <id>http://yaakaito.org/blog/2012/08/19/dequeue-reusable-making</id>
    <content type="html"><![CDATA[<p>こんにちは！うきょーです。UITableViewに実装されている<code>dequeueReusableCellWithIdentifier</code>と同等の機能を持ったものを開発したいんだけど的な話です。
dataSourceに似たのインターフェイスを持ってビューを実装するときに、不特定個数のものに対してインスタンスをすべて生成するわけにも行かないので、ある程度制御してあげる必要があります。
今回はUIScrollView上に構築していく前提になっています。シンタックスハイライターを作ろうとしているので、使い回して描画される対象になるのは、行数表示とコード一行分の表示です。</p>

<p>コードはいつも通りgithubにあります。</p>

<ul>
<li><a href="https://github.com/yaakaito/BGSyntaxHighlighter">BGSyntaxHighlighter</a>

<ul>
<li>注)ライブラリとしては未完成です</li>
</ul>
</li>
</ul>


<h2>実装方法を考える</h2>

<p>さらっと思いつくところではリングバッファのようにしておけばよい気がしますね。
ATPagingViewが似たような機能を実装していたのでコード読んでみたのですが、こちらはページング終了時にリサイクル用のSetに取っておいて、
次の表示タイミングでそこから適当な物をもっていく、という方式でした。微妙にリングバッファと違う・・・。
リングバッファっぽい感じでいけそう？と考えていたのですが、リングバッファにしてしまうと、画面の大きさに合わせてバッファの数を調整しなおさければいけなかったり、
今回は中で簡潔している構造になっているのでよいのですが、APIを外に向けたときに、identifier関連でめんどくなりそうだなーという気がしたので、ATPagingViewがやっているような方法を採用しました。
やることとしては、</p>

<ul>
<li>初回時に必要な分のビューを作る</li>
<li>スクロールにあわせて必要なビューの差分を取って作る</li>
<li>必要なビューを使い回す対象にする</li>
</ul>


<p>案外、簡単そうに見えますね。</p>

<h2>UIScrollViewベースで実装するときの注意点</h2>

<p>UIScrollViewで実装する場合には、UITableViewほど正確にスクロールの位置がとれる訳ではないのがポイントというか、気をつけるところです。
今回はめんどくさいのでやらなかったのですが、ある程度余裕を持って描画してあげないと、下の方のビューが欠けてしまったりします。
適当な余裕をもって描画してあげるといい感じになると思います。</p>

<h2>実装していこう！</h2>

<p>というわけで実装していきましょう。</p>

<h4>下準備</h4>

<p>まずはdequeueReusableのインターフェイスを作ります。今回は行数表示とコード一行分の表示を分けているので、2つ分必要です。
が、実装としては両方同じなので、行数表示だけの例を出していきます。全文を確認したい方はgithubからどうぞ！</p>

<p>```objective-c
- (BGSyntaxHighlightLineNumberView*)dequeueReusableLineNumberView {</p>

<pre><code>if(self.recycleLineNumberViews &amp;&amp; [self.recycleLineNumberViews count] &gt; 0) {
    BGSyntaxHighlightLineNumberView *view = [self.recycleLineNumberViews anyObject];
    [self.recycleLineNumberViews removeObject:view];
    return view;
}
return nil;
</code></pre>

<p>}
```</p>

<p><code>recycleLineNumberViews</code>は<code>NSMutableSet</code>で、ここに再利用可能なビューを入れて行きます。
このメソッドは利用可能なビューが存在すれば、そこから適当なビューを抜き出してきて返す、という具合です。
実際にビューに対しての描画処理をここでやってしまうと残念な感じになってしまうので、依存しないように気をつけましょう。
次のここからビューの取得を試みて、なければ新しいものを作って、描画を行うメソッドです。
UITableViewで言えば、<code>cellForRowAtIndexPath:</code>にあたる部分で、iOSエンジニアなら見覚えのある感じだと思います。</p>

<p>```objective-c
- (BGSyntaxHighlightLineNumberView*)lineNumberViewAtRow:(NSInteger)row {</p>

<pre><code>BGSyntaxHighlightLineNumberView *view = [self dequeueReusableLineNumberView];
if(!view) {
    view = [[BGSyntaxHighlightLineNumberView alloc] initWithFrame:CGRectZero];
}
view.lineNumber = row;
return view;
</code></pre>

<p>}
```</p>

<p>これで大体の準備ができました。<code>BGSyntaxHighlightLineNumberView</code>が必要なときは、このメソッド経由で取得すれば、
再利用できるときは再利用を、ビューが足りずに新しく作る必要があるときは新しくビューを作ってくれます。</p>

<h3>UIScrollViewへ表示する</h3>

<p>では、これを使って実際に<code>UIScrollView</code>へ行数を表示してみましょう。
初回のタイミングというか、最初に必要なものが決まるタイミングで必要な分だけビューを作ります。
(今回は<code>layoutSubViews</code>なんですが、レイアウト以外をここでやるの微妙な感じがするので、こっちの方がよくね？というのがあれば教えてください。)</p>

<p>```objective-c
- (void)layoutSubviews {</p>

<pre><code>// ...     

for(NSInteger i = 0; i &lt; [self.codeObject numberOfCodeLines]; i++) {
    [self makeAndLayoutLineAtRow:i + 1];

    if((i + 1) * kLineHeight &gt;= self.frame.size.height) {
        self.viewingLinesRange = NSMakeRange(0U, i);
        break;
    }
}

// ...
</code></pre>

<p>}
```</p>

<p>必要な分だけビューを作って、初期表示に必要ない部分になったらどこまで描画したかを記録しbreakします。
<code>makeAndLayoutLineAtRow:</code>は指定した行のビューを生成してくれるメソッドで、中身はこんな感じです。</p>

<p>```objective-c
(void)makeAndLayoutLineAtRow:(NSInteger)row {</p>

<pre><code>BGSyntaxHighlightLineNumberView *lineNumberView = [self lineNumberViewAtRow:row];
[self.lineNumberViews addObject:lineNumberView];
[self.lineNumberScrollView addSubview:lineNumberView];
lineNumberView.frame = CGRectMake(0, kLineHeight * (row-1), kLineNumberWidth, kLineHeight);
</code></pre>

<p>}
```</p>

<p>ここまでで、とりあえず最初の表示が作れました、スクロールにあわせて必要な分を生成するようにしましょう。
<code>UIScrollViewDelegate</code>の<code>scrollViewDidScroll:</code>で、</p>

<p>```objective-c
- (void)scrollViewDidScroll:(UIScrollView *)scrollView {</p>

<pre><code>// ...

CGFloat y = scrollView.contentOffset.y;
if(y &lt;= 0 || y + scrollView.frame.size.height &gt; [self.codeObject numberOfCodeLines] * kLineHeight) {
    return;
}

// いらないビューを再利用対象にする
[self recycleLinesOfOutsideFromRangeY:NSMakeRange(scrollView.contentOffset.y, scrollView.frame.size.height)];

/*
  差分を計算して必要なビューをmakeAndLayoutLineAtRow:で描画
*/  
</code></pre>

<p>```</p>

<p>差分の計算ロジックなんかは長くなってしまうので、省略しています。表示範囲内にはいっているけれど、まだ表示されてないビューがある場合に表示するロジックです。
<code>recycleLinesOfOutsideFromRangeY:</code>は、名前がよくわからなかったので微妙なのですが、スクロール後に必要なくなったものを<code>removeFromSuperView</code>して、再利用対象にするメソッドです。
一見作ってから削除、でもそんなに変わらない気がしますが、先に削除しておくと、削除されたものをそのまま使い回すことができるので、少しメモリが節約できます。
<code>recycleLinesOfOutsideFromRangeY:</code>を省略して簡単に乗せておくと、</p>

<p>```objective-c
- (void)recycleLinesOfOutsideFromRangeY:(NSRange)range {</p>

<pre><code>NSMutableArray *addingRecycleLineNumberViews = [NSMutableArray array];
for (NSUInteger i = 0, length = [self.lineNumberViews count]; i &lt; length; i++) {
   /*
      範囲外のものを抽出
    */ 
}
[self.recycleLineNumberViews addObjectsFromArray:addingRecycleLineNumberViews];
[self.lineNumberViews removeObjectsInArray:addingRecycleLineNumberViews];
</code></pre>

<p>}
```
という具合です。</p>

<h3>実際どれくらいのビューを必要とするのか</h3>

<p>ここまでで大体実装ができた訳ですが、実際にどれくらいのビューが必要になるのでしょうか。
今回の例では一行の高さが20pxなので、縦を460px確保したとすると、初期状態で460/20で23個必要になります。
スクロールにあわせて描画を行って行くと、初回で何個かallocされれ、あとは大抵24~27個程度のビューのみで構成することがきでています。</p>

<h2>テストを書く</h2>

<p>さて、次はテストを書きましょう。<code>dequeueReusable~</code>のテストとして必要な項目は、</p>

<ul>
<li>あるスクロール位置でのビューが想定した通りにレンダリングされているか</li>
<li>適当なところにスクロールしたときにビューを使い回しているか</li>
</ul>


<p>の2つでしょうか。まずは1つ目の方からテストしてみましょう。
説明を分かり易くするために、ここからビューの高さを100px(ぴったりの場合ビューは5個)で統一していきます。</p>

<h3>想定したレンダリングになっているかテスト</h3>

<p>キチンとレイアウトが出来ているかは別のテスト(<code>dequeueReusable~</code>を無視したテスト)に任せるとして、スクロールした位置によってビューの枚数がキチンとあっているかを確認しましょう。
まずは、ぴったりと高さの倍数で移動したケース。</p>

<p>```objective-c
- (void)testRenderingViews {</p>

<pre><code>view.frame = CGRectMake(0, 0, 320, 100);
[view layoutSubviews];
GHAssertEquals(5U, [view.lineNumberViews count], @"100/20=5で初期段階で5個ある");
GHAssertEquals(5U, [view.lineViews count], @"100/20=5で初期段階で5個ある");

[view.lineNumberScrollView scrollRectToVisible:CGRectMake(0, 180, 320, 100) animated:NO];
GHAssertEquals(5U, [view.lineNumberViews count], @"ぴったりで移動するのでやっぱり5個ある");
GHAssertEquals(5U, [view.lineViews count], @"ぴったりで移動するのでやっぱり5個ある");
</code></pre>

<p>}
```</p>

<p>こっちは簡単ですね。次に10pxくらいずれた場合、この場合は一番上と下に半分づつのビューが必要なので、全体で6個になります、</p>

<p>```objective-c
- (void)testMisalignRenderingVies {</p>

<pre><code>view.frame = CGRectMake(0, 0, 320, 100);
[view layoutSubviews];

[view.lineNumberScrollView scrollRectToVisible:CGRectMake(0, 190, 320, 100) animated:NO];
GHAssertEquals(6U, [view.lineNumberViews count], @"すこしずれて移動するので下に1個余分に追加されて6個になる");
GHAssertEquals(6U, [view.lineViews count], @"すこしずれて移動するので下に1個余分に追加されて6個になる");
</code></pre>

<p>}
```</p>

<p>こんな感じです。</p>

<h3>適当なところにスクロールした場合でのビューの個数をテスト</h3>

<p>どこにスクロールしたときも、ビューを使い回して一定以上の数のビューを生成しないのが今回の目的なので、これをテストします。
自分でたくさんいろんなところにスクロールするテストケースを書いてもいいですが、こういう時はQuickCheckが適用できます。
Objective-CのQuickCheckライブラリは、NLTQuickCheckをご利用ください。(宣伝)</p>

<ul>
<li><a href="https://github.com/yaakaito/NLTQuickCheck">NLTQuickCheck</a></li>
</ul>


<p>標準のdoubleArbitraryでは少し大きいので、doubleArbitaryの<code>quadraticGenWithA:B:C:</code>へ渡す数値を調整して、大体+-0~600pxくらいの範囲の値を作ってくれるArbitraryを定義します。</p>

<p>```objective-c
@implementation NSNumber (BGArbitrary)
+ (id)scrollYArbitrary {</p>

<pre><code>NLTQGen *quadratic = [NLTQGen quadraticGenWithA:1&lt;&lt;16 b:1 c:1];
NLTQGen *doubleGen = [NLTQGen genWithGenerateBlock:^id(double progress, int random) {
    NLTQGen *chooser = [NLTQGen randomGen];
    [chooser resizeWithMinimumSeed:-random maximumSeed:+random];
    random = [[chooser valueWithProgress:progress] intValue];
    int place = [[NSString stringWithFormat:@"%d",random] length] - 2;
    int l = [[NLTQStandardGen standardGenWithMinimumSeed:2 maximumSeed:place] currentGeneratedValue];
    int base = 10;
    for (int i = 1; i &lt; l; i++) {
        base *= 10;
    }
    return [NSNumber numberWithDouble:(double)random/(double)base];

}];
[doubleGen bindingGen:quadratic];
return doubleGen;    
</code></pre>

<p>}
@end
```</p>

<p>このArbitraryを使って、さっきのテストと同じ要領で適当な場所へスクロールさせます。</p>

<p>```objective-c
- (BOOL)propRecycleLogic:(NSNumber*)y {</p>

<pre><code>view = [[BGSyntaxHighlightView alloc] initWithFrame:CGRectZero];
codeObject = [[BGCodeObject alloc] initWithCodeString:[NSBundle codeStringForResouce:@"mockLongObjective-C" ofType:@"txt"]];
view.codeObject = codeObject;
view.frame = CGRectMake(0, 500, 320, 100);
[view layoutSubviews];
[view.lineNumberScrollView scrollRectToVisible:CGRectMake(0, [y floatValue], 320, 100) animated:NO];
GHTestLog(@"%d", [view.lineNumberViews count]);
return [view.lineNumberViews count] &lt; 8; // 3つくらいは許容できる
</code></pre>

<p>}</p>

<ul>
<li>(void)testRecycle {
  NLTQTestable *testable = [NLTQTestable testableWithPropertySelector:@selector(propRecycleLogic:)

<pre><code>                                                           target:self
                                                      arbitraries:[NSNumber scrollYArbitrary], nil];
</code></pre>

<p>  [testable verboseCheck];
  GHAssertTrue([testable success], @"%@", [testable prettyReport]);
}
```</p></li>
</ul>


<p>アサーションは<code>return [view.lineNumberViews count] &lt; 8;</code>で、ピッタリが5個なので大体8個あれば十分使い回しきれるだろう、という風に書きます。</p>

<h2>まとめ</h2>

<p>これで<code>dequeueReusable~</code>っぽいものが実装できました。
ビューが多くなってしまうが、不可視なビューが存在する、という状況では実装しておいて損はない機能です。
ただやってみて実装コストは少し高めだなーと感じたので、その辺は相談、という感じでしょうか。</p>
]]></content>
  </entry>
  
</feed>
